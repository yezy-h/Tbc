cscope 16 $HOME\TemperatureController"               0001047096
	@APP/BinType.h

1 #i‡!
deföed
–
_BINTYPE_H
 )

2 
	#_BINTYPE_H


	)

5 
	#B0000_0000
 0x00

	)

6 
	#B0000_0001
 0x01

	)

7 
	#B0000_0010
 0x02

	)

8 
	#B0000_0011
 0x03

	)

9 
	#B0000_0100
 0x04

	)

10 
	#B0000_0101
 0x05

	)

11 
	#B0000_0110
 0x06

	)

12 
	#B0000_0111
 0x07

	)

13 
	#B0000_1000
 0x08

	)

14 
	#B0000_1001
 0x09

	)

15 
	#B0000_1010
 0x0A

	)

16 
	#B0000_1011
 0x0B

	)

17 
	#B0000_1100
 0x0C

	)

18 
	#B0000_1101
 0x0D

	)

19 
	#B0000_1110
 0x0E

	)

20 
	#B0000_1111
 0x0F

	)

22 
	#B0001_0000
 0x10

	)

23 
	#B0001_0001
 0x11

	)

24 
	#B0001_0010
 0x12

	)

25 
	#B0001_0011
 0x13

	)

26 
	#B0001_0100
 0x14

	)

27 
	#B0001_0101
 0x15

	)

28 
	#B0001_0110
 0x16

	)

29 
	#B0001_0111
 0x17

	)

30 
	#B0001_1000
 0x18

	)

31 
	#B0001_1001
 0x19

	)

32 
	#B0001_1010
 0x1A

	)

33 
	#B0001_1011
 0x1B

	)

34 
	#B0001_1100
 0x1C

	)

35 
	#B0001_1101
 0x1D

	)

36 
	#B0001_1110
 0x1E

	)

37 
	#B0001_1111
 0x1F

	)

39 
	#B0010_0000
 0x20

	)

40 
	#B0010_0001
 0x21

	)

41 
	#B0010_0010
 0x22

	)

42 
	#B0010_0011
 0x23

	)

43 
	#B0010_0100
 0x24

	)

44 
	#B0010_0101
 0x25

	)

45 
	#B0010_0110
 0x26

	)

46 
	#B0010_0111
 0x27

	)

47 
	#B0010_1000
 0x28

	)

48 
	#B0010_1001
 0x29

	)

49 
	#B0010_1010
 0x2A

	)

50 
	#B0010_1011
 0x2B

	)

51 
	#B0010_1100
 0x2C

	)

52 
	#B0010_1101
 0x2D

	)

53 
	#B0010_1110
 0x2E

	)

54 
	#B0010_1111
 0x2F

	)

56 
	#B0011_0000
 0x30

	)

57 
	#B0011_0001
 0x31

	)

58 
	#B0011_0010
 0x32

	)

59 
	#B0011_0011
 0x33

	)

60 
	#B0011_0100
 0x34

	)

61 
	#B0011_0101
 0x35

	)

62 
	#B0011_0110
 0x36

	)

63 
	#B0011_0111
 0x37

	)

64 
	#B0011_1000
 0x38

	)

65 
	#B0011_1001
 0x39

	)

66 
	#B0011_1010
 0x3A

	)

67 
	#B0011_1011
 0x3B

	)

68 
	#B0011_1100
 0x3C

	)

69 
	#B0011_1101
 0x3D

	)

70 
	#B0011_1110
 0x3E

	)

71 
	#B0011_1111
 0x3F

	)

73 
	#B0100_0000
 0x40

	)

74 
	#B0100_0001
 0x41

	)

75 
	#B0100_0010
 0x42

	)

76 
	#B0100_0011
 0x43

	)

77 
	#B0100_0100
 0x44

	)

78 
	#B0100_0101
 0x45

	)

79 
	#B0100_0110
 0x46

	)

80 
	#B0100_0111
 0x47

	)

81 
	#B0100_1000
 0x48

	)

82 
	#B0100_1001
 0x49

	)

83 
	#B0100_1010
 0x4A

	)

84 
	#B0100_1011
 0x4B

	)

85 
	#B0100_1100
 0x4C

	)

86 
	#B0100_1101
 0x4D

	)

87 
	#B0100_1110
 0x4E

	)

88 
	#B0100_1111
 0x4F

	)

90 
	#B0101_0000
 0x50

	)

91 
	#B0101_0001
 0x51

	)

92 
	#B0101_0010
 0x52

	)

93 
	#B0101_0011
 0x53

	)

94 
	#B0101_0100
 0x54

	)

95 
	#B0101_0101
 0x55

	)

96 
	#B0101_0110
 0x56

	)

97 
	#B0101_0111
 0x57

	)

98 
	#B0101_1000
 0x58

	)

99 
	#B0101_1001
 0x59

	)

100 
	#B0101_1010
 0x5A

	)

101 
	#B0101_1011
 0x5B

	)

102 
	#B0101_1100
 0x5C

	)

103 
	#B0101_1101
 0x5D

	)

104 
	#B0101_1110
 0x5E

	)

105 
	#B0101_1111
 0x5F

	)

107 
	#B0110_0000
 0x60

	)

108 
	#B0110_0001
 0x61

	)

109 
	#B0110_0010
 0x62

	)

110 
	#B0110_0011
 0x63

	)

111 
	#B0110_0100
 0x64

	)

112 
	#B0110_0101
 0x65

	)

113 
	#B0110_0110
 0x66

	)

114 
	#B0110_0111
 0x67

	)

115 
	#B0110_1000
 0x68

	)

116 
	#B0110_1001
 0x69

	)

117 
	#B0110_1010
 0x6A

	)

118 
	#B0110_1011
 0x6B

	)

119 
	#B0110_1100
 0x6C

	)

120 
	#B0110_1101
 0x6D

	)

121 
	#B0110_1110
 0x6E

	)

122 
	#B0110_1111
 0x6F

	)

124 
	#B0111_0000
 0x70

	)

125 
	#B0111_0001
 0x71

	)

126 
	#B0111_0010
 0x72

	)

127 
	#B0111_0011
 0x73

	)

128 
	#B0111_0100
 0x74

	)

129 
	#B0111_0101
 0x75

	)

130 
	#B0111_0110
 0x76

	)

131 
	#B0111_0111
 0x77

	)

132 
	#B0111_1000
 0x78

	)

133 
	#B0111_1001
 0x79

	)

134 
	#B0111_1010
 0x7A

	)

135 
	#B0111_1011
 0x7B

	)

136 
	#B0111_1100
 0x7C

	)

137 
	#B0111_1101
 0x7D

	)

138 
	#B0111_1110
 0x7E

	)

139 
	#B0111_1111
 0x7F

	)

141 
	#B1000_0000
 0x80

	)

142 
	#B1000_0001
 0x81

	)

143 
	#B1000_0010
 0x82

	)

144 
	#B1000_0011
 0x83

	)

145 
	#B1000_0100
 0x84

	)

146 
	#B1000_0101
 0x85

	)

147 
	#B1000_0110
 0x86

	)

148 
	#B1000_0111
 0x87

	)

149 
	#B1000_1000
 0x88

	)

150 
	#B1000_1001
 0x89

	)

151 
	#B1000_1010
 0x8A

	)

152 
	#B1000_1011
 0x8B

	)

153 
	#B1000_1100
 0x8C

	)

154 
	#B1000_1101
 0x8D

	)

155 
	#B1000_1110
 0x8E

	)

156 
	#B1000_1111
 0x8F

	)

158 
	#B1001_0000
 0x90

	)

159 
	#B1001_0001
 0x91

	)

160 
	#B1001_0010
 0x92

	)

161 
	#B1001_0011
 0x93

	)

162 
	#B1001_0100
 0x94

	)

163 
	#B1001_0101
 0x95

	)

164 
	#B1001_0110
 0x96

	)

165 
	#B1001_0111
 0x97

	)

166 
	#B1001_1000
 0x98

	)

167 
	#B1001_1001
 0x99

	)

168 
	#B1001_1010
 0x9A

	)

169 
	#B1001_1011
 0x9B

	)

170 
	#B1001_1100
 0x9C

	)

171 
	#B1001_1101
 0x9D

	)

172 
	#B1001_1110
 0x9E

	)

173 
	#B1001_1111
 0x9F

	)

175 
	#B1010_0000
 0xA0

	)

176 
	#B1010_0001
 0xA1

	)

177 
	#B1010_0010
 0xA2

	)

178 
	#B1010_0011
 0xA3

	)

179 
	#B1010_0100
 0xA4

	)

180 
	#B1010_0101
 0xA5

	)

181 
	#B1010_0110
 0xA6

	)

182 
	#B1010_0111
 0xA7

	)

183 
	#B1010_1000
 0xA8

	)

184 
	#B1010_1001
 0xA9

	)

185 
	#B1010_1010
 0xAA

	)

186 
	#B1010_1011
 0xAB

	)

187 
	#B1010_1100
 0xAC

	)

188 
	#B1010_1101
 0xAD

	)

189 
	#B1010_1110
 0xAE

	)

190 
	#B1010_1111
 0xAF

	)

192 
	#B1011_0000
 0xB0

	)

193 
	#B1011_0001
 0xB1

	)

194 
	#B1011_0010
 0xB2

	)

195 
	#B1011_0011
 0xB3

	)

196 
	#B1011_0100
 0xB4

	)

197 
	#B1011_0101
 0xB5

	)

198 
	#B1011_0110
 0xB6

	)

199 
	#B1011_0111
 0xB7

	)

200 
	#B1011_1000
 0xB8

	)

201 
	#B1011_1001
 0xB9

	)

202 
	#B1011_1010
 0xBA

	)

203 
	#B1011_1011
 0xBB

	)

204 
	#B1011_1100
 0xBC

	)

205 
	#B1011_1101
 0xBD

	)

206 
	#B1011_1110
 0xBE

	)

207 
	#B1011_1111
 0xBF

	)

209 
	#B1100_0000
 0xC0

	)

210 
	#B1100_0001
 0xC1

	)

211 
	#B1100_0010
 0xC2

	)

212 
	#B1100_0011
 0xC3

	)

213 
	#B1100_0100
 0xC4

	)

214 
	#B1100_0101
 0xC5

	)

215 
	#B1100_0110
 0xC6

	)

216 
	#B1100_0111
 0xC7

	)

217 
	#B1100_1000
 0xC8

	)

218 
	#B1100_1001
 0xC9

	)

219 
	#B1100_1010
 0xCA

	)

220 
	#B1100_1011
 0xCB

	)

221 
	#B1100_1100
 0xCC

	)

222 
	#B1100_1101
 0xCD

	)

223 
	#B1100_1110
 0xCE

	)

224 
	#B1100_1111
 0xCF

	)

226 
	#B1101_0000
 0xD0

	)

227 
	#B1101_0001
 0xD1

	)

228 
	#B1101_0010
 0xD2

	)

229 
	#B1101_0011
 0xD3

	)

230 
	#B1101_0100
 0xD4

	)

231 
	#B1101_0101
 0xD5

	)

232 
	#B1101_0110
 0xD6

	)

233 
	#B1101_0111
 0xD7

	)

234 
	#B1101_1000
 0xD8

	)

235 
	#B1101_1001
 0xD9

	)

236 
	#B1101_1010
 0xDA

	)

237 
	#B1101_1011
 0xDB

	)

238 
	#B1101_1100
 0xDC

	)

239 
	#B1101_1101
 0xDD

	)

240 
	#B1101_1110
 0xDE

	)

241 
	#B1101_1111
 0xDF

	)

243 
	#B1110_0000
 0xE0

	)

244 
	#B1110_0001
 0xE1

	)

245 
	#B1110_0010
 0xE2

	)

246 
	#B1110_0011
 0xE3

	)

247 
	#B1110_0100
 0xE4

	)

248 
	#B1110_0101
 0xE5

	)

249 
	#B1110_0110
 0xE6

	)

250 
	#B1110_0111
 0xE7

	)

251 
	#B1110_1000
 0xE8

	)

252 
	#B1110_1001
 0xE9

	)

253 
	#B1110_1010
 0xEA

	)

254 
	#B1110_1011
 0xEB

	)

255 
	#B1110_1100
 0xEC

	)

256 
	#B1110_1101
 0xED

	)

257 
	#B1110_1110
 0xEE

	)

258 
	#B1110_1111
 0xEF

	)

260 
	#B1111_0000
 0xF0

	)

261 
	#B1111_0001
 0xF1

	)

262 
	#B1111_0010
 0xF2

	)

263 
	#B1111_0011
 0xF3

	)

264 
	#B1111_0100
 0xF4

	)

265 
	#B1111_0101
 0xF5

	)

266 
	#B1111_0110
 0xF6

	)

267 
	#B1111_0111
 0xF7

	)

268 
	#B1111_1000
 0xF8

	)

269 
	#B1111_1001
 0xF9

	)

270 
	#B1111_1010
 0xFA

	)

271 
	#B1111_1011
 0xFB

	)

272 
	#B1111_1100
 0xFC

	)

273 
	#B1111_1101
 0xFD

	)

274 
	#B1111_1110
 0xFE

	)

275 
	#B1111_1111
 0xFF

	)

	@APP/app.c

1 
	#GLOBALS


	)

3 
	~"°d¨g.h
"

5 
	~"ö˛udes.h
"

6 
	~"globÆs.h
"

7 
	~"≠p.h
"

8 
	~"ds18b20.h
"

9 
	~"Án.h
"

10 
	~"ads1100.h
"

11 
	~"bluëoŸh.h
"

12 
	~"m25p16.h
"

13 
	~"lcd1602.h
"

14 
	~"m©h.h
"

15 
	~"pid.h
"

17 
	#SSR_PERIOD
 4000

	)

18 
	#SSR_PERIOD_PER
 400

	)

19 
	#SSR_MAX
 10

	)

21 
OS_EVENT
* 
	g©CmdMaûbox
;

22 
	gisRu¬ög
 = 0;

23 
	gtime
;

24 
	gãm≥øtuª
;

26 
	gs_cou¡
 = 0;

27 
	gs_•ìd
[10];

28 
	gs_ãm≥øtuª
[10];

29 
	gs_time
[10];

30 
	gs_s§1
 = 0;

31 
	gs_s§2
 = 0;

32 
	gs_Án1
 = 0;

33 
	gs_Án2
 = 0;

48 
OS_STK
 
	gAµ_TaskSèπStk
[
APP_TASK_START_STK_SIZE
];

50 
OS_STK
 
	gèsk_¥o˚ss_©cmd_°k
[
èsk_¥o˚ss_©cmd_°k_size
];

52 
__Æign
(8Ë
OS_STK
 
	gèsk_ªp‹t_w‹k_°k
[
èsk_ªp‹t_w‹k_°k_size
];

54 
OS_STK
 
	gèsk_£t_s§1_°k
[
èsk_£t_s§1_size
];

55 
OS_STK
 
	gèsk_£t_s§2_°k
[
èsk_£t_s§2_size
];

62 
Aµ_TaskCª©e
();

63 
Aµ_TaskSèπ
(* 
p_¨g
);

65 
èsk_¥o˚ss_©cmd
(*
∑rg
);

67 
èsk_ªp‹t_w‹k
(*
∑rg
);

69 
èsk_£t_s§1
(*
∑rg
);

70 
èsk_£t_s§2
(*
∑rg
);

72 
	$maö
()

74 
CPU_INT08U
 
os_îr
;

76 
	`CPU_I¡Dis
();

78 
	`OSInô
();

80 
	`BSP_Inô
();

81 
	`¥ötk
("Hello, This is Temperature Controller System!\r\n");

82 
os_îr
 = 
	`OSTaskCª©e
(((*Ë(*)Ë
Aµ_TaskSèπ
,

84 (
OS_STK
 *Ë&
Aµ_TaskSèπStk
[
APP_TASK_START_STK_SIZE
 - 1],

85 (
INT8U
Ë
APP_TASK_START_PRIO
);

87 if(
os_îr
 !
OS_ERR_NONE
) {

88 
	`¥ötk
("create mainÅask failed\r\n");

90 
	`OSTimeSë
(0);

91 
	`OSSèπ
();

94 
	}
}

112 
	$Aµ_TaskSèπ
(* 
p_¨g
)

114 (Ë
p_¨g
;

117 
	`OS_CPU_SysTickInô
();

120 #i‡(
OS_TASK_STAT_EN
 > 0)

122 
	`OSSètInô
();

126 
	`Aµ_TaskCª©e
();

129 
	`OSTimeDlyHMSM
(0, 0, 5, 0);

131 
	}
}

149 
	$Aµ_TaskCª©e
()

151 
	`OSTaskCª©eExt
(
èsk_¥o˚ss_©cmd
,

153 (
OS_STK
 *)&
èsk_¥o˚ss_©cmd_°k
[
èsk_¥o˚ss_©cmd_°k_size
 - 1],

154 
èsk_¥o˚ss_©cmd_¥io
,

155 
èsk_¥o˚ss_©cmd_¥io
,

156 (
OS_STK
 *)&
èsk_¥o˚ss_©cmd_°k
[0],

157 
èsk_¥o˚ss_©cmd_°k_size
,

159 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

161 
	`OSTaskCª©eExt
(
èsk_ªp‹t_w‹k
,

163 (
OS_STK
 *)&
èsk_ªp‹t_w‹k_°k
[
èsk_ªp‹t_w‹k_°k_size
 - 1],

164 
èsk_ªp‹t_w‹k_¥io
,

165 
èsk_ªp‹t_w‹k_¥io
,

166 (
OS_STK
 *)&
èsk_ªp‹t_w‹k_°k
[0],

167 
èsk_ªp‹t_w‹k_°k_size
,

169 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

170 
	`OSTaskCª©eExt
(
èsk_£t_s§1
,

172 (
OS_STK
 *)&
èsk_£t_s§1_°k
[
èsk_£t_s§1_size
 - 1],

173 
èsk_£t_s§1_¥io
,

174 
èsk_£t_s§1_¥io
,

175 (
OS_STK
 *)&
èsk_£t_s§1_°k
[0],

176 
èsk_£t_s§1_size
,

178 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

179 
	`OSTaskCª©eExt
(
èsk_£t_s§2
,

181 (
OS_STK
 *)&
èsk_£t_s§2_°k
[
èsk_£t_s§2_size
 - 1],

182 
èsk_£t_s§2_¥io
,

183 
èsk_£t_s§2_¥io
,

184 (
OS_STK
 *)&
èsk_£t_s§2_°k
[0],

185 
èsk_£t_s§2_size
,

187 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

188 
	}
}

190 
	$èsk_¥o˚ss_©cmd
(*
∑rg
)

192 ()
∑rg
;

194 
	`twi_öô
();

197 
	`OSTimeDlyHMSM
(0, 0, 10, 0);

199 
	}
}

201 
	$c⁄vî_ãmp
(
öput
)

203 
Rt
;

204 
x
;

205 
A
 = 3.9083;

206 
B
 = -5.775;

207 
c
;

208 
T
;

209 
v
;

211 
v
 = 0.5 + 
öput
 / 32768.0;

212 
Rt
 = 
v
 * 500.0 / (1.0 - v);

213 
x
 = 1.0 - 
Rt
 / 1000.0;

214 
c
 = 10000.0 * 
	`sqπ
(
A
 * A - 0.4 * 
B
 * 
x
);

215 
T
 = (
c
 - 
A
 * 10000.0Ë/ 2.0 / 
B
;

217  
T
;

218 
	}
}

220 
	$èsk_ªp‹t_w‹k
(*
∑rg
)

224 
uöt16_t
 
ªsu…0
;

225 
uöt16_t
 
ªsu…1
;

227 ()
∑rg
;

229 
s_s§1
 = 5;

231 
ªsu…0
 = 
	`ads1100_gë_ªsu…
(0);

232 
	`OSTimeDlyHMSM
(0, 0, 0, 200);

233 
ªsu…1
 = 
	`ads1100_gë_ªsu…
(1);

235 
	`¥ötk
("T0 = %f, T1 = %f\r\n",

236 
	`c⁄vî_ãmp
(()
ªsu…0
),

237 
	`c⁄vî_ãmp
(()
ªsu…1
));

250 
	`OSTimeDlyHMSM
(0, 0, 1, 0);

252 
	}
}

254 
	$èsk_£t_s§1
(*
∑rg
)

256 ()
∑rg
;

260 
	`SSR1_E«bÀ
(1);

261 
	`OSTimeDlyHMSM
(0, 0, 0, 
SSR_PERIOD_PER
 * 
s_s§1
);

263 
	`SSR1_E«bÀ
(0);

264 
	`OSTimeDlyHMSM
(0, 0, 0, 
SSR_PERIOD_PER
 * (
SSR_MAX
 - 
s_s§1
));

266 
	}
}

268 
	$èsk_£t_s§2
(*
∑rg
)

270 ()
∑rg
;

274 
	`SSR2_E«bÀ
(1);

275 
	`OSTimeDlyHMSM
(0, 0, 0, 
SSR_PERIOD_PER
 * 
s_s§2
);

277 
	`SSR2_E«bÀ
(0);

278 
	`OSTimeDlyHMSM
(0, 0, 0, 
SSR_PERIOD_PER
 * (
SSR_MAX
 - 
s_s§2
));

280 
	}
}

289 #i‡(
OS_APP_HOOKS_EN
 > 0)

302 
	$Aµ_TaskCª©eHook
(
OS_TCB
* 
±cb
)

304 
	}
}

318 
	$Aµ_TaskDñHook
(
OS_TCB
* 
±cb
)

320 (Ë
±cb
;

321 
	}
}

336 #i‡
OS_VERSION
 >= 251

337 
	$Aµ_TaskIdÀHook
()

339 
	}
}

353 
	$Aµ_TaskSètHook
()

355 
	}
}

374 #i‡
OS_TASK_SW_HOOK_EN
 > 0

375 
	$Aµ_TaskSwHook
()

377 
	}
}

393 #i‡
OS_VERSION
 >= 204

394 
	$Aµ_TCBInôHook
(
OS_TCB
* 
±cb
)

396 (Ë
±cb
;

397 
	}
}

	@APP/app.h

1 #i‚de‡
__APP_H__


2 
	#__APP_H__


	)

4 
	#CMD_START
 0x01

	)

5 
	#CMD_STOP
 0x02

	)

6 
	#CMD_SETTING
 0x03

	)

7 
	#CMD_GET_TEMPERATURE
 0x10

	)

9 
	#CMD_SET_SSR1
 0x20

	)

10 
	#CMD_SET_SSR2
 0x21

	)

11 
	#CMD_GET_SSR1
 0x22

	)

12 
	#CMD_GET_SSR2
 0x23

	)

14 
	#CMD_SET_FAN1
 0x30

	)

15 
	#CMD_SET_FAN2
 0x31

	)

17 
	s__AµCmd
 {

18 
u8
 
	mty≥
;

19 
u8
 
	mÀn
;

20 
u8
 
	md©a
[40];

21 } 
	tAµCmd
;

	@APP/app_cfg.h

29 #i‚de‡ 
__APP_CFG_H__


30 
	#__APP_CFG_H__


	)

52 
	#APP_TASK_START_PRIO
 2

	)

54 
	#èsk_¥o˚ss_©cmd_¥io
 10

	)

56 
	#èsk_ªp‹t_w‹k_¥io
 11

	)

58 
	#èsk_£t_s§1_¥io
 12

	)

59 
	#èsk_£t_s§2_¥io
 13

	)

61 
	#APP_TASK_START_STK_SIZE
 128

	)

63 
	#èsk_¥o˚ss_©cmd_°k_size
 128

	)

65 
	#èsk_ªp‹t_w‹k_°k_size
 512

	)

67 
	#èsk_£t_s§1_size
 128

	)

68 
	#èsk_£t_s§2_size
 128

	)

76 
	#uC_CFG_OPTIMIZE_ASM_EN
 
DEF_ENABLED


	)

77 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

	@APP/config.h

1 #i‡!
deföed
–
_CONFIG_H
 )

2 
	#_CONFIG_H


	)

7 
	#BITBAND
(
addr
, 
bônum
Ë(◊dd∏& 0xF0000000)+0x2000000+(◊dd∏&0xFFFFF)<<5)+(bônum<<2))

	)

9 
	#MEM_ADDR
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

11 
	#BIT_ADDR
(
addr
, 
bônum
Ë
	`MEM_ADDR
–
	`BITBAND
◊ddr, bônumË)

	)

13 
	#GPIOA_ODR
 (
GPIOA_BASE
+12)

14 
	#GPIOB_ODR
 (
GPIOB_BASE
+12)

15 
	#GPIOC_ODR
 (
GPIOC_BASE
+12)

16 
	#GPIOD_ODR
 (
GPIOD_BASE
+12)

17 
	#GPIOE_ODR
 (
GPIOE_BASE
+12)

18 

	)

19 
	#GPIOA_IDR
 (
GPIOA_BASE
+8)

20 
	#GPIOB_IDR
 (
GPIOB_BASE
+8)

21 
	#GPIOC_IDR
 (
GPIOC_BASE
+8)

22 
	#GPIOD_IDR
 (
GPIOD_BASE
+8)

23 
	#GPIOE_IDR
 (
GPIOE_BASE
+8)

24 

	)

26 
	#PC13
 
	`BIT_ADDR
(
GPIOC_ODR
, 13)

27 
	#PC12
 
	`BIT_ADDR
(
GPIOC_ODR
, 12)

28 
	#PC11
 
	`BIT_ADDR
(
GPIOC_ODR
, 11)

29 
	#PC10
 
	`BIT_ADDR
(
GPIOC_ODR
, 10)

30 
	#PC9
 
	`BIT_ADDR
(
GPIOC_ODR
, 9)

31 
	#PC8
 
	`BIT_ADDR
(
GPIOC_ODR
, 8)

32 

	)

33 
	#PB10ö
 
	`BIT_ADDR
(
GPIOB_IDR
, 10)

34 
	#PB11ö
 
	`BIT_ADDR
(
GPIOB_IDR
, 11)

35 

	)

36 
	#PD2ö
 
	`BIT_ADDR
(
GPIOD_IDR
, 2)

37 

	)

38 
	#PD6ö
 
	`BIT_ADDR
(
GPIOE_IDR
, 15)

39 
	#PD9ö
 
	`BIT_ADDR
(
GPIOD_IDR
, 9)

40 

	)

49 
	#myGPIO_SëBôs
(
PORT
, 
Bô
Ë–PORT->
BSRR
=
	`BIT16
(BôË)

	)

50 
	#myGPIO_Re£tBôs
(
PORT
, 
Bô
Ë–PORT->
BRR
=
	`BIT16
(BôË)

	)

55 
	#PC_RS485CAN


	)

57 
	#RS485


	)

60 
	#RCC_APB2Pîùh_PC_RS485DIR
 
RCC_APB2Pîùh_GPIOB


	)

61 
	#PC_RS485DIR_PORT
 
GPIOB


	)

62 
	#PC_RS485DIR_PIN
 0

	)

65 #i‡
deföed
(
PC_RS485
)

66 
	#PC_RS485Síd_E«bÀ
(Ë
	`myGPIO_SëBôs
(
PC_RS485DIR_PORT
, 
PC_RS485DIR_PIN
)

	)

67 
	#PC_RS485Re˚ive_E«bÀ
(Ë
	`myGPIO_Re£tBôs
(
PC_RS485DIR_PORT
, 
PC_RS485DIR_PIN
)

	)

69 #ñi‡
deföed
(
PC_RS485CAN
)

70 
	#PC_RS485Síd_E«bÀ
()

71 
	#PC_RS485Re˚ive_E«bÀ
()

73 #ñ£

	)

74 
	#PC_RS485Síd_E«bÀ
()

	)

75 
	#PC_RS485Re˚ive_E«bÀ
()

	)

81 
	#RCC_APB2Pîùh_LED
 
RCC_APB2Pîùh_GPIOC


	)

82 
	#LED_PORT
 
GPIOC


83 
	#LED_PIN
 8

	)

85 
	#LED_Gªí_ON
(Ë
	`myGPIO_Re£tBôs
(
LED_PORT
, 
LED_PIN
)

86 
	#LED_Gªí_OFF
(Ë
	`myGPIO_SëBôs
(
LED_PORT
, 
LED_PIN
)

87 

	)

	@APP/globals.h

2 #ifde‡
GLOBALS


3 
	#EXT


	)

5 
	#EXT
 

	)

9 
EXT
 
TxBuf„r1
[400];

11 
EXT
 
	gTxBuf„r2
[];

12 
EXT
 
	gRxBuf„r1
[400];

13 
EXT
 
	gRxBuf„r2
[];

14 
EXT
 
	gTxCou¡î1
;

15 
EXT
 
	gTxCou¡î2
;

16 
EXT
 vﬁ©ûê
	gRxCou¡î1
;

17 
EXT
 vﬁ©ûê
	gRxCou¡î2
;

19 
EXT
 vﬁ©ûê
	gªc_f
,
	gtx_Êag
;

20 
EXT
 vﬁ©ûê
	gRec_Lí
;

21 
EXT
 vﬁ©ûê
	gmû£c1
,
	gmû£c2
,
	gmû£c3
;

	@APP/includes.h

29 #i‚de‡ 
__INCLUDES_H__


30 
	#__INCLUDES_H__


	)

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	~<°dlib.h
>

36 
	~<°d¨g.h
>

38 
	~<°m32f10x_c⁄f.h
>

40 
	~<°m32f10x.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

44 
	~<°m32f10x.h
>

47 
	~"≠p_cfg.h
"

48 
	~"os_cfg.h
"

50 
	~"..\uCOS-II\uC-CPU\˝u.h
"

51 
	~"..\uCOS-II\uC-CPU\˝u_def.h
"

53 
	~"..\uCOS-II\P‹ts\os_˝u.h
"

54 
	~"..\uCOS-II\Sour˚\ucos_ii.h
"

55 
	~"..\BSP\b•.h
"

57 
	#OBD_DEBUG
 1

	)

59 #i‡
OBD_DEBUG


60 
	#¥ötk
 
¥ötf


	)

62 
	#¥ötk
(
msg
...)

	)

	@APP/os_cfg.h

25 #i‚de‡
OS_CFG_H


26 
	#OS_CFG_H


	)

30 
	#OS_APP_HOOKS_EN
 1

	)

31 
	#OS_ARG_CHK_EN
 0

	)

32 
	#OS_CPU_HOOKS_EN
 1

	)

34 
	#OS_DEBUG_EN
 0

	)

36 
	#OS_EVENT_MULTI_EN
 1

	)

37 
	#OS_EVENT_NAME_SIZE
 16

	)

39 
	#OS_LOWEST_PRIO
 31

	)

42 
	#OS_MAX_EVENTS
 10

	)

43 
	#OS_MAX_FLAGS
 5

	)

44 
	#OS_MAX_MEM_PART
 5

	)

45 
	#OS_MAX_QS
 4

	)

46 
	#OS_MAX_TASKS
 10

	)

48 
	#OS_SCHED_LOCK_EN
 1

	)

50 
	#OS_TICK_STEP_EN
 1

	)

52 
	#OS_TICKS_PER_SEC
 25000

	)

55 
	#OS_TASK_TMR_STK_SIZE
 128

	)

56 
	#OS_TASK_STAT_STK_SIZE
 128

	)

57 
	#OS_TASK_IDLE_STK_SIZE
 128

	)

61 
	#OS_TASK_CHANGE_PRIO_EN
 1

	)

62 
	#OS_TASK_CREATE_EN
 1

	)

63 
	#OS_TASK_CREATE_EXT_EN
 1

	)

64 
	#OS_TASK_DEL_EN
 1

	)

65 
	#OS_TASK_NAME_SIZE
 16

	)

66 
	#OS_TASK_PROFILE_EN
 1

	)

67 
	#OS_TASK_QUERY_EN
 1

	)

68 
	#OS_TASK_STAT_EN
 1

	)

69 
	#OS_TASK_STAT_STK_CHK_EN
 1

	)

70 
	#OS_TASK_SUSPEND_EN
 1

	)

71 
	#OS_TASK_SW_HOOK_EN
 1

	)

75 
	#OS_FLAG_EN
 1

	)

76 
	#OS_FLAG_ACCEPT_EN
 1

	)

77 
	#OS_FLAG_DEL_EN
 1

	)

78 
	#OS_FLAG_NAME_SIZE
 16

	)

79 
	#OS_FLAG_QUERY_EN
 1

	)

80 
	#OS_FLAG_WAIT_CLR_EN
 1

	)

81 
	#OS_FLAGS_NBITS
 16

	)

85 
	#OS_MBOX_EN
 1

	)

86 
	#OS_MBOX_ACCEPT_EN
 1

	)

87 
	#OS_MBOX_DEL_EN
 1

	)

88 
	#OS_MBOX_PEND_ABORT_EN
 1

	)

89 
	#OS_MBOX_POST_EN
 1

	)

90 
	#OS_MBOX_POST_OPT_EN
 1

	)

91 
	#OS_MBOX_QUERY_EN
 1

	)

95 
	#OS_MEM_EN
 0

	)

96 
	#OS_MEM_NAME_SIZE
 16

	)

97 
	#OS_MEM_QUERY_EN
 1

	)

101 
	#OS_MUTEX_EN
 0

	)

102 
	#OS_MUTEX_ACCEPT_EN
 1

	)

103 
	#OS_MUTEX_DEL_EN
 1

	)

104 
	#OS_MUTEX_QUERY_EN
 1

	)

108 
	#OS_Q_EN
 0

	)

109 
	#OS_Q_ACCEPT_EN
 1

	)

110 
	#OS_Q_DEL_EN
 1

	)

111 
	#OS_Q_FLUSH_EN
 1

	)

112 
	#OS_Q_PEND_ABORT_EN
 1

	)

113 
	#OS_Q_POST_EN
 1

	)

114 
	#OS_Q_POST_FRONT_EN
 1

	)

115 
	#OS_Q_POST_OPT_EN
 1

	)

116 
	#OS_Q_QUERY_EN
 1

	)

120 
	#OS_SEM_EN
 1

	)

121 
	#OS_SEM_ACCEPT_EN
 1

	)

122 
	#OS_SEM_DEL_EN
 1

	)

123 
	#OS_SEM_PEND_ABORT_EN
 1

	)

124 
	#OS_SEM_QUERY_EN
 1

	)

125 
	#OS_SEM_SET_EN
 1

	)

129 
	#OS_TIME_DLY_HMSM_EN
 1

	)

130 
	#OS_TIME_DLY_RESUME_EN
 1

	)

131 
	#OS_TIME_GET_SET_EN
 1

	)

132 
	#OS_TIME_TICK_HOOK_EN
 1

	)

136 
	#OS_TMR_EN
 0

	)

137 
	#OS_TMR_CFG_MAX
 16

	)

138 
	#OS_TMR_CFG_NAME_SIZE
 16

	)

139 
	#OS_TMR_CFG_WHEEL_SIZE
 8

	)

140 
	#OS_TMR_CFG_TICKS_PER_SEC
 10

	)

	@APP/stm32f10x_it.c

21 
	~"ö˛udes.h
"

22 
	~"globÆs.h
"

23 
	~"≠p.h
"

35 
	$NMIEx˚±i⁄
()

38 
	}
}

47 
	$H¨dFau…Ex˚±i⁄
()

53 
	}
}

62 
	$MemM™ageEx˚±i⁄
()

68 
	}
}

77 
	$BusFau…Ex˚±i⁄
()

83 
	}
}

92 
	$UßgeFau…Ex˚±i⁄
()

98 
	}
}

107 
	$DebugM⁄ô‹
()

109 
	}
}

118 
	$SVCH™dÀr
()

120 
	}
}

129 
	$PídSVC
()

131 
	}
}

140 
	$SysTickH™dÀr
()

142 
OS_CPU_SR
 
˝u_§
;

144 
	`OS_ENTER_CRITICAL
();

145 
OSI¡Ne°ög
++;

146 
	`OS_EXIT_CRITICAL
();

148 
	`OSTimeTick
();

150 
	`OSI¡Exô
();

152 
	}
}

162 
	$WWDG_IRQH™dÀr
()

164 
	}
}

173 
	$PVD_IRQH™dÀr
()

175 
	}
}

184 
	$TAMPER_IRQH™dÀr
()

186 
	}
}

195 
	$RTC_IRQH™dÀr
()

198 
	}
}

207 
	$FLASH_IRQH™dÀr
()

209 
	}
}

218 
	$RCC_IRQH™dÀr
()

220 
	}
}

229 
	$EXTI0_IRQH™dÀr
()

231 
	}
}

240 
	$EXTI1_IRQH™dÀr
()

242 
	}
}

253 
	$EXTI2_IRQH™dÀr
()

256 
	}
}

264 
	$EXTI3_IRQH™dÀr
()

266 
	}
}

275 
	$EXTI4_IRQH™dÀr
()

277 
	}
}

286 
	$DMACh™√l1_IRQH™dÀr
()

288 
	}
}

297 
	$DMACh™√l2_IRQH™dÀr
()

299 
	}
}

308 
	$DMACh™√l3_IRQH™dÀr
()

310 
	}
}

319 
	$DMACh™√l4_IRQH™dÀr
()

321 
	}
}

330 
	$DMACh™√l5_IRQH™dÀr
()

332 
	}
}

341 
	$DMACh™√l6_IRQH™dÀr
()

343 
	}
}

352 
	$DMACh™√l7_IRQH™dÀr
()

354 
	}
}

363 
	$ADC_IRQH™dÀr
()

365 
	}
}

375 
	$USB_HP_CAN_TX_IRQH™dÀr
()

378 
	}
}

388 
	$USB_LP_CAN_RX0_IRQH™dÀr
()

390 
	}
}

399 
	$CAN_RX1_IRQH™dÀr
()

401 
	}
}

410 
	$CAN_SCE_IRQH™dÀr
()

412 
	}
}

421 
	$EXTI9_5_IRQH™dÀr
()

423 
	}
}

432 
	$TIM1_BRK_IRQH™dÀr
()

434 
	}
}

444 
	$TIM1_UP_IRQH™dÀr
()

449 
	}
}

459 
	$TIM1_TRG_COM_IRQH™dÀr
()

461 
	}
}

470 
	$TIM1_CC_IRQH™dÀr
()

472 
	}
}

481 
	$TIM2_IRQH™dÀr
()

483 
	}
}

492 
	$TIM3_IRQH™dÀr
()

494 
	}
}

503 
	$TIM4_IRQH™dÀr
()

505 
	}
}

514 
	$I2C1_EV_IRQH™dÀr
()

516 
	}
}

525 
	$I2C1_ER_IRQH™dÀr
()

527 
	}
}

536 
	$I2C2_EV_IRQH™dÀr
()

538 
	}
}

547 
	$I2C2_ER_IRQH™dÀr
()

549 
	}
}

558 
	$SPI1_IRQH™dÀr
()

560 
	}
}

569 
	$SPI2_IRQH™dÀr
()

572 
	}
}

606 
	$USART3_IRQH™dÀr
()

609 
	}
}

618 
	$EXTI15_10_IRQH™dÀr
()

621 
	}
}

630 
	$RTCAœrm_IRQH™dÀr
()

633 
	}
}

642 
	$USBWakeUp_IRQH™dÀr
()

644 
	}
}

653 
	$TIM8_BRK_IRQH™dÀr
()

655 
	}
}

665 
	$TIM8_UP_IRQH™dÀr
()

667 
	}
}

677 
	$TIM8_TRG_COM_IRQH™dÀr
()

679 
	}
}

688 
	$TIM8_CC_IRQH™dÀr
()

690 
	}
}

699 
	$ADC3_IRQH™dÀr
()

701 
	}
}

710 
	$FSMC_IRQH™dÀr
()

712 
	}
}

721 
	$SDIO_IRQH™dÀr
()

723 
	}
}

732 
	$TIM5_IRQH™dÀr
()

734 
	}
}

743 
	$SPI3_IRQH™dÀr
()

745 
	}
}

754 
	$UART4_IRQH™dÀr
()

756 
	}
}

765 
	$UART5_IRQH™dÀr
()

767 
	}
}

776 
	$TIM6_IRQH™dÀr
()

778 
	}
}

787 
	$TIM7_IRQH™dÀr
()

789 
	}
}

798 
	$DMA2_Ch™√l1_IRQH™dÀr
()

800 
	}
}

809 
	$DMA2_Ch™√l2_IRQH™dÀr
()

811 
	}
}

820 
	$DMA2_Ch™√l3_IRQH™dÀr
()

822 
	}
}

832 
	$DMA2_Ch™√l4_5_IRQH™dÀr
()

834 
	}
}

	@BSP/ads1100/ads1100.c

1 
	~"ads1100.h
"

2 
	~"°m32f10x_gpio.h
"

3 
	~"°m32f10x_i2c.h
"

4 
	~"..\..\Aµ\ö˛udes.h
"

6 
	#TWI_NOP
 
	`dñay2
()

	)

8 
uöt16_t
 
	gAD_Resu…
[13];

10 
	#ADS1100_WR_ADDRESS
 0x90

	)

11 
	#ADS1100_RD_ADDRESS
 0x91

	)

12 
	#ADS1100_CONFIG_REG
 0x8c

	)

14 
	$£tSda
(
uöt8_t
 
id
, uöt8_à
vÆ
)

16 if(
id
 == 0) {

17 if(
vÆ
 == 0) {

18 
TWI_SDA0_LOW
;

19 } if(
vÆ
 == 1) {

20 
TWI_SDA0_HIGH
;

22 } if(
id
 == 1) {

23 if(
vÆ
 == 0) {

24 
TWI_SDA1_LOW
;

25 } if(
vÆ
 == 1) {

26 
TWI_SDA1_HIGH
;

29 
	}
}

31 
	$£tS˛
(
uöt8_t
 
id
, uöt8_à
vÆ
)

33 if(
id
 == 0) {

34 if(
vÆ
 == 0) {

35 
TWI_SCL0_LOW
;

36 } if(
vÆ
 == 1) {

37 
TWI_SCL0_HIGH
;

39 } if(
id
 == 1) {

40 if(
vÆ
 == 0) {

41 
TWI_SCL1_LOW
;

42 } if(
vÆ
 == 1) {

43 
TWI_SCL1_HIGH
;

46 
	}
}

48 
	$gëSda
(
uöt8_t
 
id
)

50 if(
id
 == 0) {

51  
TWI_SDA0_STATE
;

53  
TWI_SDA1_STATE
;

55 
	}
}

57 
	$dñay2
()

59 
uöt32_t
 
i
 = 15;

61 
i
--);

62 
	}
}

64 
	$twi_öô
()

66 
GPIO_InôTy≥Def
 
gpio
;

67 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

68 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_3
;

69 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

70 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

71 
	`GPIO_Inô
(
GPIOB
, &
gpio
);

73 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

74 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_2
;

75 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

76 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

77 
	`GPIO_Inô
(
GPIOD
, &
gpio
);

79 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

80 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_11
 | 
GPIO_Pö_12
;

81 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

82 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

83 
	`GPIO_Inô
(
GPIOC
, &
gpio
);

85 
	`£tSda
(0, 1);

86 
	`£tSda
(1, 1);

87 
	`£tS˛
(0, 1);

88 
	`£tS˛
(1, 1);

90 
	`¥ötk
("sda0 = %d, sda1 = %d\r\n", 
	`gëSda
(0), getSda(1));

92 
	`ads1100_c⁄fig
(0);

93 
	`ads1100_c⁄fig
(1);

94 
	}
}

96 
uöt8_t
 
	$twi_°¨t
(
uöt8_t
 
id
)

98 
	`£tSda
(
id
, 1);

99 
TWI_NOP
;

101 
	`£tS˛
(
id
, 1);

102 
TWI_NOP
;

104 if(!
	`gëSda
(
id
)) {

105 
	`¥ötk
("%s: busy\r\n", 
__func__
);

106  
TWI_BUS_BUSY
;

109 
	`£tSda
(
id
, 0);

110 
TWI_NOP
;

112 if(
	`gëSda
(
id
)) {

113 
	`¥ötk
("%s: bu†îr‹\r\n", 
__func__
);

114  
TWI_BUS_ERROR
;

117 
	`£tSda
(
id
, 0);

118 
TWI_NOP
;

120 if(
	`gëSda
(
id
)) {

121 
	`¥ötk
("%s: bu†îr‹\r\n", 
__func__
);

122  
TWI_BUS_ERROR
;

125 
	`£tS˛
(
id
, 0);

126 
TWI_NOP
;

128  
TWI_READY
;

129 
	}
}

131 
	$twi_°›
(
uöt8_t
 
id
)

133 
	`£tS˛
(
id
, 0);

134 
TWI_NOP
;

136 
	`£tSda
(
id
, 0);

137 
TWI_NOP
;

139 
	`£tS˛
(
id
, 1);

140 
TWI_NOP
;

142 
	`£tSda
(
id
, 1);

143 
TWI_NOP
;

144 
	}
}

146 
	$twi_£nd_ack
(
uöt8_t
 
id
)

148 
	`£tS˛
(
id
, 0);

149 
TWI_NOP
;

150 
	`£tSda
(
id
, 0);

151 
TWI_NOP
;

152 
	`£tS˛
(
id
, 1);

153 
TWI_NOP
;

154 
	`£tS˛
(
id
, 0);

155 
TWI_NOP
;

156 
	}
}

158 
	$twi_£nd_«ck
(
uöt8_t
 
id
)

160 
	`£tS˛
(
id
, 0);

161 
TWI_NOP
;

163 
	`£tS˛
(
id
, 1);

164 
TWI_NOP
;

166 
	`£tSda
(
id
, 1);

167 
TWI_NOP
;

169 
	`£tSda
(
id
, 0);

170 
TWI_NOP
;

171 
	}
}

173 
uöt8_t
 
	$twi_£nd_byã
(
uöt8_t
 
id
, uöt8_à
d©a
)

175 
uöt8_t
 
i
;

177 
	`£tS˛
(
id
, 0);

178 
i
 = 0; i < 8; i++) {

179 
	`£tS˛
(
id
, 0);

180 
TWI_NOP
;

182 if(
d©a
 & 0x80) {

183 
	`£tSda
(
id
, 1);

185 
	`£tSda
(
id
, 0);

187 
d©a
 <<= 1;

188 
TWI_NOP
;

190 
	`£tS˛
(
id
, 1);;

191 
TWI_NOP
;

193 
	`£tS˛
(
id
, 0);;

194 if(
	`gëSda
(
id
)) {

195  
TWI_NACK
;

197  
TWI_ACK
;

199 
	}
}

201 
uöt8_t
 
	$twi_ªcv_byã
(
uöt8_t
 
id
)

203 
uöt8_t
 
i
, 
D©
;

204 
	`£tSda
(
id
, 1);

205 
D©
 = 0;

206 
i
 = 0; i < 8; i++) {

207 
D©
 <<= 1;

208 
	`£tS˛
(
id
, 0);

209 
TWI_NOP
;

210 
	`£tS˛
(
id
, 1);

211 
TWI_NOP
;

212 if(
	`gëSda
(
id
)) {

213 
D©
 |= 0x01;

215 
	`£tS˛
(
id
, 0);

218  
D©
;

219 
	}
}

221 
uöt8_t
 
	$twi_waô_ack
(
uöt8_t
 
id
)

223 
	`£tS˛
(
id
, 0);

224 
TWI_NOP
;

225 
	`£tSda
(
id
, 1);

226 
TWI_NOP
;

227 
	`£tS˛
(
id
, 1);

228 
TWI_NOP
;

229 if(
	`gëSda
(
id
)) {

230 
	`£tS˛
(
id
, 0);

234 
	`£tS˛
(
id
, 0);;

236 
	}
}

238 
	$ads1100_c⁄fig
(
uöt8_t
 
id
)

240 
	`twi_°¨t
(
id
);

241 
	`twi_£nd_byã
(
id
, 
ADS1100_WR_ADDRESS
);

242 
	`twi_£nd_«ck
(
id
);

243 
	`twi_£nd_byã
(
id
, 
ADS1100_CONFIG_REG
);

244 
	`twi_£nd_«ck
(
id
);

245 
	`twi_°›
(
id
);

246 
	}
}

248 
uöt16_t
 
	$ads1100_ªad
(
uöt8_t
 
id
)

250 
uöt16_t
 
W_B1byã_high
, 
W_B1byã_low
,

251 
W_B1_w‹d
;

253 
	`twi_°¨t
(
id
);

254 
	`twi_£nd_byã
(
id
, 
ADS1100_RD_ADDRESS
);

255 
	`twi_£nd_«ck
(
id
);

257 
W_B1byã_high
 = 
	`twi_ªcv_byã
(
id
);

258 
	`twi_£nd_ack
(
id
);

259 
W_B1byã_low
 = 
	`twi_ªcv_byã
(
id
);

260 
	`twi_£nd_ack
(
id
);

262 
W_B1_w‹d
 = 
	`twi_ªcv_byã
(
id
);

264 
	`twi_°›
(
id
);

266 
W_B1_w‹d
 = (
W_B1byã_high
 << 8Ë| 
W_B1byã_low
;

268  
W_B1_w‹d
;

269 
	}
}

271 
uöt16_t
 
	$ads1100_gë_ªsu…
(
uöt8_t
 
id
)

273 
uöt8_t
 
i
, 
j
;

274 
uöt16_t
 
ãmp
;

276 
i
 = 0; i < 13; i++) {

277 
AD_Resu…
[
i
] = 
	`ads1100_ªad
(
id
);

278 
	`OSTimeDly
(1);

281 
i
 = 1; i < 13; i++) {

282 
ãmp
 = 
AD_Resu…
[
i
];

283 
j
 = 
i
; j > 0 && 
ãmp
 < 
AD_Resu…
[j - 1]; j--) {

284 
AD_Resu…
[
j
] = AD_Result[j - 1];

286 
AD_Resu…
[
j
] = 
ãmp
;

289  
AD_Resu…
[7];

290 
	}
}

	@BSP/ads1100/ads1100.h

1 #i‚de‡
__ADS1100_H__


2 
	#__ADS1100_H__


	)

4 
	~"°m32f10x.h
"

6 
	#TWI_SCL1_LOW
 
GPIOD
->
BRR
 = 
GPIO_Pö_2


	)

7 
	#TWI_SCL1_HIGH
 
GPIOD
->
BSRR
 = 
GPIO_Pö_2


	)

8 
	#TWI_SDA1_LOW
 
GPIOB
->
BRR
 = 
GPIO_Pö_3


	)

9 
	#TWI_SDA1_HIGH
 
GPIOB
->
BSRR
 = 
GPIO_Pö_3


	)

10 
	#TWI_SDA1_STATE
 (
GPIOB
->
IDR
 & 
GPIO_Pö_3
)

	)

12 
	#TWI_SCL0_LOW
 
GPIOC
->
BRR
 = 
GPIO_Pö_11


	)

13 
	#TWI_SCL0_HIGH
 
GPIOC
->
BSRR
 = 
GPIO_Pö_11


	)

14 
	#TWI_SDA0_LOW
 
GPIOC
->
BRR
 = 
GPIO_Pö_12


	)

15 
	#TWI_SDA0_HIGH
 
GPIOC
->
BSRR
 = 
GPIO_Pö_12


	)

16 
	#TWI_SDA0_STATE
 (
GPIOC
->
IDR
 & 
GPIO_Pö_12
)

	)

18 
	eENUM_TWI_REPLY
 {

19 
	mTWI_NACK
 = 0,

20 
	mTWI_ACK
 = 1

23 
	eENUM_TWI_BUS_STATE
 {

24 
	mTWI_READY
 = 0,

25 
	mTWI_BUS_BUSY
 = 1,

26 
	mTWI_BUS_ERROR
 = 2

29 
	#TWI_RETRY_COUNT
 3

	)

30 
twi_öô
();

31 
uöt8_t
 
twi_°¨t
(uöt8_à
id
);

32 
twi_°›
(
uöt8_t
 
id
);

33 
uöt8_t
 
twi_£nd_byã
(uöt8_à
id
, uöt8_à
d©a
);

34 
uöt8_t
 
twi_ªcv_byã
(uöt8_à
id
);

35 
uöt8_t
 
twi_waô_ack
(uöt8_à
id
);

36 
twi_£nd_ack
(
uöt8_t
 
id
);

37 
twi_£nd_«ck
(
uöt8_t
 
id
);

38 
ads1100_c⁄fig
(
uöt8_t
 
id
);

39 
uöt16_t
 
ads1100_ªad
(
uöt8_t
 
id
);

40 
uöt16_t
 
ads1100_gë_ªsu…
(
uöt8_t
 
id
);

	@BSP/bluetooth/bluetooth.c

1 
	~"bluëoŸh.h
"

2 
	~"°m32f10x_ußπ.h
"

3 
	~"°m32f10x_gpio.h
"

4 
	~"≠p.h
"

5 
	~"..\..\APP\ö˛udes.h
"

7 
OS_EVENT
 *
©CmdMaûbox
;

8 
__IO
 
AµCmd
 
	gcmd
;

9 
__IO
 
uöt8_t
 
	gbuf„r
[100];

10 
__IO
 
uöt8_t
 
	gödex
 = 0;

12 
	$bÀ_öô
()

14 
u8
 
d©a
;

15 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

16 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

17 i‡(
BLE_USARTAPB
 =
APB1
)

19 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_BLE_USART_IO
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

20 
	`RCC_APB1PîùhClockCmd
(
RCC_APBxPîùh_BLE_USART
,
ENABLE
);

24 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_BLE_USART_IO
 | 
RCC_APBxPîùh_BLE_USART
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

26 i‡(
BLE_PöRem≠
 =
ENABLE
)

28 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_USART2
,
ENABLE
);

30 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
BLE_USART_TXD
;

31 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

32 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

33 
	`GPIO_Inô
(
BLE_USART_IO
,&
GPIO_InôSåu˘uª
);

35 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
BLE_USART_RXD
;

36 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

37 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

38 
	`GPIO_Inô
(
BLE_USART_IO
,&
GPIO_InôSåu˘uª
);

40 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 115200;

41 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

42 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

43 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

44 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ;

45 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
|
USART_Mode_Tx
;

46 
	`USART_Inô
(
BLE_USART
,&
USART_InôSåu˘uª
);

47 
d©a
 = data;

48 
d©a
 = 
BLE_USART
->
DR
;

49 
d©a
 = 
BLE_USART
->
SR
;

50 
	`USART_ITC⁄fig
(
BLE_USART
,
USART_IT_RXNE
,
ENABLE
);

51 
	`USART_Cmd
(
BLE_USART
,
ENABLE
);

53 
	`ª•⁄£
();

54 
	}
}

56 
	$˛órBuf„r
(
uöt8_t
 *
buf
, 
Àn
)

58 
	`mem£t
(
buf
, 0x00, 
Àn
);

59 
	}
}

61 
	$£nd
(
uöt8_t
 
d
)

63 
	`¥ötf
("%c", 
d
);

64 
	`USART_SídD©a
(
BLE_USART
, 
d
);

65 
	`USART_GëFœgSètus
(
BLE_USART
, 
USART_FLAG_TXE
Ë=
RESET
){;}

66 
	}
}

68 
	$ª•⁄£
()

70 
uöt8_t
 
i
 = 0;

71 
uöt8_t
 
ª•
[5] = {0x55, 0x55, 0x00, 0x00, 0x3e};

72 
i
 = 0; i < 5; i++) {

73 
	`£nd
(
ª•
[
i
]);

75 
	}
}

77 
	$ªp‹t_ãm≥øtuª
(
time
, 
ãm≥øtuª
)

79 
uöt8_t
 
t_h
, 
t_l
, 
i
, 
t2_h
, 
t2_l
;

80 
uöt8_t
 
d©a
[9] = {0x55, 0x55, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3e};

81 
ãmp
;

82 
ãmp
 = 
ãm≥øtuª
 + 20000;

83 
t_h
 = (
ãmp
 >> 8) & 0xff;

84 
t_l
 = 
ãmp
 & 0xff;

85 
t2_h
 = (
time
 >> 8) & 0xff;

86 
t2_l
 = 
time
 & 0xff;

88 
d©a
[4] = 
t2_h
;

89 
d©a
[5] = 
t2_l
;

90 
d©a
[6] = 
t_h
;

91 
d©a
[7] = 
t_l
;

93 
i
 = 0; i < 9; i++) {

94 
	`£nd
(
d©a
[
i
]);

96 
	}
}

98 
	$r•_wôh_⁄e_byã
(
uöt8_t
 
cmd
, uöt8_à
d©a
)

100 
uöt8_t
 
i
 = 0;

101 
uöt8_t
 
r•
[6] = {0x55, 0x55, 0x00, 0x01, 0x00, 0x3e};

102 
r•
[2] = 
cmd
;

103 
r•
[4] = 
d©a
;

105 ;
i
 < 6; i++) {

106 
	`£nd
(
r•
[
i
]);

108 
	}
}

110 
	$h™dÀD©a
(
uöt8_t
 
d©a
)

112 
uöt8_t
 
i
;

113 
uöt8_t
 
ty≥
;

114 
uöt8_t
 
Àn
;

115 if(
d©a
 == 0x3e) {

118 if(
buf„r
[0] == 0x55 && (buffer[1] == 0x55)) {

119 
ty≥
 = 
buf„r
[2];

120 
Àn
 = 
buf„r
[3];

121 
cmd
.
ty≥
 =Åype;

122 
cmd
.
Àn
 =Üen;

123 if(
Àn
 > 0) {

124 
i
 = 0; i < 
Àn
; i++) {

125 
cmd
.
d©a
[
i
] = 
buf„r
[4 + i];

128 
	`˛órBuf„r
((
uöt8_t
 *)
buf„r
, 100);

129 
	`OSMboxPo°
(
©CmdMaûbox
, (*)&
cmd
);

130 
ödex
 = 0;

133 
buf„r
[
ödex
 ++] = 
d©a
;

135 
	}
}

137 
	$BLE_USART_IRQH™dÀr
()

139 
uöt8_t
 
d©a
;

141 if(
	`USART_GëITSètus
(
BLE_USART
, 
USART_IT_RXNE
)

142 !
RESET
) {

143 
d©a
 = 
	`USART_Re˚iveD©a
(
BLE_USART
);

144 
	`h™dÀD©a
(
d©a
);

147 if(
	`USART_GëITSètus
(
BLE_USART
, 
USART_IT_TXE
)

148 !
RESET
) {

149 
	`USART_ITC⁄fig
(
BLE_USART
, 
USART_IT_TXE
, 
DISABLE
);

151 
	}
}

153 
	$USART1_IRQH™dÀr
()

155 
uöt8_t
 
d©a
;

157 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_RXNE
)

158 !
RESET
) {

159 
d©a
 = 
	`USART_Re˚iveD©a
(
USART1
);

160 
	`h™dÀD©a
(
d©a
);

163 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_TXE
)

164 !
RESET
) {

165 
	`USART_ITC⁄fig
(
USART1
, 
USART_IT_TXE
, 
DISABLE
);

167 
	}
}

	@BSP/bluetooth/bluetooth.h

1 #i‚de‡
__BLUETOOTH_H__


2 
	#__BLUETOOTH_H__


	)

3 
	~"b•.h
"

5 
	#RCC_APBxPîùh_BLE_USART_IO
 
RCC_APB2Pîùh_GPIOA


	)

6 
	#RCC_APBxPîùh_BLE_USART
 
RCC_APB1Pîùh_USART2


	)

7 
	#BLE_USART_TXD
 
GPIO_Pö_2


	)

8 
	#BLE_USART_RXD
 
GPIO_Pö_3


	)

9 
	#BLE_USART_IO
 
GPIOA


	)

10 
	#BLE_USART
 
USART2


	)

11 
	#BLE_PöRem≠
 
DISABLE


	)

12 
	#BLE_USARTAPB
 
APB1


	)

13 
	#BLE_USART_IRQH™dÀr
 
USART2_IRQH™dÀr


	)

15 
bÀ_öô
();

16 
ª•⁄£
();

17 
ªp‹t_ãm≥øtuª
(
time
, 
ãm≥øtuª
);

18 
r•_wôh_⁄e_byã
(
uöt8_t
 
cmd
, uöt8_à
d©a
);

	@BSP/bsp.c

1 
	~"..\Aµ\ö˛udes.h
"

2 
	~"ds18b20.h
"

3 
	~"Án.h
"

4 
	~"ads1100.h
"

5 
	~"bluëoŸh.h
"

6 
	~"m25p16.h
"

7 
	~"lcd1602.h
"

10 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

12 
	s__FILE


14 
	mh™dÀ
;

20 
FILE
 
	g__°dout
;

21 
	$_sys_exô
(
x
)

23 
x
 = x;

24 
	}
}

26 
	$Âutc
(
ch
, 
FILE
 *
f
)

29 (
PC_USART
->
SR
 & 0x40) == 0);

30 
PC_USART
->
DR
 = (
u8
)
ch
;

31  
ch
;

32 
	}
}

44 
	$RCC_C⁄figuøti⁄
()

46 
	`Sy°emInô
();

47 
	}
}

50 
	$U«bÀJTAG
()

57 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

58 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_SWJ_JTAGDißbÀ
, 
ENABLE
);

59 
	}
}

61 
	$BSP_Inô
()

64 
	`RCC_C⁄figuøti⁄
();

65 
	`U«bÀJTAG
();

66 
	`GPIO_C⁄figuøti⁄
();

67 
	`USART_C⁄fig
(115200);

69 
	`NVIC_C⁄figuøti⁄
();

71 
	`SSR_Inô
();

73 
	`Án_öô
(20);

74 
	`Án_£t
(0);

76 
	`bÀ_öô
();

81 
	}
}

84 
	$SSR_Inô
()

87 
GPIO_InôTy≥Def
 
gpio
;

88 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

89 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_5
 | 
GPIO_Pö_6
;

90 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

91 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

92 
	`GPIO_Inô
(
GPIOA
, &
gpio
);

93 
	}
}

96 
	$FAN_Inô
()

98 
	}
}

100 
	$SSR1_E«bÀ
(
íabÀ
)

102 if(
íabÀ
) {

103 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_5
);

105 
	`GPIO_Re£tBôs
(
GPIOA
, 
GPIO_Pö_5
);

107 
	}
}

109 
	$SSR2_E«bÀ
(
íabÀ
)

111 if(
íabÀ
) {

112 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_6
);

114 
	`GPIO_Re£tBôs
(
GPIOA
, 
GPIO_Pö_6
);

116 
	}
}

127 
	$GPIO_C⁄figuøti⁄
()

130 
	}
}

140 
	$NVIC_C⁄figuøti⁄
()

142 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

144 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_3
);

146 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

147 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

148 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

149 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

150 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

152 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART2_IRQn
;

153 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

154 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

155 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

156 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

157 
	}
}

159 
	$USART_C⁄fig
(
u32
 
baud
)

161 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

162 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

163 i‡(
PC_USARTAPB
 =
APB1
)

165 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_PC_USART_IO
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

166 
	`RCC_APB1PîùhClockCmd
(
RCC_APBxPîùh_PC_USART
,
ENABLE
);

170 
	`RCC_APB2PîùhClockCmd
(
RCC_APBxPîùh_PC_USART_IO
 | 
RCC_APBxPîùh_PC_USART
 | 
RCC_APB2Pîùh_AFIO
,
ENABLE
);

172 i‡(
PC_PöRem≠
 =
ENABLE
)

174 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_USART2
,
ENABLE
);

176 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
PC_USART_TXD
;

177 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

178 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

179 
	`GPIO_Inô
(
PC_USART_IO
,&
GPIO_InôSåu˘uª
);

181 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
PC_USART_RXD
;

182 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

183 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

184 
	`GPIO_Inô
(
PC_USART_IO
,&
GPIO_InôSåu˘uª
);

186 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baud
;

187 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

188 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

189 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

190 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ;

191 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
|
USART_Mode_Tx
;

192 
	`USART_Inô
(
PC_USART
,&
USART_InôSåu˘uª
);

196 
	`NVIC_C⁄figuøti⁄
();

197 
	`USART_ITC⁄fig
(
PC_USART
, 
USART_IT_RXNE
, 
ENABLE
);

199 
	`USART_Cmd
(
PC_USART
,
ENABLE
);

200 
	}
}

202 
	$OS_CPU_SysTickInô
()

204 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

205 
INT32U
 
˙ts
;

207 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

208 
˙ts
 = (
INT32U
)
rcc_˛ocks
.
HCLK_Fªquícy
 / 
OS_TICKS_PER_SEC
;

209 
	`SysTick_C⁄fig
(
˙ts
);

210 
	}
}

212 
	$dñay
(
ms
)

214 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 * 
ms
 / 1000);

215 
	}
}

217 #ifde‡ 
DEBUG


227 
	$as£π_Áûed
(
u8
* 
fûe
, 
u32
 
löe
)

236 
	}
}

	@BSP/bsp.h

1 #i‡!
deföed
–
_BSP_H
 )

2 
	#_BSP_H


	)

4 
	~"..\Aµ\ö˛udes.h
"

7 
	mAPB1
 = 0,

8 
	mAPB2


9 } 
	tAPBTy≥
;

11 
	#RCC_APBxPîùh_PC_USART_IO
 
RCC_APB2Pîùh_GPIOA


	)

12 
	#RCC_APBxPîùh_PC_USART
 
RCC_APB2Pîùh_USART1


	)

13 
	#PC_USART_TXD
 
GPIO_Pö_9


	)

14 
	#PC_USART_RXD
 
GPIO_Pö_10


	)

15 
	#PC_USART_IO
 
GPIOA


	)

16 
	#PC_USART
 
USART1


	)

17 
	#PC_PöRem≠
 
DISABLE


	)

18 
	#PC_USARTAPB
 
APB2


	)

20 
RCC_C⁄figuøti⁄
();

21 
GPIO_C⁄figuøti⁄
();

22 
NVIC_C⁄figuøti⁄
();

23 
CPU_INT32U
 
BSP_CPU_ClkFªq
 ();

24 
OS_CPU_SysTickInô
();

25 
BSP_Inô
();

26 
USART_C⁄fig
(
u32
 
baud
);

27 
SSR_Inô
();

28 
SSR1_E«bÀ
(
íabÀ
);

29 
SSR2_E«bÀ
(
íabÀ
);

30 
dñay
(
ms
);

	@BSP/delay.c

1 
	~"misc.h
"

2 
	~"dñay.h
"

4 
u8
 
	gÁc_us
 = 0;

5 
u16
 
	gÁc_ms
 = 0;

7 
	$dñay_öô
()

9 
	`SysTick_CLKSour˚C⁄fig
(
SysTick_CLKSour˚_HCLK_Div8
);

11 
Ác_us
 = 
Sy°emC‹eClock
 / 8000000;

12 
Ác_ms
 = (
u16
)
Ác_us
 * 1000;

13 
	}
}

15 
	$dñay_us
(
u32
 
us
)

17 
u32
 
ãmp
;

18 
SysTick
->
LOAD
 = 
us
 * 
Ác_us
;

19 
SysTick
->
VAL
 = 0x00;

20 
SysTick
->
CTRL
 |
SysTick_CTRL_ENABLE_Msk
;

22 
ãmp
 = 
SysTick
->
CTRL
;

23 } (
ãmp
 & 0x01) && !(temp & (1 << 16)));

24 
SysTick
->
CTRL
 &~
SysTick_CTRL_ENABLE_Msk
;

25 
SysTick
->
VAL
 = 0x00;

26 
	}
}

28 
	$dñay_ms
(
u16
 
ms
)

30 
u32
 
ãmp
;

31 
SysTick
->
LOAD
 = 
ms
 * 
Ác_ms
;

32 
SysTick
->
VAL
 = 0x00;

33 
SysTick
->
CTRL
 |
SysTick_CTRL_ENABLE_Msk
;

35 
ãmp
 = 
SysTick
->
CTRL
;

36 } (
ãmp
 & 0x01) && !(temp & (1 << 16)));

37 
SysTick
->
CTRL
 &~
SysTick_CTRL_ENABLE_Msk
;

38 
SysTick
->
VAL
 = 0x00;

39 
	}
}

41 
	$dñay_s
(
u16
 
s
) {

42 
u16
 
i
;

43 
i
 = 0; i < 
s
; i++) {

44 
	`dñay_ms
(1000);

46 
	}
}

	@BSP/delay.h

1 #i‚de‡
__DELAY_H__


2 
	#__DELAY_H__


	)

4 
dñay_öô
();

5 
dñay_ms
(
u16
 
ms
);

6 
dñay_us
(
u32
 
us
);

7 
dñay_s
(
u16
 
s
);

	@BSP/ds18b20/ds18b20.c

1 
	~"ds18b20.h
"

2 
	~"°dio.h
"

3 
	~"°m32f10x_gpio.h
"

4 
	~"..\..\Aµ\ö˛udes.h
"

6 
	$£t_io_dú
(
dú
)

8 
GPIO_InôTy≥Def
 
gpio
;

9 
	`RCC_APB2PîùhClockCmd
(
DQ_CLK
, 
ENABLE
);

10 
gpio
.
GPIO_Pö
 = 
DQ_PIN
;

11 if(
dú
 == 0) {

12 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

13 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

15 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

17 
	`GPIO_Inô
(
DQ_PORT
, &
gpio
);

18 
	}
}

20 
	$£t_io_high
()

22 
	`GPIO_SëBôs
(
DQ_PORT
, 
DQ_PIN
);

23 
	}
}

25 
	$£t_io_low
()

27 
	`GPIO_Re£tBôs
(
DQ_PORT
, 
DQ_PIN
);

28 
	}
}

30 
uöt8_t
 
	$gë_io
()

32  
	`GPIO_RódI≈utD©aBô
(
DQ_PORT
, 
DQ_PIN
);

33 
	}
}

35 
	$ª£t
()

37 
	`£t_io_dú
(0);

38 
	`£t_io_low
();

40 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1333);

41 
	`£t_io_high
();

43 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 66666);

44 
	}
}

46 
uöt8_t
 
	$check
()

48 
uöt8_t
 
ªåy
 = 0;

49 
	`£t_io_dú
(1);

50 
	`gë_io
(Ë&& 
ªåy
 < 200) {

51 
ªåy
 ++;

53 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000000);

56 if(
ªåy
 >= 200)

59 
ªåy
 = 0;

61 (!
	`gë_io
()Ë&& 
ªåy
 < 240) {

62 
ªåy
 ++;

64 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000000);

67 if(
ªåy
 >= 240)

71 
	}
}

73 
uöt8_t
 
	$ªad_bô
()

75 
uöt8_t
 
d©a
;

76 
	`£t_io_dú
(0);

77 
	`£t_io_low
();

79 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 500000);

80 
	`£t_io_high
();

81 
	`£t_io_dú
(1);

83 if(
	`gë_io
())

84 
d©a
 = 1;

86 
d©a
 = 0;

88 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 20000);

90  
d©a
;

91 
	}
}

93 
uöt8_t
 
	$ªad_byã
()

95 
uöt8_t
 
i
,
j
,
d©
;

96 
d©
=0;

97 
i
=1;i<=8;i++)

99 
j
=
	`ªad_bô
();

100 
d©
=(
j
<<7)|(dat>>1);

102  
d©
;

103 
	}
}

105 
	$wrôe_byã
(
uöt8_t
 
d©
)

107 
uöt8_t
 
j
;

108 
uöt8_t
 
ã°b
;

109 
	`£t_io_dú
(0);

110 
j
=1;j<=8;j++)

112 
ã°b
=
d©
&0x01;

113 
d©
=dat>>1;

114 i‡(
ã°b
)

116 
	`£t_io_low
();

118 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 500000);

119 
	`£t_io_high
();

121 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 16666);

125 
	`£t_io_low
();

127 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 16666);

128 
	`£t_io_high
();

130 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 500000);

133 
	}
}

135 
	$°¨t
()

137 
	`ª£t
();

138 
	`check
();

139 
	`wrôe_byã
(0xcc);

140 
	`wrôe_byã
(0x44);

141 
	}
}

143 
uöt8_t
 
	$ds18b20_öô
()

146 
	`ª£t
();

148  
	`check
();

149 
	}
}

151 
	$ds18b20_gë_ãm≥øtuª
()

153 
uöt8_t
 
ãmp
;

154 
uöt8_t
 
TL
, 
TH
;

155 
ãm
;

156 
	`°¨t
();

157 
	`ª£t
();

158 
	`check
();

159 
	`wrôe_byã
(0xcc);

160 
	`wrôe_byã
(0xbe);

161 
TL
 = 
	`ªad_byã
();

162 
TH
 = 
	`ªad_byã
();

164 if(
TH
 > 7)

166 
TH
 = ~TH;

167 
TL
 = ~TL;

168 
ãmp
 = 0;

170 
ãmp
 = 1;

172 
ãm
 = 
TH
;

173 
ãm
 <<= 8;

174 
ãm
 +
TL
;

175 
ãm
=()tem * 0.625;

176 if(
ãmp
)

177  
ãm
;

179  -
ãm
;

180 
	}
}

	@BSP/ds18b20/ds18b20.h

1 #i‚de‡
__DS18B20_H__


2 
	#__DS18B20_H__


	)

4 
	~"°m32f10x.h
"

5 
	~"°m32f10x_gpio.h
"

7 
	#DQ_PORT
 
GPIOB


	)

8 
	#DQ_PIN
 
GPIO_Pö_0


	)

9 
	#DQ_CLK
 
RCC_APB2Pîùh_GPIOB


	)

11 
uöt8_t
 
ds18b20_öô
();

13 
ds18b20_gë_ãm≥øtuª
();

	@BSP/fan/fan.c

1 
	~"Án.h
"

2 
	~"°m32f10x_gpio.h
"

3 
	~"°m32f10x_tim.h
"

5 
TIM_TimeBa£InôTy≥Def
 
	gtimBa£
;

6 
TIM_OCInôTy≥Def
 
	gtimOc
;

8 
	gmax_≥riod
 = 0;

10 
	$Án_öô
(
‰eq
)

12 
GPIO_InôTy≥Def
 
gpio
;

14 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

15 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

16 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

18 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_5
;

19 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

20 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

21 
	`GPIO_Inô
(
GPIOB
, &
gpio
);

23 
	`GPIO_PöRem≠C⁄fig
(
GPIO_P¨tülRem≠_TIM3
, 
ENABLE
);

26 
timBa£
.
TIM_PªsˇÀr
 = 20000 / 
‰eq
;

27 
timBa£
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

28 
timBa£
.
TIM_Pîiod
 = 2400;

29 
max_≥riod
 = 2400;

30 
timBa£
.
TIM_ClockDivisi⁄
 = 0x20;

31 
timBa£
.
TIM_Rïëôi⁄Cou¡î
 = 0x00;

32 
	`TIM_TimeBa£Inô
(
TIM3
, &
timBa£
);

34 
timOc
.
TIM_OCMode
 = 
TIM_OCMode_PWM2
;

35 
timOc
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

36 
timOc
.
TIM_Pul£
 = 
max_≥riod
 * (100 - 0) / 100;

37 
timOc
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

38 
	`TIM_OC2Inô
(
TIM3
, &
timOc
);

39 
	`TIM_OC2PªlﬂdC⁄fig
(
TIM3
, 
TIM_OCPªlﬂd_E«bÀ
);

40 
	`TIM_Cmd
(
TIM3
, 
ENABLE
);

41 
	}
}

43 
	$Án_£t
(
uöt8_t
 
vÆ
)

45 
uöt8_t
 
vÆue
 = 
vÆ
;

46 if(
vÆue
 > 100)

47 
vÆue
 = 100;

48 if(
vÆue
 < 0)

49 
vÆue
 = 0;

51 
timOc
.
TIM_OCMode
 = 
TIM_OCMode_PWM2
;

52 
timOc
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

53 
timOc
.
TIM_Pul£
 = 
max_≥riod
 * (100 - 
vÆue
) / 100;

54 
timOc
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

55 
	`TIM_OC2Inô
(
TIM3
, &
timOc
);

56 
	}
}

	@BSP/fan/fan.h

1 #i‚de‡
__FAN_H__


2 
	#__FAN_H__


	)

4 
	~"°m32f10x.h
"

6 
Án_öô
(
‰eq
);

7 
Án_£t
(
uöt8_t
 
vÆ
);

	@BSP/lcd1602/lcd1602.c

1 
	~"lcd1602.h
"

2 
	~"°m32f10x.h
"

3 
	~"°m32f10x_gpio.h
"

4 
	~"..\..\APP\ö˛udes.h
"

6 
	#RS_0
 
	`GPIO_Re£tBôs
(
GPIOC
, 
GPIO_Pö_9
)

	)

7 
	#RS_1
 
	`GPIO_SëBôs
(
GPIOC
, 
GPIO_Pö_9
)

	)

8 
	#RW_0
 
	`GPIO_Re£tBôs
(
GPIOC
, 
GPIO_Pö_8
)

	)

9 
	#RW_1
 
	`GPIO_SëBôs
(
GPIOC
, 
GPIO_Pö_8
)

	)

10 
	#EN_0
 
	`GPIO_Re£tBôs
(
GPIOC
, 
GPIO_Pö_10
)

	)

11 
	#EN_1
 
	`GPIO_SëBôs
(
GPIOC
, 
GPIO_Pö_10
)

	)

13 
	$lcd1602_öô
()

16 
GPIO_InôTy≥Def
 
gpio
;

18 
	`RCC_APB2PîùhClockCmd
–
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

19 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2


20 | 
GPIO_Pö_3
 | 
GPIO_Pö_4
 | 
GPIO_Pö_5


21 | 
GPIO_Pö_6
 | 
GPIO_Pö_7
 | 
GPIO_Pö_8


22 | 
GPIO_Pö_9
 | 
GPIO_Pö_10
;

23 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

24 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

25 
	`GPIO_Inô
(
GPIOC
, &
gpio
);

27 
	`lcd1602_wrôe_cmd
(0x38);

28 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

29 
	`lcd1602_wrôe_cmd
(0x08);

30 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

31 
	`lcd1602_wrôe_cmd
(0x01);

32 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

33 
	`lcd1602_wrôe_cmd
(0x06);

34 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

35 
	`lcd1602_wrôe_cmd
(0x0c);

36 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

38 
	`¥ötk
("lcd1602 init done!\r\n");

39 
	}
}

41 
	$ouçut
(
uöt8_t
 
vÆ
)

43 
uöt16_t
 
d©a
 = 
	`GPIO_RódOuçutD©a
(
GPIOC
);

44 
d©a
 &= 0xff00;

45 
d©a
 |
vÆ
;

46 
	`GPIO_Wrôe
(
GPIOC
, 
d©a
);

47 
	}
}

49 
	$lcd1602_wrôe_cmd
(
uöt8_t
 
cmd
)

51 
RS_0
;

52 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000);

53 
RW_0
;

54 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000);

55 
EN_1
;

56 
	`ouçut
(
cmd
);

57 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

58 
EN_0
;

59 
	}
}

61 
	$lcd1602_wrôe_d©a
(
uöt8_t
 
d©a
)

63 
RS_1
;

64 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000);

65 
RW_0
;

66 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 1000);

67 
EN_1
;

68 
	`ouçut
(
d©a
);

69 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

70 
EN_0
;

71 
	}
}

73 
	$lcd1602_wrôe_ch¨
(
uöt8_t
 
x
, uöt8_à
y
, 
c
)

75 if(
y
 == 0)

76 
	`lcd1602_wrôe_cmd
(0x80 + 
x
);

78 
	`lcd1602_wrôe_cmd
(0xc0 + 
x
);

79 
	`lcd1602_wrôe_d©a
(
c
);

80 
	}
}

82 
	$lcd1602_wrôe_°rög
(
uöt8_t
 
x
, uöt8_à
y
, *
°r
)

84 
uöt8_t
 
i
 = 0;

86 if(
y
 == 0)

87 
	`lcd1602_wrôe_cmd
(0x80 + 
x
);

89 
	`lcd1602_wrôe_cmd
(0xc0 + 
x
);

91 
°r
[
i
] != '\0') {

92 
	`lcd1602_wrôe_d©a
(
°r
[
i
]);

93 ++
i
;

95 
	}
}

97 
	$lcd1602_˛ór
()

99 
	`lcd1602_wrôe_cmd
(0x01);

100 
	`OSTimeDly
(100);

101 
	}
}

	@BSP/lcd1602/lcd1602.h

1 #i‚de‡
__LCD1602_H__


2 
	#__LCD1602_H__


	)

3 
	~"°m32f10x.h
"

5 
lcd1602_öô
();

6 
lcd1602_wrôe_cmd
(
uöt8_t
 
cmd
);

7 
lcd1602_wrôe_d©a
(
uöt8_t
 
d©a
);

8 
lcd1602_wrôe_ch¨
(
uöt8_t
 
x
, uöt8_à
y
, 
c
);

9 
lcd1602_wrôe_°rög
(
uöt8_t
 
x
, uöt8_à
y
, *
°r
);

10 
lcd1602_˛ór
();

	@BSP/m25p16/m25p16.c

1 
	~"m25p16.h
"

2 
	~"°m32f10x.h
"

3 
	~"°m32f10x_•i.h
"

4 
	~"°dio.h
"

5 
	~"..\..\APP\ö˛udes.h
"

7 
	#NOSELECT
(Ë
	`GPIO_SëBôs
(
GPIOB
, 
GPIO_Pö_12
)

	)

8 
	#SELECT
(Ë
	`GPIO_Re£tBôs
(
GPIOB
, 
GPIO_Pö_12
)

	)

10 
	$•i2_öô
()

12 
SPI_InôTy≥Def
 
•i
;

13 
GPIO_InôTy≥Def
 
gpio
;

15 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
 | 
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

16 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

19 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_13
 | 
GPIO_Pö_14
 | 
GPIO_Pö_15
;

20 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

21 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

22 
	`GPIO_Inô
(
GPIOB
, &
gpio
);

25 
gpio
.
GPIO_Pö
 = 
GPIO_Pö_12
;

26 
gpio
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

27 
gpio
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

28 
	`GPIO_Inô
(
GPIOB
, &
gpio
);

30 
	`NOSELECT
();

32 
•i
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

33 
•i
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

34 
•i
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

35 
•i
.
SPI_CPOL
 = 
SPI_CPOL_High
;

36 
•i
.
SPI_CPHA
 = 
SPI_CPHA_2Edge
;

37 
•i
.
SPI_NSS
 = 
SPI_NSS_So·
;

38 
•i
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_4
;

39 
•i
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

40 
•i
.
SPI_CRCPﬁynomül
 = 7;

41 
	`SPI_Inô
(
SPI2
, &
•i
);

43 
	`SPI_Cmd
(
SPI2
, 
ENABLE
);

44 
	}
}

48 
uöt8_t
 
	$•i_£nd_byã
(
uöt8_t
 
byã
)

50 
	`SPI_I2S_SídD©a
(
SPI2
, 
byã
);

52 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

54 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
);

57  
	`SPI_I2S_Re˚iveD©a
(
SPI2
);

58 
	}
}

60 
uöt8_t
 
	$•i_ªcv_byã
()

62  (
	`•i_£nd_byã
(0xA5));

63 
	}
}

65 
uöt8_t
 
	$•i_wrôe_byã
(
uöt8_t
 
addr
, uöt8_à
vÆ
)

69 
	`SPI_I2S_SídD©a
(
SPI2
, 
addr
 << 8 | 
vÆ
);

70 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

71 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
);

75  
	`SPI_I2S_Re˚iveD©a
(
SPI2
) & 0xff;

76 
	}
}

78 
uöt8_t
 
	$•i_ªad_byã
(
uöt8_t
 
addr
)

82 
	`SPI_I2S_SídD©a
(
SPI2
, (
addr
 | 0x80) << 8 | 0x00);

83 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

84 
	`SPI_I2S_GëFœgSètus
(
SPI2
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
);

88  
	`SPI_I2S_Re˚iveD©a
(
SPI2
) & 0xff;

89 
	}
}

91 
	$Êash_∑ge_îa£
(
uöt16_t
 
∑ge
)

93 
	`Êash_waô_busy
();

94 
	`SELECT
();

96 
	`•i_£nd_byã
(0x06);

97 
	`NOSELECT
();

99 
	`Êash_waô_busy
();

100 
	`SELECT
();

102 
	`•i_£nd_byã
(
SE
);

103 
	`•i_£nd_byã
((
∑ge
 & 0xff0000) >> 16);

104 
	`•i_£nd_byã
((
∑ge
 & 0xff00) >> 8);

105 
	`•i_£nd_byã
(
∑ge
 & 0xff);

106 
	`NOSELECT
();

107 
	}
}

109 
	$Êash_∑ge_ªad
(
uöt8_t
 *
d©a
, 
uöt32_t
 
addr
, 
Àngth
)

111 
uöt32_t
 
i
;

113 
	`Êash_waô_busy
();

114 
	`SELECT
();

115 
	`•i_£nd_byã
(0x03);

116 
	`•i_£nd_byã
((
addr
 & 0xff0000) >> 16);

117 
	`•i_£nd_byã
((
addr
 & 0xff00) >> 8);

118 
	`•i_£nd_byã
(
addr
 & 0xff);

120 
i
 = 0; i < 
Àngth
; i++) {

121 
d©a
[
i
] = 
	`•i_ªcv_byã
();

123 
	`NOSELECT
();

125 
	}
}

127 
	$Êash_∑ge_wrôe
(
uöt8_t
 *
d©a
, 
uöt32_t
 
addr
, 
Àngth
)

129 
uöt32_t
 
i
;

131 
	`Êash_∑ge_îa£
(0x01);

133 
	`Êash_waô_busy
();

134 
	`SELECT
();

135 
	`•i_£nd_byã
(0x06);

136 
	`NOSELECT
();

138 
	`Êash_waô_busy
();

139 
	`SELECT
();

140 
	`•i_£nd_byã
(0x02);

141 
	`•i_£nd_byã
((
addr
 & 0xff0000) >> 16);

142 
	`•i_£nd_byã
((
addr
 & 0xff00) >> 8);

143 
	`•i_£nd_byã
(
addr
 & 0xff);

144 
i
 = 0; i < 
Àngth
; i++) {

145 
	`•i_£nd_byã
(
d©a
[
i
]);

148 
	`NOSELECT
();

149 
	}
}

151 
	$Êash_waô_busy
()

153 
uöt8_t
 
°©us
 = 0;

154 
	`SELECT
();

155 
	`•i_£nd_byã
(
RDSR
);

157 
°©us
 = 
	`•i_£nd_byã
(
Dummy_Byã
);

158 } (
°©us
 & 
WIP_Fœg
Ë=
SET
);

159 
	`NOSELECT
();

160 
	}
}

162 
uöt8_t
 
	$Êash_check_id
()

164 
uöt8_t
 
id
[4];

165 
	`SELECT
();

166 
	`•i_£nd_byã
(
RDID
);

167 
id
[0] = 
	`•i_ªcv_byã
();

168 
id
[1] = 
	`•i_ªcv_byã
();

169 
id
[2] = 
	`•i_ªcv_byã
();

170 
	`NOSELECT
();

171 
	`¥ötk
("id = 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",

172 
id
[0], id[1], id[2], id[3]);

173 if(
id
[0] == 0x20 && (id[1] == 0x20)

174 && (
id
[2] == 0x15)) {

179 
	}
}

181 
	$Êash_öô
()

183 
	`•i2_öô
();

184 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 100);

185 if(!
	`Êash_check_id
()) {

186 
	`¥ötk
("flash id check successfully!\r\n");

188 
	`¥ötk
("flash id check failed\r\n");

190 
	}
}

	@BSP/m25p16/m25p16.h

1 #i‚de‡
__M25P16_H__


2 
	#__M25P16_H__


	)

3 
	~"°m32f10x.h
"

5 
	#FLASH_CHREAD
 0x0B

	)

6 
	#FLASH_CLREAD
 0x03

	)

7 
	#FLASH_PREAD
 0xD2

	)

9 
	#FLASH_BUFWRITE1
 0x84

10 
	#FLASH_IDREAD
 0x9F

	)

11 
	#FLASH_STATUS
 0xD7

12 
	#PAGE_ERASE
 0x81

	)

13 
	#PAGE_READ
 0xD2

	)

14 
	#MM_PAGE_TO_B1_XFER
 0x53

15 
	#BUFFER_2_WRITE
 0x87

16 
	#B2_TO_MM_PAGE_PROG_WITH_ERASE
 0x86

17 

	)

18 
	#BUFFER_1_WRITE
 0x84

19 
	#BUFFER_2_WRITE
 0x87

20 
	#BUFFER_1_READ
 0xD4

21 
	#BUFFER_2_READ
 0xD6

22 
	#B1_TO_MM_PAGE_PROG_WITH_ERASE
 0x83

23 
	#B2_TO_MM_PAGE_PROG_WITH_ERASE
 0x86

24 
	#MM_PAGE_TO_B1_XFER
 0x53

25 
	#MM_PAGE_TO_B2_XFER
 0x55

26 
	#PAGE_ERASE
 0x81

27 
	#SECTOR_ERASE
 0x7C

28 
	#READ_STATE_REGISTER
 0xD7

29 

	)

32 
	#SPI_FLASH_PageSize
 0x100

	)

35 
	#WRITE
 0x02

	)

36 
	#WRSR
 0x01

	)

37 
	#WREN
 0x06

	)

39 
	#READ
 0x03

	)

40 
	#RDSR
 0x05

	)

41 
	#RDID
 0x9F

	)

42 
	#SE
 0xD8

	)

43 
	#BE
 0xC7

	)

45 
	#WIP_Fœg
 0x01

	)

47 
	#Dummy_Byã
 0xA5

	)

49 
uöt8_t
 
•i_£nd_byã
(uöt8_à
vÆ
);

50 
uöt8_t
 
•i_ªcv_byã
();

51 
uöt8_t
 
•i_wrôe_byã
(uöt8_à
addr
, uöt8_à
vÆ
);

52 
uöt8_t
 
•i_ªad_byã
(uöt8_à
addr
);

54 
Êash_∑ge_îa£
(
uöt16_t
 
∑ge
);

55 
Êash_∑ge_ªad
(
uöt8_t
 *
d©a
, 
uöt32_t
 
addr
, 
Àngth
);

56 
Êash_∑ge_wrôe
(
uöt8_t
 *
d©a
, 
uöt32_t
 
addr
, 
Àngth
);

57 
Êash_waô_busy
();

58 
uöt8_t
 
Êash_check_id
();

60 
Êash_öô
();

	@BSP/pid/pid.c

1 
	~"pid.h
"

2 
	~"°m32f10x.h
"

4 
	gmDi•Kp
;

5 
	gmDi•Ki
;

6 
	gmDi•Kd
;

8 
	gmKp
;

9 
	gmKi
;

10 
	gmKd
;

11 
	gmCålDú
;

12 *
	gmI≈ut
;

13 *
	gmOuçut
;

14 *
	gmSëpoöt
;

16 
	gœ°Time
;

17 
	gITîm
, 
	gœ°I≈ut
;

19 
	gßm∂eTime
;

20 
	goutMö
, 
	goutMax
;

21 
uöt8_t
 
	göAuto
;

23 
	$pid_öô
(*
öput
, *
ouçut
, *
£çoöt
,

24 
kp
, 
ki
, 
kd
, 
c⁄åﬁÀr_dúe˘i⁄
)

26 
mOuçut
 = 
ouçut
;

27 
mI≈ut
 = 
öput
;

28 
mSëpoöt
 = 
£çoöt
;

29 
öAuto
 = 
FALSE
;

31 
	`pid_£tOuçutLimôs
(0, 65535);

32 
ßm∂eTime
 = 1000;

33 
	`pid_£tCålDú
(
c⁄åﬁÀr_dúe˘i⁄
);

34 
	`pid_£tTunögs
(
kp
, 
ki
, 
kd
);

36 
œ°Time
 = 
CURRENT_TIME
 - 
ßm∂eTime
;

37 
	}
}

39 
	$pid_£tMode
(
mode
)

41 
uöt8_t
 
√wAuto
 = (
mode
 =
AUTOMATIC
);

42 if(
√wAuto
 =!
öAuto
) {

43 
	`öôülize
();

45 
öAuto
 = 
√wAuto
;

46 
	}
}

49 
uöt8_t
 
	$pid_compuã
()

51 
now
 = 
CURRENT_TIME
;

52 
timeCh™ge
 = (
now
 - 
œ°Time
);

53 
öput
;

54 
îr‹
;

55 
dI≈ut
;

56 
ouçut
;

58 if(!
öAuto
)

59  
FALSE
;

60 if(
timeCh™ge
 >
ßm∂eTime
) {

61 
öput
 = *
mI≈ut
;

62 
îr‹
 = *
mSëpoöt
 - 
öput
;

63 
ITîm
 +(
mKi
 * 
îr‹
);

64 if(
ITîm
 > 
outMax
)

65 
ITîm
 = 
outMax
;

66 if(
ITîm
 < 
outMö
)

67 
ITîm
 = 
outMö
;

69 
dI≈ut
 = 
öput
 - 
œ°I≈ut
;

72 
ouçut
 = 
mKp
 * 
îr‹
 + 
ITîm
 - 
mKd
 * 
dI≈ut
;

74 if(
ouçut
 < 
outMax
)

75 
ouçut
 = 
outMax
;

76 if(
ouçut
 < 
outMö
)

77 
ouçut
 = 
outMö
;

79 *
mOuçut
 = 
ouçut
;

81 
œ°I≈ut
 = 
öput
;

82 
œ°Time
 = 
now
;

83  
TRUE
;

85  
FALSE
;

87 
	}
}

89 
	$pid_£tOuçutLimôs
(
mö
, 
max
)

91 if(
mö
 >
max
)

93 
outMö
 = 
mö
;

94 
outMax
 = 
max
;

96 if(
öAuto
) {

97 if(*
mOuçut
 > 
outMax
)

98 *
mOuçut
 = 
outMax
;

99 if(*
mOuçut
 < 
outMö
)

100 *
mOuçut
 = 
outMö
;

102 if(
ITîm
 > 
outMax
)

103 
ITîm
 = 
outMax
;

104 if(
ITîm
 < 
outMö
)

105 
ITîm
 = 
outMö
;

107 
	}
}

109 
	$pid_£tTunögs
(
kp
, 
ki
, 
kd
)

111 
ßm∂eTimeInSec
 = (()
ßm∂eTime
) / 1000.0f;

112 if(
kp
 < 0 || 
ki
 < 0 || 
kd
 < 0)

115 
mDi•Kd
 = 
kd
;

116 
mDi•Ki
 = 
ki
;

117 
mDi•Kp
 = 
kp
;

119 
mKp
 = 
kp
;

120 
mKi
 = 
ki
 * 
ßm∂eTimeInSec
;

121 
mKd
 = 
kd
 / 
ßm∂eTimeInSec
;

123 if(
mCålDú
 =
REVERSE
) {

124 
mKp
 = 0 - mKp;

125 
mKi
 = 0 - mKi;

126 
mKd
 = 0 - mKd;

128 
	}
}

130 
	$pid_£tCålDú
(
dú
)

132 if(
öAuto
 && 
dú
 !
mCålDú
) {

133 
mKp
 = 0 - mKp;

134 
mKi
 = 0 - mKi;

135 
mKd
 = 0 - mKd;

138 
mCålDú
 = 
dú
;

139 
	}
}

141 
	$pid_£tSam∂eTime
(
ms
)

143 
øtio
;

145 if(
ms
 > 0) {

146 
øtio
 = ()
ms
 / ()
ßm∂eTime
;

147 
mKi
 *
øtio
;

148 
mKd
 /
øtio
;

150 
ßm∂eTime
 = ()
ms
;

152 
	}
}

154 
	$pid_gëKp
()

156  
mDi•Kp
;

157 
	}
}

159 
	$pid_gëKi
()

161  
mDi•Ki
;

162 
	}
}

164 
	$pid_gëKd
()

166  
mDi•Kd
;

167 
	}
}

169 
	$pid_gëMode
()

171  
öAuto
 ? 
AUTOMATIC
 : 
MANUAL
;

172 
	}
}

173 
	$pid_gëDú
()

175  
mCålDú
;

176 
	}
}

178 
	$öôülize
()

180 
ITîm
 = *
mOuçut
;

181 
œ°I≈ut
 = *
mI≈ut
;

182 if(
ITîm
 > 
outMax
)

183 
ITîm
 = 
outMax
;

184 if(
ITîm
 < 
outMö
)

185 
ITîm
 = 
outMö
;

186 
	}
}

	@BSP/pid/pid.h

1 #i‚de‡
__PID_H__


2 
	#__PID_H__


	)

3 
	~"°m32f10x.h
"

4 
	~"ö˛udes.h
"

6 
	#CURRENT_TIME
 (
	`OSTimeGë
(Ë* 1000 / 
OS_TICKS_PER_SEC
)

	)

8 
	#AUTOMATIC
 1

	)

9 
	#MANUAL
 0

	)

10 
	#DIRECT
 0

	)

11 
	#REVERSE
 1

	)

13 
pid_öô
(*
öput
, *
ouçut
, *
£çoöt
,

14 
kp
, 
ki
, 
kd
, 
c⁄åﬁÀr_dúe˘i⁄
);

15 
pid_£tMode
(
mode
);

16 
uöt8_t
 
pid_compuã
();

17 
pid_£tOuçutLimôs
(
mö
, 
max
);

18 
pid_£tTunögs
(
kp
, 
ki
, 
kd
);

19 
pid_£tCålDú
(
dú
);

20 
pid_£tSam∂eTime
(
ms
);

21 
pid_gëKp
();

22 
pid_gëKi
();

23 
pid_gëKd
();

24 
pid_gëMode
();

25 
pid_gëDú
();

27 
öôülize
();

	@CM3/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@CM3/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@CM3/stm32f10x.h

33 #i‚de‡
__STM32F10x_H


34 
	#__STM32F10x_H


	)

35 
	#__STM32F10x_MAP_H


	)

36 #ifde‡
__˝lu•lus


48 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

54 
	#STM32F10X_XL


	)

75 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


91 #i‡!
deföed
 
HSE_VALUE


92 #ifde‡
STM32F10X_CL


93 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

95 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

104 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

106 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

111 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

112 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x03Ë

	)

113 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

114 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

115 | (
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

116 | 
__STM32F10X_STDPERIPH_VERSION_SUB2
)

	)

129 #ifde‡
STM32F10X_XL


130 
	#__MPU_PRESENT
 1

	)

132 
	#__MPU_PRESENT
 0

	)

134 
	#__NVIC_PRIO_BITS
 4

	)

135 
	#__Víd‹_SysTickC⁄fig
 0

	)

141 
	eIRQn


144 
N⁄MaskabÀI¡_IRQn
 = -14,

145 
Mem‹yM™agemít_IRQn
 = -12,

146 
BusFau…_IRQn
 = -11,

147 
UßgeFau…_IRQn
 = -10,

148 
SVCÆl_IRQn
 = -5,

149 
DebugM⁄ô‹_IRQn
 = -4,

150 
PídSV_IRQn
 = -2,

151 
SysTick_IRQn
 = -1,

154 
WWDG_IRQn
 = 0,

155 
PVD_IRQn
 = 1,

156 
TAMPER_IRQn
 = 2,

157 
RTC_IRQn
 = 3,

158 
FLASH_IRQn
 = 4,

159 
RCC_IRQn
 = 5,

160 
EXTI0_IRQn
 = 6,

161 
EXTI1_IRQn
 = 7,

162 
EXTI2_IRQn
 = 8,

163 
EXTI3_IRQn
 = 9,

164 
EXTI4_IRQn
 = 10,

165 
DMA1_Ch™√l1_IRQn
 = 11,

166 
DMA1_Ch™√l2_IRQn
 = 12,

167 
DMA1_Ch™√l3_IRQn
 = 13,

168 
DMA1_Ch™√l4_IRQn
 = 14,

169 
DMA1_Ch™√l5_IRQn
 = 15,

170 
DMA1_Ch™√l6_IRQn
 = 16,

171 
DMA1_Ch™√l7_IRQn
 = 17,

173 #ifde‡
STM32F10X_LD


174 
ADC1_2_IRQn
 = 18,

175 
USB_HP_CAN1_TX_IRQn
 = 19,

176 
USB_LP_CAN1_RX0_IRQn
 = 20,

177 
CAN1_RX1_IRQn
 = 21,

178 
CAN1_SCE_IRQn
 = 22,

179 
EXTI9_5_IRQn
 = 23,

180 
TIM1_BRK_IRQn
 = 24,

181 
TIM1_UP_IRQn
 = 25,

182 
TIM1_TRG_COM_IRQn
 = 26,

183 
TIM1_CC_IRQn
 = 27,

184 
TIM2_IRQn
 = 28,

185 
TIM3_IRQn
 = 29,

186 
I2C1_EV_IRQn
 = 31,

187 
I2C1_ER_IRQn
 = 32,

188 
SPI1_IRQn
 = 35,

189 
USART1_IRQn
 = 37,

190 
USART2_IRQn
 = 38,

191 
EXTI15_10_IRQn
 = 40,

192 
RTCAœrm_IRQn
 = 41,

193 
USBWakeUp_IRQn
 = 42

196 #ifde‡
STM32F10X_LD_VL


197 
ADC1_IRQn
 = 18,

198 
EXTI9_5_IRQn
 = 23,

199 
TIM1_BRK_TIM15_IRQn
 = 24,

200 
TIM1_UP_TIM16_IRQn
 = 25,

201 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

202 
TIM1_CC_IRQn
 = 27,

203 
TIM2_IRQn
 = 28,

204 
TIM3_IRQn
 = 29,

205 
I2C1_EV_IRQn
 = 31,

206 
I2C1_ER_IRQn
 = 32,

207 
SPI1_IRQn
 = 35,

208 
USART1_IRQn
 = 37,

209 
USART2_IRQn
 = 38,

210 
EXTI15_10_IRQn
 = 40,

211 
RTCAœrm_IRQn
 = 41,

212 
CEC_IRQn
 = 42,

213 
TIM6_DAC_IRQn
 = 54,

214 
TIM7_IRQn
 = 55

217 #ifde‡
STM32F10X_MD


218 
ADC1_2_IRQn
 = 18,

219 
USB_HP_CAN1_TX_IRQn
 = 19,

220 
USB_LP_CAN1_RX0_IRQn
 = 20,

221 
CAN1_RX1_IRQn
 = 21,

222 
CAN1_SCE_IRQn
 = 22,

223 
EXTI9_5_IRQn
 = 23,

224 
TIM1_BRK_IRQn
 = 24,

225 
TIM1_UP_IRQn
 = 25,

226 
TIM1_TRG_COM_IRQn
 = 26,

227 
TIM1_CC_IRQn
 = 27,

228 
TIM2_IRQn
 = 28,

229 
TIM3_IRQn
 = 29,

230 
TIM4_IRQn
 = 30,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
I2C2_EV_IRQn
 = 33,

234 
I2C2_ER_IRQn
 = 34,

235 
SPI1_IRQn
 = 35,

236 
SPI2_IRQn
 = 36,

237 
USART1_IRQn
 = 37,

238 
USART2_IRQn
 = 38,

239 
USART3_IRQn
 = 39,

240 
EXTI15_10_IRQn
 = 40,

241 
RTCAœrm_IRQn
 = 41,

242 
USBWakeUp_IRQn
 = 42

245 #ifde‡
STM32F10X_MD_VL


246 
ADC1_IRQn
 = 18,

247 
EXTI9_5_IRQn
 = 23,

248 
TIM1_BRK_TIM15_IRQn
 = 24,

249 
TIM1_UP_TIM16_IRQn
 = 25,

250 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

251 
TIM1_CC_IRQn
 = 27,

252 
TIM2_IRQn
 = 28,

253 
TIM3_IRQn
 = 29,

254 
TIM4_IRQn
 = 30,

255 
I2C1_EV_IRQn
 = 31,

256 
I2C1_ER_IRQn
 = 32,

257 
I2C2_EV_IRQn
 = 33,

258 
I2C2_ER_IRQn
 = 34,

259 
SPI1_IRQn
 = 35,

260 
SPI2_IRQn
 = 36,

261 
USART1_IRQn
 = 37,

262 
USART2_IRQn
 = 38,

263 
USART3_IRQn
 = 39,

264 
EXTI15_10_IRQn
 = 40,

265 
RTCAœrm_IRQn
 = 41,

266 
CEC_IRQn
 = 42,

267 
TIM6_DAC_IRQn
 = 54,

268 
TIM7_IRQn
 = 55

271 #ifde‡
STM32F10X_HD


272 
ADC1_2_IRQn
 = 18,

273 
USB_HP_CAN1_TX_IRQn
 = 19,

274 
USB_LP_CAN1_RX0_IRQn
 = 20,

275 
CAN1_RX1_IRQn
 = 21,

276 
CAN1_SCE_IRQn
 = 22,

277 
EXTI9_5_IRQn
 = 23,

278 
TIM1_BRK_IRQn
 = 24,

279 
TIM1_UP_IRQn
 = 25,

280 
TIM1_TRG_COM_IRQn
 = 26,

281 
TIM1_CC_IRQn
 = 27,

282 
TIM2_IRQn
 = 28,

283 
TIM3_IRQn
 = 29,

284 
TIM4_IRQn
 = 30,

285 
I2C1_EV_IRQn
 = 31,

286 
I2C1_ER_IRQn
 = 32,

287 
I2C2_EV_IRQn
 = 33,

288 
I2C2_ER_IRQn
 = 34,

289 
SPI1_IRQn
 = 35,

290 
SPI2_IRQn
 = 36,

291 
USART1_IRQn
 = 37,

292 
USART2_IRQn
 = 38,

293 
USART3_IRQn
 = 39,

294 
EXTI15_10_IRQn
 = 40,

295 
RTCAœrm_IRQn
 = 41,

296 
USBWakeUp_IRQn
 = 42,

297 
TIM8_BRK_IRQn
 = 43,

298 
TIM8_UP_IRQn
 = 44,

299 
TIM8_TRG_COM_IRQn
 = 45,

300 
TIM8_CC_IRQn
 = 46,

301 
ADC3_IRQn
 = 47,

302 
FSMC_IRQn
 = 48,

303 
SDIO_IRQn
 = 49,

304 
TIM5_IRQn
 = 50,

305 
SPI3_IRQn
 = 51,

306 
UART4_IRQn
 = 52,

307 
UART5_IRQn
 = 53,

308 
TIM6_IRQn
 = 54,

309 
TIM7_IRQn
 = 55,

310 
DMA2_Ch™√l1_IRQn
 = 56,

311 
DMA2_Ch™√l2_IRQn
 = 57,

312 
DMA2_Ch™√l3_IRQn
 = 58,

313 
DMA2_Ch™√l4_5_IRQn
 = 59

316 #ifde‡
STM32F10X_XL


317 
ADC1_2_IRQn
 = 18,

318 
USB_HP_CAN1_TX_IRQn
 = 19,

319 
USB_LP_CAN1_RX0_IRQn
 = 20,

320 
CAN1_RX1_IRQn
 = 21,

321 
CAN1_SCE_IRQn
 = 22,

322 
EXTI9_5_IRQn
 = 23,

323 
TIM1_BRK_TIM9_IRQn
 = 24,

324 
TIM1_UP_TIM10_IRQn
 = 25,

325 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

326 
TIM1_CC_IRQn
 = 27,

327 
TIM2_IRQn
 = 28,

328 
TIM3_IRQn
 = 29,

329 
TIM4_IRQn
 = 30,

330 
I2C1_EV_IRQn
 = 31,

331 
I2C1_ER_IRQn
 = 32,

332 
I2C2_EV_IRQn
 = 33,

333 
I2C2_ER_IRQn
 = 34,

334 
SPI1_IRQn
 = 35,

335 
SPI2_IRQn
 = 36,

336 
USART1_IRQn
 = 37,

337 
USART2_IRQn
 = 38,

338 
USART3_IRQn
 = 39,

339 
EXTI15_10_IRQn
 = 40,

340 
RTCAœrm_IRQn
 = 41,

341 
USBWakeUp_IRQn
 = 42,

342 
TIM8_BRK_TIM12_IRQn
 = 43,

343 
TIM8_UP_TIM13_IRQn
 = 44,

344 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

345 
TIM8_CC_IRQn
 = 46,

346 
ADC3_IRQn
 = 47,

347 
FSMC_IRQn
 = 48,

348 
SDIO_IRQn
 = 49,

349 
TIM5_IRQn
 = 50,

350 
SPI3_IRQn
 = 51,

351 
UART4_IRQn
 = 52,

352 
UART5_IRQn
 = 53,

353 
TIM6_IRQn
 = 54,

354 
TIM7_IRQn
 = 55,

355 
DMA2_Ch™√l1_IRQn
 = 56,

356 
DMA2_Ch™√l2_IRQn
 = 57,

357 
DMA2_Ch™√l3_IRQn
 = 58,

358 
DMA2_Ch™√l4_5_IRQn
 = 59

361 #ifde‡
STM32F10X_CL


362 
ADC1_2_IRQn
 = 18,

363 
CAN1_TX_IRQn
 = 19,

364 
CAN1_RX0_IRQn
 = 20,

365 
CAN1_RX1_IRQn
 = 21,

366 
CAN1_SCE_IRQn
 = 22,

367 
EXTI9_5_IRQn
 = 23,

368 
TIM1_BRK_IRQn
 = 24,

369 
TIM1_UP_IRQn
 = 25,

370 
TIM1_TRG_COM_IRQn
 = 26,

371 
TIM1_CC_IRQn
 = 27,

372 
TIM2_IRQn
 = 28,

373 
TIM3_IRQn
 = 29,

374 
TIM4_IRQn
 = 30,

375 
I2C1_EV_IRQn
 = 31,

376 
I2C1_ER_IRQn
 = 32,

377 
I2C2_EV_IRQn
 = 33,

378 
I2C2_ER_IRQn
 = 34,

379 
SPI1_IRQn
 = 35,

380 
SPI2_IRQn
 = 36,

381 
USART1_IRQn
 = 37,

382 
USART2_IRQn
 = 38,

383 
USART3_IRQn
 = 39,

384 
EXTI15_10_IRQn
 = 40,

385 
RTCAœrm_IRQn
 = 41,

386 
OTG_FS_WKUP_IRQn
 = 42,

387 
TIM5_IRQn
 = 50,

388 
SPI3_IRQn
 = 51,

389 
UART4_IRQn
 = 52,

390 
UART5_IRQn
 = 53,

391 
TIM6_IRQn
 = 54,

392 
TIM7_IRQn
 = 55,

393 
DMA2_Ch™√l1_IRQn
 = 56,

394 
DMA2_Ch™√l2_IRQn
 = 57,

395 
DMA2_Ch™√l3_IRQn
 = 58,

396 
DMA2_Ch™√l4_IRQn
 = 59,

397 
DMA2_Ch™√l5_IRQn
 = 60,

398 
ETH_IRQn
 = 61,

399 
ETH_WKUP_IRQn
 = 62,

400 
CAN2_TX_IRQn
 = 63,

401 
CAN2_RX0_IRQn
 = 64,

402 
CAN2_RX1_IRQn
 = 65,

403 
CAN2_SCE_IRQn
 = 66,

404 
OTG_FS_IRQn
 = 67

406 } 
	tIRQn_Ty≥
;

412 
	~"c‹e_cm3.h
"

413 
	~"sy°em_°m32f10x.h
"

414 
	~<°döt.h
>

421 
öt32_t
 
	ts32
;

422 
öt16_t
 
	ts16
;

423 
öt8_t
 
	ts8
;

425 c⁄° 
	töt32_t
 
	tsc32
;

426 c⁄° 
	töt16_t
 
	tsc16
;

427 c⁄° 
	töt8_t
 
	tsc8
;

429 
__IO
 
	töt32_t
 
	tvs32
;

430 
__IO
 
	töt16_t
 
	tvs16
;

431 
__IO
 
	töt8_t
 
	tvs8
;

433 
__I
 
	töt32_t
 
	tvsc32
;

434 
__I
 
	töt16_t
 
	tvsc16
;

435 
__I
 
	töt8_t
 
	tvsc8
;

437 
uöt32_t
 
	tu32
;

438 
uöt16_t
 
	tu16
;

439 
uöt8_t
 
	tu8
;

441 c⁄° 
	tuöt32_t
 
	tuc32
;

442 c⁄° 
	tuöt16_t
 
	tuc16
;

443 c⁄° 
	tuöt8_t
 
	tuc8
;

445 
__IO
 
	tuöt32_t
 
	tvu32
;

446 
__IO
 
	tuöt16_t
 
	tvu16
;

447 
__IO
 
	tuöt8_t
 
	tvu8
;

449 
__I
 
	tuöt32_t
 
	tvuc32
;

450 
__I
 
	tuöt16_t
 
	tvuc16
;

451 
__I
 
	tuöt8_t
 
	tvuc8
;

453 #i‚de‡
__˝lu•lus


454 íum {
FALSE
 = 0, 
TRUE
 = !FALSE} 
	tboﬁ
;

457 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

459 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

460 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

462 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

465 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

466 
	#HSE_VÆue
 
HSE_VALUE


	)

467 
	#HSI_VÆue
 
HSI_VALUE


	)

482 
__IO
 
uöt32_t
 
SR
;

483 
__IO
 
uöt32_t
 
CR1
;

484 
__IO
 
uöt32_t
 
CR2
;

485 
__IO
 
uöt32_t
 
SMPR1
;

486 
__IO
 
uöt32_t
 
SMPR2
;

487 
__IO
 
uöt32_t
 
JOFR1
;

488 
__IO
 
uöt32_t
 
JOFR2
;

489 
__IO
 
uöt32_t
 
JOFR3
;

490 
__IO
 
uöt32_t
 
JOFR4
;

491 
__IO
 
uöt32_t
 
HTR
;

492 
__IO
 
uöt32_t
 
LTR
;

493 
__IO
 
uöt32_t
 
SQR1
;

494 
__IO
 
uöt32_t
 
SQR2
;

495 
__IO
 
uöt32_t
 
SQR3
;

496 
__IO
 
uöt32_t
 
JSQR
;

497 
__IO
 
uöt32_t
 
JDR1
;

498 
__IO
 
uöt32_t
 
JDR2
;

499 
__IO
 
uöt32_t
 
JDR3
;

500 
__IO
 
uöt32_t
 
JDR4
;

501 
__IO
 
uöt32_t
 
DR
;

502 } 
	tADC_Ty≥Def
;

510 
uöt32_t
 
RESERVED0
;

511 
__IO
 
uöt16_t
 
DR1
;

512 
uöt16_t
 
RESERVED1
;

513 
__IO
 
uöt16_t
 
DR2
;

514 
uöt16_t
 
RESERVED2
;

515 
__IO
 
uöt16_t
 
DR3
;

516 
uöt16_t
 
RESERVED3
;

517 
__IO
 
uöt16_t
 
DR4
;

518 
uöt16_t
 
RESERVED4
;

519 
__IO
 
uöt16_t
 
DR5
;

520 
uöt16_t
 
RESERVED5
;

521 
__IO
 
uöt16_t
 
DR6
;

522 
uöt16_t
 
RESERVED6
;

523 
__IO
 
uöt16_t
 
DR7
;

524 
uöt16_t
 
RESERVED7
;

525 
__IO
 
uöt16_t
 
DR8
;

526 
uöt16_t
 
RESERVED8
;

527 
__IO
 
uöt16_t
 
DR9
;

528 
uöt16_t
 
RESERVED9
;

529 
__IO
 
uöt16_t
 
DR10
;

530 
uöt16_t
 
RESERVED10
;

531 
__IO
 
uöt16_t
 
RTCCR
;

532 
uöt16_t
 
RESERVED11
;

533 
__IO
 
uöt16_t
 
CR
;

534 
uöt16_t
 
RESERVED12
;

535 
__IO
 
uöt16_t
 
CSR
;

536 
uöt16_t
 
RESERVED13
[5];

537 
__IO
 
uöt16_t
 
DR11
;

538 
uöt16_t
 
RESERVED14
;

539 
__IO
 
uöt16_t
 
DR12
;

540 
uöt16_t
 
RESERVED15
;

541 
__IO
 
uöt16_t
 
DR13
;

542 
uöt16_t
 
RESERVED16
;

543 
__IO
 
uöt16_t
 
DR14
;

544 
uöt16_t
 
RESERVED17
;

545 
__IO
 
uöt16_t
 
DR15
;

546 
uöt16_t
 
RESERVED18
;

547 
__IO
 
uöt16_t
 
DR16
;

548 
uöt16_t
 
RESERVED19
;

549 
__IO
 
uöt16_t
 
DR17
;

550 
uöt16_t
 
RESERVED20
;

551 
__IO
 
uöt16_t
 
DR18
;

552 
uöt16_t
 
RESERVED21
;

553 
__IO
 
uöt16_t
 
DR19
;

554 
uöt16_t
 
RESERVED22
;

555 
__IO
 
uöt16_t
 
DR20
;

556 
uöt16_t
 
RESERVED23
;

557 
__IO
 
uöt16_t
 
DR21
;

558 
uöt16_t
 
RESERVED24
;

559 
__IO
 
uöt16_t
 
DR22
;

560 
uöt16_t
 
RESERVED25
;

561 
__IO
 
uöt16_t
 
DR23
;

562 
uöt16_t
 
RESERVED26
;

563 
__IO
 
uöt16_t
 
DR24
;

564 
uöt16_t
 
RESERVED27
;

565 
__IO
 
uöt16_t
 
DR25
;

566 
uöt16_t
 
RESERVED28
;

567 
__IO
 
uöt16_t
 
DR26
;

568 
uöt16_t
 
RESERVED29
;

569 
__IO
 
uöt16_t
 
DR27
;

570 
uöt16_t
 
RESERVED30
;

571 
__IO
 
uöt16_t
 
DR28
;

572 
uöt16_t
 
RESERVED31
;

573 
__IO
 
uöt16_t
 
DR29
;

574 
uöt16_t
 
RESERVED32
;

575 
__IO
 
uöt16_t
 
DR30
;

576 
uöt16_t
 
RESERVED33
;

577 
__IO
 
uöt16_t
 
DR31
;

578 
uöt16_t
 
RESERVED34
;

579 
__IO
 
uöt16_t
 
DR32
;

580 
uöt16_t
 
RESERVED35
;

581 
__IO
 
uöt16_t
 
DR33
;

582 
uöt16_t
 
RESERVED36
;

583 
__IO
 
uöt16_t
 
DR34
;

584 
uöt16_t
 
RESERVED37
;

585 
__IO
 
uöt16_t
 
DR35
;

586 
uöt16_t
 
RESERVED38
;

587 
__IO
 
uöt16_t
 
DR36
;

588 
uöt16_t
 
RESERVED39
;

589 
__IO
 
uöt16_t
 
DR37
;

590 
uöt16_t
 
RESERVED40
;

591 
__IO
 
uöt16_t
 
DR38
;

592 
uöt16_t
 
RESERVED41
;

593 
__IO
 
uöt16_t
 
DR39
;

594 
uöt16_t
 
RESERVED42
;

595 
__IO
 
uöt16_t
 
DR40
;

596 
uöt16_t
 
RESERVED43
;

597 
__IO
 
uöt16_t
 
DR41
;

598 
uöt16_t
 
RESERVED44
;

599 
__IO
 
uöt16_t
 
DR42
;

600 
uöt16_t
 
RESERVED45
;

601 } 
	tBKP_Ty≥Def
;

609 
__IO
 
uöt32_t
 
TIR
;

610 
__IO
 
uöt32_t
 
TDTR
;

611 
__IO
 
uöt32_t
 
TDLR
;

612 
__IO
 
uöt32_t
 
TDHR
;

613 } 
	tCAN_TxMaûBox_Ty≥Def
;

621 
__IO
 
uöt32_t
 
RIR
;

622 
__IO
 
uöt32_t
 
RDTR
;

623 
__IO
 
uöt32_t
 
RDLR
;

624 
__IO
 
uöt32_t
 
RDHR
;

625 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

633 
__IO
 
uöt32_t
 
FR1
;

634 
__IO
 
uöt32_t
 
FR2
;

635 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

643 
__IO
 
uöt32_t
 
MCR
;

644 
__IO
 
uöt32_t
 
MSR
;

645 
__IO
 
uöt32_t
 
TSR
;

646 
__IO
 
uöt32_t
 
RF0R
;

647 
__IO
 
uöt32_t
 
RF1R
;

648 
__IO
 
uöt32_t
 
IER
;

649 
__IO
 
uöt32_t
 
ESR
;

650 
__IO
 
uöt32_t
 
BTR
;

651 
uöt32_t
 
RESERVED0
[88];

652 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

653 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

654 
uöt32_t
 
RESERVED1
[12];

655 
__IO
 
uöt32_t
 
FMR
;

656 
__IO
 
uöt32_t
 
FM1R
;

657 
uöt32_t
 
RESERVED2
;

658 
__IO
 
uöt32_t
 
FS1R
;

659 
uöt32_t
 
RESERVED3
;

660 
__IO
 
uöt32_t
 
FFA1R
;

661 
uöt32_t
 
RESERVED4
;

662 
__IO
 
uöt32_t
 
FA1R
;

663 
uöt32_t
 
RESERVED5
[8];

664 #i‚de‡
STM32F10X_CL


665 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

667 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

669 } 
	tCAN_Ty≥Def
;

676 
__IO
 
uöt32_t
 
CFGR
;

677 
__IO
 
uöt32_t
 
OAR
;

678 
__IO
 
uöt32_t
 
PRES
;

679 
__IO
 
uöt32_t
 
ESR
;

680 
__IO
 
uöt32_t
 
CSR
;

681 
__IO
 
uöt32_t
 
TXD
;

682 
__IO
 
uöt32_t
 
RXD
;

683 } 
	tCEC_Ty≥Def
;

691 
__IO
 
uöt32_t
 
DR
;

692 
__IO
 
uöt8_t
 
IDR
;

693 
uöt8_t
 
RESERVED0
;

694 
uöt16_t
 
RESERVED1
;

695 
__IO
 
uöt32_t
 
CR
;

696 } 
	tCRC_Ty≥Def
;

704 
__IO
 
uöt32_t
 
CR
;

705 
__IO
 
uöt32_t
 
SWTRIGR
;

706 
__IO
 
uöt32_t
 
DHR12R1
;

707 
__IO
 
uöt32_t
 
DHR12L1
;

708 
__IO
 
uöt32_t
 
DHR8R1
;

709 
__IO
 
uöt32_t
 
DHR12R2
;

710 
__IO
 
uöt32_t
 
DHR12L2
;

711 
__IO
 
uöt32_t
 
DHR8R2
;

712 
__IO
 
uöt32_t
 
DHR12RD
;

713 
__IO
 
uöt32_t
 
DHR12LD
;

714 
__IO
 
uöt32_t
 
DHR8RD
;

715 
__IO
 
uöt32_t
 
DOR1
;

716 
__IO
 
uöt32_t
 
DOR2
;

717 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

718 
__IO
 
uöt32_t
 
SR
;

720 } 
	tDAC_Ty≥Def
;

728 
__IO
 
uöt32_t
 
IDCODE
;

729 
__IO
 
uöt32_t
 
CR
;

730 }
	tDBGMCU_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CCR
;

739 
__IO
 
uöt32_t
 
CNDTR
;

740 
__IO
 
uöt32_t
 
CPAR
;

741 
__IO
 
uöt32_t
 
CMAR
;

742 } 
	tDMA_Ch™√l_Ty≥Def
;

746 
__IO
 
uöt32_t
 
ISR
;

747 
__IO
 
uöt32_t
 
IFCR
;

748 } 
	tDMA_Ty≥Def
;

756 
__IO
 
uöt32_t
 
MACCR
;

757 
__IO
 
uöt32_t
 
MACFFR
;

758 
__IO
 
uöt32_t
 
MACHTHR
;

759 
__IO
 
uöt32_t
 
MACHTLR
;

760 
__IO
 
uöt32_t
 
MACMIIAR
;

761 
__IO
 
uöt32_t
 
MACMIIDR
;

762 
__IO
 
uöt32_t
 
MACFCR
;

763 
__IO
 
uöt32_t
 
MACVLANTR
;

764 
uöt32_t
 
RESERVED0
[2];

765 
__IO
 
uöt32_t
 
MACRWUFFR
;

766 
__IO
 
uöt32_t
 
MACPMTCSR
;

767 
uöt32_t
 
RESERVED1
[2];

768 
__IO
 
uöt32_t
 
MACSR
;

769 
__IO
 
uöt32_t
 
MACIMR
;

770 
__IO
 
uöt32_t
 
MACA0HR
;

771 
__IO
 
uöt32_t
 
MACA0LR
;

772 
__IO
 
uöt32_t
 
MACA1HR
;

773 
__IO
 
uöt32_t
 
MACA1LR
;

774 
__IO
 
uöt32_t
 
MACA2HR
;

775 
__IO
 
uöt32_t
 
MACA2LR
;

776 
__IO
 
uöt32_t
 
MACA3HR
;

777 
__IO
 
uöt32_t
 
MACA3LR
;

778 
uöt32_t
 
RESERVED2
[40];

779 
__IO
 
uöt32_t
 
MMCCR
;

780 
__IO
 
uöt32_t
 
MMCRIR
;

781 
__IO
 
uöt32_t
 
MMCTIR
;

782 
__IO
 
uöt32_t
 
MMCRIMR
;

783 
__IO
 
uöt32_t
 
MMCTIMR
;

784 
uöt32_t
 
RESERVED3
[14];

785 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

786 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

787 
uöt32_t
 
RESERVED4
[5];

788 
__IO
 
uöt32_t
 
MMCTGFCR
;

789 
uöt32_t
 
RESERVED5
[10];

790 
__IO
 
uöt32_t
 
MMCRFCECR
;

791 
__IO
 
uöt32_t
 
MMCRFAECR
;

792 
uöt32_t
 
RESERVED6
[10];

793 
__IO
 
uöt32_t
 
MMCRGUFCR
;

794 
uöt32_t
 
RESERVED7
[334];

795 
__IO
 
uöt32_t
 
PTPTSCR
;

796 
__IO
 
uöt32_t
 
PTPSSIR
;

797 
__IO
 
uöt32_t
 
PTPTSHR
;

798 
__IO
 
uöt32_t
 
PTPTSLR
;

799 
__IO
 
uöt32_t
 
PTPTSHUR
;

800 
__IO
 
uöt32_t
 
PTPTSLUR
;

801 
__IO
 
uöt32_t
 
PTPTSAR
;

802 
__IO
 
uöt32_t
 
PTPTTHR
;

803 
__IO
 
uöt32_t
 
PTPTTLR
;

804 
uöt32_t
 
RESERVED8
[567];

805 
__IO
 
uöt32_t
 
DMABMR
;

806 
__IO
 
uöt32_t
 
DMATPDR
;

807 
__IO
 
uöt32_t
 
DMARPDR
;

808 
__IO
 
uöt32_t
 
DMARDLAR
;

809 
__IO
 
uöt32_t
 
DMATDLAR
;

810 
__IO
 
uöt32_t
 
DMASR
;

811 
__IO
 
uöt32_t
 
DMAOMR
;

812 
__IO
 
uöt32_t
 
DMAIER
;

813 
__IO
 
uöt32_t
 
DMAMFBOCR
;

814 
uöt32_t
 
RESERVED9
[9];

815 
__IO
 
uöt32_t
 
DMACHTDR
;

816 
__IO
 
uöt32_t
 
DMACHRDR
;

817 
__IO
 
uöt32_t
 
DMACHTBAR
;

818 
__IO
 
uöt32_t
 
DMACHRBAR
;

819 } 
	tETH_Ty≥Def
;

827 
__IO
 
uöt32_t
 
IMR
;

828 
__IO
 
uöt32_t
 
EMR
;

829 
__IO
 
uöt32_t
 
RTSR
;

830 
__IO
 
uöt32_t
 
FTSR
;

831 
__IO
 
uöt32_t
 
SWIER
;

832 
__IO
 
uöt32_t
 
PR
;

833 } 
	tEXTI_Ty≥Def
;

841 
__IO
 
uöt32_t
 
ACR
;

842 
__IO
 
uöt32_t
 
KEYR
;

843 
__IO
 
uöt32_t
 
OPTKEYR
;

844 
__IO
 
uöt32_t
 
SR
;

845 
__IO
 
uöt32_t
 
CR
;

846 
__IO
 
uöt32_t
 
AR
;

847 
__IO
 
uöt32_t
 
RESERVED
;

848 
__IO
 
uöt32_t
 
OBR
;

849 
__IO
 
uöt32_t
 
WRPR
;

850 #ifde‡
STM32F10X_XL


851 
uöt32_t
 
RESERVED1
[8];

852 
__IO
 
uöt32_t
 
KEYR2
;

853 
uöt32_t
 
RESERVED2
;

854 
__IO
 
uöt32_t
 
SR2
;

855 
__IO
 
uöt32_t
 
CR2
;

856 
__IO
 
uöt32_t
 
AR2
;

858 } 
	tFLASH_Ty≥Def
;

866 
__IO
 
uöt16_t
 
RDP
;

867 
__IO
 
uöt16_t
 
USER
;

868 
__IO
 
uöt16_t
 
D©a0
;

869 
__IO
 
uöt16_t
 
D©a1
;

870 
__IO
 
uöt16_t
 
WRP0
;

871 
__IO
 
uöt16_t
 
WRP1
;

872 
__IO
 
uöt16_t
 
WRP2
;

873 
__IO
 
uöt16_t
 
WRP3
;

874 } 
	tOB_Ty≥Def
;

882 
__IO
 
uöt32_t
 
BTCR
[8];

883 } 
	tFSMC_B™k1_Ty≥Def
;

891 
__IO
 
uöt32_t
 
BWTR
[7];

892 } 
	tFSMC_B™k1E_Ty≥Def
;

900 
__IO
 
uöt32_t
 
PCR2
;

901 
__IO
 
uöt32_t
 
SR2
;

902 
__IO
 
uöt32_t
 
PMEM2
;

903 
__IO
 
uöt32_t
 
PATT2
;

904 
uöt32_t
 
RESERVED0
;

905 
__IO
 
uöt32_t
 
ECCR2
;

906 } 
	tFSMC_B™k2_Ty≥Def
;

914 
__IO
 
uöt32_t
 
PCR3
;

915 
__IO
 
uöt32_t
 
SR3
;

916 
__IO
 
uöt32_t
 
PMEM3
;

917 
__IO
 
uöt32_t
 
PATT3
;

918 
uöt32_t
 
RESERVED0
;

919 
__IO
 
uöt32_t
 
ECCR3
;

920 } 
	tFSMC_B™k3_Ty≥Def
;

928 
__IO
 
uöt32_t
 
PCR4
;

929 
__IO
 
uöt32_t
 
SR4
;

930 
__IO
 
uöt32_t
 
PMEM4
;

931 
__IO
 
uöt32_t
 
PATT4
;

932 
__IO
 
uöt32_t
 
PIO4
;

933 } 
	tFSMC_B™k4_Ty≥Def
;

941 
__IO
 
uöt32_t
 
CRL
;

942 
__IO
 
uöt32_t
 
CRH
;

943 
__IO
 
uöt32_t
 
IDR
;

944 
__IO
 
uöt32_t
 
ODR
;

945 
__IO
 
uöt32_t
 
BSRR
;

946 
__IO
 
uöt32_t
 
BRR
;

947 
__IO
 
uöt32_t
 
LCKR
;

948 } 
	tGPIO_Ty≥Def
;

956 
__IO
 
uöt32_t
 
EVCR
;

957 
__IO
 
uöt32_t
 
MAPR
;

958 
__IO
 
uöt32_t
 
EXTICR
[4];

959 
uöt32_t
 
RESERVED0
;

960 
__IO
 
uöt32_t
 
MAPR2
;

961 } 
	tAFIO_Ty≥Def
;

968 
__IO
 
uöt16_t
 
CR1
;

969 
uöt16_t
 
RESERVED0
;

970 
__IO
 
uöt16_t
 
CR2
;

971 
uöt16_t
 
RESERVED1
;

972 
__IO
 
uöt16_t
 
OAR1
;

973 
uöt16_t
 
RESERVED2
;

974 
__IO
 
uöt16_t
 
OAR2
;

975 
uöt16_t
 
RESERVED3
;

976 
__IO
 
uöt16_t
 
DR
;

977 
uöt16_t
 
RESERVED4
;

978 
__IO
 
uöt16_t
 
SR1
;

979 
uöt16_t
 
RESERVED5
;

980 
__IO
 
uöt16_t
 
SR2
;

981 
uöt16_t
 
RESERVED6
;

982 
__IO
 
uöt16_t
 
CCR
;

983 
uöt16_t
 
RESERVED7
;

984 
__IO
 
uöt16_t
 
TRISE
;

985 
uöt16_t
 
RESERVED8
;

986 } 
	tI2C_Ty≥Def
;

994 
__IO
 
uöt32_t
 
KR
;

995 
__IO
 
uöt32_t
 
PR
;

996 
__IO
 
uöt32_t
 
RLR
;

997 
__IO
 
uöt32_t
 
SR
;

998 } 
	tIWDG_Ty≥Def
;

1006 
__IO
 
uöt32_t
 
CR
;

1007 
__IO
 
uöt32_t
 
CSR
;

1008 } 
	tPWR_Ty≥Def
;

1016 
__IO
 
uöt32_t
 
CR
;

1017 
__IO
 
uöt32_t
 
CFGR
;

1018 
__IO
 
uöt32_t
 
CIR
;

1019 
__IO
 
uöt32_t
 
APB2RSTR
;

1020 
__IO
 
uöt32_t
 
APB1RSTR
;

1021 
__IO
 
uöt32_t
 
AHBENR
;

1022 
__IO
 
uöt32_t
 
APB2ENR
;

1023 
__IO
 
uöt32_t
 
APB1ENR
;

1024 
__IO
 
uöt32_t
 
BDCR
;

1025 
__IO
 
uöt32_t
 
CSR
;

1027 #ifde‡
STM32F10X_CL


1028 
__IO
 
uöt32_t
 
AHBRSTR
;

1029 
__IO
 
uöt32_t
 
CFGR2
;

1032 #i‡
deföed
 
STM32F10X_LD_VL
 || deföed 
STM32F10X_MD_VL


1033 
uöt32_t
 
RESERVED0
;

1034 
__IO
 
uöt32_t
 
CFGR2
;

1036 } 
	tRCC_Ty≥Def
;

1044 
__IO
 
uöt16_t
 
CRH
;

1045 
uöt16_t
 
RESERVED0
;

1046 
__IO
 
uöt16_t
 
CRL
;

1047 
uöt16_t
 
RESERVED1
;

1048 
__IO
 
uöt16_t
 
PRLH
;

1049 
uöt16_t
 
RESERVED2
;

1050 
__IO
 
uöt16_t
 
PRLL
;

1051 
uöt16_t
 
RESERVED3
;

1052 
__IO
 
uöt16_t
 
DIVH
;

1053 
uöt16_t
 
RESERVED4
;

1054 
__IO
 
uöt16_t
 
DIVL
;

1055 
uöt16_t
 
RESERVED5
;

1056 
__IO
 
uöt16_t
 
CNTH
;

1057 
uöt16_t
 
RESERVED6
;

1058 
__IO
 
uöt16_t
 
CNTL
;

1059 
uöt16_t
 
RESERVED7
;

1060 
__IO
 
uöt16_t
 
ALRH
;

1061 
uöt16_t
 
RESERVED8
;

1062 
__IO
 
uöt16_t
 
ALRL
;

1063 
uöt16_t
 
RESERVED9
;

1064 } 
	tRTC_Ty≥Def
;

1072 
__IO
 
uöt32_t
 
POWER
;

1073 
__IO
 
uöt32_t
 
CLKCR
;

1074 
__IO
 
uöt32_t
 
ARG
;

1075 
__IO
 
uöt32_t
 
CMD
;

1076 
__I
 
uöt32_t
 
RESPCMD
;

1077 
__I
 
uöt32_t
 
RESP1
;

1078 
__I
 
uöt32_t
 
RESP2
;

1079 
__I
 
uöt32_t
 
RESP3
;

1080 
__I
 
uöt32_t
 
RESP4
;

1081 
__IO
 
uöt32_t
 
DTIMER
;

1082 
__IO
 
uöt32_t
 
DLEN
;

1083 
__IO
 
uöt32_t
 
DCTRL
;

1084 
__I
 
uöt32_t
 
DCOUNT
;

1085 
__I
 
uöt32_t
 
STA
;

1086 
__IO
 
uöt32_t
 
ICR
;

1087 
__IO
 
uöt32_t
 
MASK
;

1088 
uöt32_t
 
RESERVED0
[2];

1089 
__I
 
uöt32_t
 
FIFOCNT
;

1090 
uöt32_t
 
RESERVED1
[13];

1091 
__IO
 
uöt32_t
 
FIFO
;

1092 } 
	tSDIO_Ty≥Def
;

1100 
__IO
 
uöt16_t
 
CR1
;

1101 
uöt16_t
 
RESERVED0
;

1102 
__IO
 
uöt16_t
 
CR2
;

1103 
uöt16_t
 
RESERVED1
;

1104 
__IO
 
uöt16_t
 
SR
;

1105 
uöt16_t
 
RESERVED2
;

1106 
__IO
 
uöt16_t
 
DR
;

1107 
uöt16_t
 
RESERVED3
;

1108 
__IO
 
uöt16_t
 
CRCPR
;

1109 
uöt16_t
 
RESERVED4
;

1110 
__IO
 
uöt16_t
 
RXCRCR
;

1111 
uöt16_t
 
RESERVED5
;

1112 
__IO
 
uöt16_t
 
TXCRCR
;

1113 
uöt16_t
 
RESERVED6
;

1114 
__IO
 
uöt16_t
 
I2SCFGR
;

1115 
uöt16_t
 
RESERVED7
;

1116 
__IO
 
uöt16_t
 
I2SPR
;

1117 
uöt16_t
 
RESERVED8
;

1118 } 
	tSPI_Ty≥Def
;

1126 
__IO
 
uöt16_t
 
CR1
;

1127 
uöt16_t
 
RESERVED0
;

1128 
__IO
 
uöt16_t
 
CR2
;

1129 
uöt16_t
 
RESERVED1
;

1130 
__IO
 
uöt16_t
 
SMCR
;

1131 
uöt16_t
 
RESERVED2
;

1132 
__IO
 
uöt16_t
 
DIER
;

1133 
uöt16_t
 
RESERVED3
;

1134 
__IO
 
uöt16_t
 
SR
;

1135 
uöt16_t
 
RESERVED4
;

1136 
__IO
 
uöt16_t
 
EGR
;

1137 
uöt16_t
 
RESERVED5
;

1138 
__IO
 
uöt16_t
 
CCMR1
;

1139 
uöt16_t
 
RESERVED6
;

1140 
__IO
 
uöt16_t
 
CCMR2
;

1141 
uöt16_t
 
RESERVED7
;

1142 
__IO
 
uöt16_t
 
CCER
;

1143 
uöt16_t
 
RESERVED8
;

1144 
__IO
 
uöt16_t
 
CNT
;

1145 
uöt16_t
 
RESERVED9
;

1146 
__IO
 
uöt16_t
 
PSC
;

1147 
uöt16_t
 
RESERVED10
;

1148 
__IO
 
uöt16_t
 
ARR
;

1149 
uöt16_t
 
RESERVED11
;

1150 
__IO
 
uöt16_t
 
RCR
;

1151 
uöt16_t
 
RESERVED12
;

1152 
__IO
 
uöt16_t
 
CCR1
;

1153 
uöt16_t
 
RESERVED13
;

1154 
__IO
 
uöt16_t
 
CCR2
;

1155 
uöt16_t
 
RESERVED14
;

1156 
__IO
 
uöt16_t
 
CCR3
;

1157 
uöt16_t
 
RESERVED15
;

1158 
__IO
 
uöt16_t
 
CCR4
;

1159 
uöt16_t
 
RESERVED16
;

1160 
__IO
 
uöt16_t
 
BDTR
;

1161 
uöt16_t
 
RESERVED17
;

1162 
__IO
 
uöt16_t
 
DCR
;

1163 
uöt16_t
 
RESERVED18
;

1164 
__IO
 
uöt16_t
 
DMAR
;

1165 
uöt16_t
 
RESERVED19
;

1166 } 
	tTIM_Ty≥Def
;

1174 
__IO
 
uöt16_t
 
SR
;

1175 
uöt16_t
 
RESERVED0
;

1176 
__IO
 
uöt16_t
 
DR
;

1177 
uöt16_t
 
RESERVED1
;

1178 
__IO
 
uöt16_t
 
BRR
;

1179 
uöt16_t
 
RESERVED2
;

1180 
__IO
 
uöt16_t
 
CR1
;

1181 
uöt16_t
 
RESERVED3
;

1182 
__IO
 
uöt16_t
 
CR2
;

1183 
uöt16_t
 
RESERVED4
;

1184 
__IO
 
uöt16_t
 
CR3
;

1185 
uöt16_t
 
RESERVED5
;

1186 
__IO
 
uöt16_t
 
GTPR
;

1187 
uöt16_t
 
RESERVED6
;

1188 } 
	tUSART_Ty≥Def
;

1196 
__IO
 
uöt32_t
 
CR
;

1197 
__IO
 
uöt32_t
 
CFR
;

1198 
__IO
 
uöt32_t
 
SR
;

1199 } 
	tWWDG_Ty≥Def
;

1209 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1210 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1212 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1213 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1215 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1218 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1219 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1220 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1222 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1223 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1224 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1225 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1226 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1227 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1228 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1229 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1230 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1231 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1232 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1233 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1234 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1235 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1236 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1237 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1238 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1239 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1240 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1241 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1242 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1243 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1244 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1245 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1246 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1247 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1249 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1250 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1251 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1252 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1253 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1254 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1255 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1256 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1257 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1258 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1259 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1260 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1261 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1262 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1263 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1264 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1265 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1266 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1267 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1268 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1269 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1270 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1272 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1274 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1275 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1276 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1277 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1278 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1279 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1280 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1281 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1282 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1283 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1284 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1285 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1286 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1287 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1288 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1289 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1291 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1292 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1294 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1295 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1296 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1297 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1298 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1300 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1301 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1302 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1303 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1304 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1306 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1316 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1317 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1318 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1319 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1320 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1321 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1322 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1323 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1324 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1325 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1326 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1327 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1328 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1329 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1330 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1331 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1332 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1333 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1334 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1335 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1336 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1337 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1338 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1339 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1340 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1341 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1342 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1343 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1344 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1345 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1346 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1347 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1348 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1349 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1350 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1351 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1352 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1353 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1354 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1355 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1356 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1357 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1358 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1359 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1360 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1361 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1362 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1363 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1364 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1365 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1366 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1367 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1368 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1369 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1370 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1371 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1372 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1373 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1374 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1375 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1376 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1377 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1378 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1379 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1380 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1381 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1382 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1383 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1384 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1385 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1386 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1387 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1388 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1389 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1414 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1418 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1422 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1431 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1432 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1433 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1434 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1435 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1437 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1438 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1439 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1440 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1443 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1444 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1445 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1446 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1447 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1448 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1449 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1450 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1452 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1456 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1457 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1458 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1459 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1468 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1471 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1474 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1477 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1480 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1483 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1486 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1489 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1492 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1495 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1498 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1501 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1504 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1507 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1510 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1513 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1516 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1519 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1522 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1525 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1528 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1531 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1534 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1537 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1540 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1543 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1546 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1549 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1552 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1555 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1558 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1561 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1564 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1567 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1570 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1573 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1576 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1579 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1582 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1585 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1588 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1591 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1594 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1595 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1596 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1597 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1600 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1601 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1604 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1605 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1606 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1607 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1608 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1617 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1618 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1619 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1620 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1621 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1622 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1623 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1624 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1625 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1626 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1628 #ifde‡
STM32F10X_CL


1629 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1630 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1631 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1632 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1637 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1638 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1639 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1641 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1642 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1643 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1646 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1647 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1648 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1650 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1651 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1652 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1655 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1656 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1657 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1658 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1659 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1661 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1662 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1663 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1664 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1665 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1666 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1667 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1668 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1669 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1672 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1673 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1674 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1675 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1677 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1678 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1679 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1680 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1681 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1684 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1685 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1686 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1687 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1689 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1690 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1691 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1692 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1693 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1696 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1697 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1698 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1700 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1701 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1702 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1703 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1705 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1707 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1710 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1711 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1712 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1713 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1714 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1716 #ifde‡
STM32F10X_CL


1717 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1718 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1720 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1721 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1723 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1724 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1725 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1726 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1727 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1728 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1729 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1731 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1734 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1735 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1736 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1737 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1738 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1740 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1741 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1742 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1743 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1744 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1745 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1746 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1747 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1748 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1749 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1750 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1751 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1753 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1754 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1756 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1757 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1758 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1759 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1760 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1761 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1762 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1763 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1764 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1765 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1766 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1767 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1768 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1769 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1770 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1773 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1774 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1775 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1776 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1778 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1779 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1780 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1781 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1782 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1784 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1785 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1787 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1788 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1790 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1791 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1792 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1793 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1794 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1795 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1796 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1797 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1798 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1799 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1800 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1801 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1802 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1803 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1804 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1805 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1808 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1809 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1810 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1811 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1813 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1814 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1815 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1816 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1817 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1821 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1822 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1823 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1824 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1825 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1826 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1827 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1828 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1829 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1830 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1831 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1832 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1833 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1834 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1835 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1836 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1837 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1839 #ifde‡
STM32F10X_CL


1840 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1841 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1842 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1843 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1844 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1845 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1849 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1850 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1851 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1852 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1853 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1854 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1856 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1857 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1860 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1861 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1862 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1864 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1865 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1866 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1867 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1870 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1871 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1874 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1875 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1876 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1877 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1878 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1881 #ifde‡
STM32F10X_XL


1882 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1883 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1884 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1888 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1889 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1890 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1891 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1892 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1894 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1895 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1898 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1899 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1901 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1902 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1903 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1904 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1905 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1908 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1909 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1912 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1913 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1914 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1915 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1916 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1917 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1918 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1919 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1922 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1923 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1924 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1925 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1926 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1929 #ifde‡
STM32F10X_CL


1930 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

1933 #ifde‡
STM32F10X_XL


1934 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

1935 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

1936 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

1940 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1941 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1942 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1943 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1945 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1946 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1949 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1950 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1951 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1954 #ifde‡
STM32F10X_CL


1955 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

1956 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

1957 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

1958 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

1962 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

1963 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

1964 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

1965 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

1966 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

1967 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

1969 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1970 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

1973 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

1974 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

1975 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

1977 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1978 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

1979 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

1980 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

1983 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1984 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

1987 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1988 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

1989 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

1990 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

1991 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

1994 #ifde‡
STM32F10X_XL


1995 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

1996 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

1997 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2001 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2002 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2003 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2004 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2005 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2007 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

2008 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2011 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2012 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2014 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2015 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2016 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2017 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2018 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2021 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2022 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2025 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2026 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2027 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2028 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2029 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2030 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2031 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2032 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2035 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2036 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2037 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2038 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2039 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2042 #ifde‡
STM32F10X_CL


2043 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2046 #ifde‡
STM32F10X_XL


2047 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2048 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2049 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2053 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2054 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2055 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2057 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2058 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2059 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2062 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2063 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2064 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2065 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2067 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2068 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2071 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2072 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2073 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2074 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2075 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2076 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2077 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2078 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2079 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2081 #ifde‡
STM32F10X_CL


2083 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2084 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2088 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2089 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2090 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2091 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2092 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2094 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2095 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2096 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2097 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2098 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2099 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2100 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2101 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2102 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2103 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2104 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2105 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2106 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2107 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2108 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2109 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2112 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2113 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2114 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2115 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2116 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2118 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2119 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2120 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2121 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2122 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2123 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2124 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2125 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2126 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2127 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2128 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2129 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2130 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2131 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2132 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2133 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2136 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2137 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2138 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2139 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2140 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2142 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2143 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2144 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2145 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2146 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2147 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2148 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2149 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2150 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2153 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2154 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2155 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2156 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2157 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2159 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2160 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2161 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2162 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2163 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2164 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2165 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2166 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2167 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2169 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2170 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2171 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2172 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2173 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2176 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2179 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2180 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2181 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2182 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2183 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2185 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2186 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2187 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2191 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2210 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2212 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2213 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2214 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2216 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2217 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2218 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2220 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2221 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2222 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2224 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2225 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2226 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2228 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2229 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2230 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2232 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2233 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2234 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2236 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2237 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2238 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2240 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2241 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2242 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2244 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2246 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2247 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2248 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2250 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2251 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2252 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2254 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2255 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2256 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2258 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2259 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2260 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2262 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2263 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2264 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2266 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2267 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2268 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2270 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2271 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2272 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2274 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2275 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2276 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2279 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2281 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2282 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2283 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2285 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2286 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2287 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2289 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2290 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2291 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2293 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2294 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2295 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2297 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2298 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2299 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2301 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2302 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2303 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2305 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2306 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2307 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2309 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2310 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2311 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2313 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2315 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2316 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2317 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2319 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2320 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2321 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2323 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2324 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2325 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2327 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2328 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2329 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2331 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2332 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2333 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2335 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2336 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2337 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2339 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2340 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2341 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2343 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2344 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2345 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2348 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2349 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2350 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2351 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2352 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2353 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2354 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2355 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2356 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2357 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2358 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2359 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2360 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2361 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2362 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2363 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2366 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2367 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2368 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2369 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2370 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2371 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2372 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2373 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2374 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2375 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2376 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2377 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2378 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2379 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2380 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2381 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2384 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2385 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2386 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2387 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2388 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2389 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2390 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2391 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2392 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2393 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2394 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2395 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2396 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2397 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2398 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2399 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2401 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2402 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2403 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2404 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2405 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2406 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2407 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2408 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2409 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2410 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2411 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2412 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2413 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2414 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2415 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2416 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2419 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2420 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2421 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2422 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2423 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2424 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2425 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2426 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2427 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2428 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2429 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2430 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2431 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2432 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2433 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2434 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2437 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2438 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2439 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2440 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2441 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2442 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2443 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2444 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2445 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2446 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2447 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2448 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2449 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2450 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2451 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2452 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2453 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2458 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2459 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2460 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2461 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2462 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2465 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2466 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2467 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2468 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2469 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2470 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2471 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2472 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2473 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2474 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2475 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2476 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2477 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2478 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2479 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2480 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2482 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2483 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2484 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2485 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2488 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2489 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2490 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2491 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2492 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2494 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2497 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2498 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2499 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2500 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2502 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2503 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2504 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2507 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2508 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2509 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2511 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2512 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2513 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2516 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2517 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2518 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2520 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2521 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2522 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2525 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2526 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2527 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2528 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2530 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2531 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2532 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2535 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2536 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2537 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2539 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2541 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2542 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2543 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2546 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2547 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2548 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2550 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2551 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2552 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2553 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2554 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2555 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2558 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2559 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2560 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2561 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2563 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2564 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2565 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2566 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2568 #ifde‡
STM32F10X_CL


2570 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2573 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2576 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2579 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2582 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2585 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x20000000Ë

	)

2589 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2590 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2591 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2592 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2595 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2596 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2597 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2598 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2599 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2600 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2601 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2604 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2605 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2606 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2607 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2608 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2609 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2610 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2613 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2614 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2615 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2616 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2617 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2618 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2619 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2622 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2623 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2624 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2625 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2626 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2627 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2628 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2631 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2632 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2633 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2634 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2637 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2638 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2639 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2640 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2641 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2642 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2643 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2646 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2647 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2648 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2649 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2650 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2651 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2652 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2655 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2656 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2657 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2658 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2659 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2660 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2661 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2664 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2665 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2666 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2667 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2668 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2669 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2670 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2673 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2674 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2675 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2676 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2679 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2680 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2681 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2682 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2683 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2684 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2685 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2688 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2689 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2690 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2691 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2692 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2693 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2694 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2697 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2698 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2699 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2700 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2701 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2702 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2703 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2706 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2707 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2708 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2709 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2710 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2711 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2712 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2715 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2716 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2717 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2718 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2721 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2722 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2723 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2724 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2725 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2726 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2727 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2730 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2731 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2732 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2733 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2734 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2735 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2736 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2739 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2740 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2741 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2742 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2743 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2744 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2745 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2748 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2749 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2750 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2751 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2752 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2753 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2754 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2756 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2758 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2759 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2760 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2761 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2762 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2765 #ifde‡
STM32F10X_XL


2767 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2768 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2769 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2770 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2771 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2772 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2782 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2783 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2784 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2785 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2788 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2791 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2794 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2795 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2796 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2805 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2806 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2807 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2808 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2809 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2810 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2811 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2812 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2813 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2814 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2815 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2816 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2817 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2818 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2819 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2820 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2821 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2822 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2823 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2824 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2825 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2826 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2827 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2828 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2829 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2830 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2831 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2832 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2833 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2834 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2835 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2836 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2837 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2840 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2841 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2842 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2843 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2844 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2845 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2846 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2847 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2848 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2849 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2850 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2851 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2852 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2853 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2854 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2855 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2856 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2857 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2858 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2859 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2860 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2861 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2862 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2863 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2864 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2865 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2866 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2867 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2868 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2869 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2870 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2871 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2872 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2875 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2876 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2877 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2878 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2879 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2880 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2881 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2882 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2883 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2884 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2885 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2886 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2887 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2888 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2889 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2890 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2891 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2892 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2893 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2894 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2895 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2896 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2897 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2898 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2899 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2900 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2901 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2902 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2903 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2904 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2905 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2906 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2907 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2910 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2911 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2912 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2913 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2914 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2915 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2916 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2917 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2918 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2919 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2920 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2921 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2922 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2923 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2924 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2925 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2926 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2927 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2928 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2929 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2930 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2931 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2932 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2933 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2934 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2935 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2936 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2937 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2938 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2939 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2940 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2941 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2942 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2945 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2946 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2947 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2948 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2949 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2950 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2951 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2952 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2953 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2954 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2955 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2956 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2957 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2958 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2959 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2960 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2961 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2962 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2963 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2964 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2965 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2966 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2967 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2968 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2969 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2970 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2971 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2972 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2973 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2974 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2975 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2976 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2977 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2980 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2981 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2982 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2983 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2986 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2987 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2988 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2989 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2992 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2993 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2994 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2995 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

2998 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

2999 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3000 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3001 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3004 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3005 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3006 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3007 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3010 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3011 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3012 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3013 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3016 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3017 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3018 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3019 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3022 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3023 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3024 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3025 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3028 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3029 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3030 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3031 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3032 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3035 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3036 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3037 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3038 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3039 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3040 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3041 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3042 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3043 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3044 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3047 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3048 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3051 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3052 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3053 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3055 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3056 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3057 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3058 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3061 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3062 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3063 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3064 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3065 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3066 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3067 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3068 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3070 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3071 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3074 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3075 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3076 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3079 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3080 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3081 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3082 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3083 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3084 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3087 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3088 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3089 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3090 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3093 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3094 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3095 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3096 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3097 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3098 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3099 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3100 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3101 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3102 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3103 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3104 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3105 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3106 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3110 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3111 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3112 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3113 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3114 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3116 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3117 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3118 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3119 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3120 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3121 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3123 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3124 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3125 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3126 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3127 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3128 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3131 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3132 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3133 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3136 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3137 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3138 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3139 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3140 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3143 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3146 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3149 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3158 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3159 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3160 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3161 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3162 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3163 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3164 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3165 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3166 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3167 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3168 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3169 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3170 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3171 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3172 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3173 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3174 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3175 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3176 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3177 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3180 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3181 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3182 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3183 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3184 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3185 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3186 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3187 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3188 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3189 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3190 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3191 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3192 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3193 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3194 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3195 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3196 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3197 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3198 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3199 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3202 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3203 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3204 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3205 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3206 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3207 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3208 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3209 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3210 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3211 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3212 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3213 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3214 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3215 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3216 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3217 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3218 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3219 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3220 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3221 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3224 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3225 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3226 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3227 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3228 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3229 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3230 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3231 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3232 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3233 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3234 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3235 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3236 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3237 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3238 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3239 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3240 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3241 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3242 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3243 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3246 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3247 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3248 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3249 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3250 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3251 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3252 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3253 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3254 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3255 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3256 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3257 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3258 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3259 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3260 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3261 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3262 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3263 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3264 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3265 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3268 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3269 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3270 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3271 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3272 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3273 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3274 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3275 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3276 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3277 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3278 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3279 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3280 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3281 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3282 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3283 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3284 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3285 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3286 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3287 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3296 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3297 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3298 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3299 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3300 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3301 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3302 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3303 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3304 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3305 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3306 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3307 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3308 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3309 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3310 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3311 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3312 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3313 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3314 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3315 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3316 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3317 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3318 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3319 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3320 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3321 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3322 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3323 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3326 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3327 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3328 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3329 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3330 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3331 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3332 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3333 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3334 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3335 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3336 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3337 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3338 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3339 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3340 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3341 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3342 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3343 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3344 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3345 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3346 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3347 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3348 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3349 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3350 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3351 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3352 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3353 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3356 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3357 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3358 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3359 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3360 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3361 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3362 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3363 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3365 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3366 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3367 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3369 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3370 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3371 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3373 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3374 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3375 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3377 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3380 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3381 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3382 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3383 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3384 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3385 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3386 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3387 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3389 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3390 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3391 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3393 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3394 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3395 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3397 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3398 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3399 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3401 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3404 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3405 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3406 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3407 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3408 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3409 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3410 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3411 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3413 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3414 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3415 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3417 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3418 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3419 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3421 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3422 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3423 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3425 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3428 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3429 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3430 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3431 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3432 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3433 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3434 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3435 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3437 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3438 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3439 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3441 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3442 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3443 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3445 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3446 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3447 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3449 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3452 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3453 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3454 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3455 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3456 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3457 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3458 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3459 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3461 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3462 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3463 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3465 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3466 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3467 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3469 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3470 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3471 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3473 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3476 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3477 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3478 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3479 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3480 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3481 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3482 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3483 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3485 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3486 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3487 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3489 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3490 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3491 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3493 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3494 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3495 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3497 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3500 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3501 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3502 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3503 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3504 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3505 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3506 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3507 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3509 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3510 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3511 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3513 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3514 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3515 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3517 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3518 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3519 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3521 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3524 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3527 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3530 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3533 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3536 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3539 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3542 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3545 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3548 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3551 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3555 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3558 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3561 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3565 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3568 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3571 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3574 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3578 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3581 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3584 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3587 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3596 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3597 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3598 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3599 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3600 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3603 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3604 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3605 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3606 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3607 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3608 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3610 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3611 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3612 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3613 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3614 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3615 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3616 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3617 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3619 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3620 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3621 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3622 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3624 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3625 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3626 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3627 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3628 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3630 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3631 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3635 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3636 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3637 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3638 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3639 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3640 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3642 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3643 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3644 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3645 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3647 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3649 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3650 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3651 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3652 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3654 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3655 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3656 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3657 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3660 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3661 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3662 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3663 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3665 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3666 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3667 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3668 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3670 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3671 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3672 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3673 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3675 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3676 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3677 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3678 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3680 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3681 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3682 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3683 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3685 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3686 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3687 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3688 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3690 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3691 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3692 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3693 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3695 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3696 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3697 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3698 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3701 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3702 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3703 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3704 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3706 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3707 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3708 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3709 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3711 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3712 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3713 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3714 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3716 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3717 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3718 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3719 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3721 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3722 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3723 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3724 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3726 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3727 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3728 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3729 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3731 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3732 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3733 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3734 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3736 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3737 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3738 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3739 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3741 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3742 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3743 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3744 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3746 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3747 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3748 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3749 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3752 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3755 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3758 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3761 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3764 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3767 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3770 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3771 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3772 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3773 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3774 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3775 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3777 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3778 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3779 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3780 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3781 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3782 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3784 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3785 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3786 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3787 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3788 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3789 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3791 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3792 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3793 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3794 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3795 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3796 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3798 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3799 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3800 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3801 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3802 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3805 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3806 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3807 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3808 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3809 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3810 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3812 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3813 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3814 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3815 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3816 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3817 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3819 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3820 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3821 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3822 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3823 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3824 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3826 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3827 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3828 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3829 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3830 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3831 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3833 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3834 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3835 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3836 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3837 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3838 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3840 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3841 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3842 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3843 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3844 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3845 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3848 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3849 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3850 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3851 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3852 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3853 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3855 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3856 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3857 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3858 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3859 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3860 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3862 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3863 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3864 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3865 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3866 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3867 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3869 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3870 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3871 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3872 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3873 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3874 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3876 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3877 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3878 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3879 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3880 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3881 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3883 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3884 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3885 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3886 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3887 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3888 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3891 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3892 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3893 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3894 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3895 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3896 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3898 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3899 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3900 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3901 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3902 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3903 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3905 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3906 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3907 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3908 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3909 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3910 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3912 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3913 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3914 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3915 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3916 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3917 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3919 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3920 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3921 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3924 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3927 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3930 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3933 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3936 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3937 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3946 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3947 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3948 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3950 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3951 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3952 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3953 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3955 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3956 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3957 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3959 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3960 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3961 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3962 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3963 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3965 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3966 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3967 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3968 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3970 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3971 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3972 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3973 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3975 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3976 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3977 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3979 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3980 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3981 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3982 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3983 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3985 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3988 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3989 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3992 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3995 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3998 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4001 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4004 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4007 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4010 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4011 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4014 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4015 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4018 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4019 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4022 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4025 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4028 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4029 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4037 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4038 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4039 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4040 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4043 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4044 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4045 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4046 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4047 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4050 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4053 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4054 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4055 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4056 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4057 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4058 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4059 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4062 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4063 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4064 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4065 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4066 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4067 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4068 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4069 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4072 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4075 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4084 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4085 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4086 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4087 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4088 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4090 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4091 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4092 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4094 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4096 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4097 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4098 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4101 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4102 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4103 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4105 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4106 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4107 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4108 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4110 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4111 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4112 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4113 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4114 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4115 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4116 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4117 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4120 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4121 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4122 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4123 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4125 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4126 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4127 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4128 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4130 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4132 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4133 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4134 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4135 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4136 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4138 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4139 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4140 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4142 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4143 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4146 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4147 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4148 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4149 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4150 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4151 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4152 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4153 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4154 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4155 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4156 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4157 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4158 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4159 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4160 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4163 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4164 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4165 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4166 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4167 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4168 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4169 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4170 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4171 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4172 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4173 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4174 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4177 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4178 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4179 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4180 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4181 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4182 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4183 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4184 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4187 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4188 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4189 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4191 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4192 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4194 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4195 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4196 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4197 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4199 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4201 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4202 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4203 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4205 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4206 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4208 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4209 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4210 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4211 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4213 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4217 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4218 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4219 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4221 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4222 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4223 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4224 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4225 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4227 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4228 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4229 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4231 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4232 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4233 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4234 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4235 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4238 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4239 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4240 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4242 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4243 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4245 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4246 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4247 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4248 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4250 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4252 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4253 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4254 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4256 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4257 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4259 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4260 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4261 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4262 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4264 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4268 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4269 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4270 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4272 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4273 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4274 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4275 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4276 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4278 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4279 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4280 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4282 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4283 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4284 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4285 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4286 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4289 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4290 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4291 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4292 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4293 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4294 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4295 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4296 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4297 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4298 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4299 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4300 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4301 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4302 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4305 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4308 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4311 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4314 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4317 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4320 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4323 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4326 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4329 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4330 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4331 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4332 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4333 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4334 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4335 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4336 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4337 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4339 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4340 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4341 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4343 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4344 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4345 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4346 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4347 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4348 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4351 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4352 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4353 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4354 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4355 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4356 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4358 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4359 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4360 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4361 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4362 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4363 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4366 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4375 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4376 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4377 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4380 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4381 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4382 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4383 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4384 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4385 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4388 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4391 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4394 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4397 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4400 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4403 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4406 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4409 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4418 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4421 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4422 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4423 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4424 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4427 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4430 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4431 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4440 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4441 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4442 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4443 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4444 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4445 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4446 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4447 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4449 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4452 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4453 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4454 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4455 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4456 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4457 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4458 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4459 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4461 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4462 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4463 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4465 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4468 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4477 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4478 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4480 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4481 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4482 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4484 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4485 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4486 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4488 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4489 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4490 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4491 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4492 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4493 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4494 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4495 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4496 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4499 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4500 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4502 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4503 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4504 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4506 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4507 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4508 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4510 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4511 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4512 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4513 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4514 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4515 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4516 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4517 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4518 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4521 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4522 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4524 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4525 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4526 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4528 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4529 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4530 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4532 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4533 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4534 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4535 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4536 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4537 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4538 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4539 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4540 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4543 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4544 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4546 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4547 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4548 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4550 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4551 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4552 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4554 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4555 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4556 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4557 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4558 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4559 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4560 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4561 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4562 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4565 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4566 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4567 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4568 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4569 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4571 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4572 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4573 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4574 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4575 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4577 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4578 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4579 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4580 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4581 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4583 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4584 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4585 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4586 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4587 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4589 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4590 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4591 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4592 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4593 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4595 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4596 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4597 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4598 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4599 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4601 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4602 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4603 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4606 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4607 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4608 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4609 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4610 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4612 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4613 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4614 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4615 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4616 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4618 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4619 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4620 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4621 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4622 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4625 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4626 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4627 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4628 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4630 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4631 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4632 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4633 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4634 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4636 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4637 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4638 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4639 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4640 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4642 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4643 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4644 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4647 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4648 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4649 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4650 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4651 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4653 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4654 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4655 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4656 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4657 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4659 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4660 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4661 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4662 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4663 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4665 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4666 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4667 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4668 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4669 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4671 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4672 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4673 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4674 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4675 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4677 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4678 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4679 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4680 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4681 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4683 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4684 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4685 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4688 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4689 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4690 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4691 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4692 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4694 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4695 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4696 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4697 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4698 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4700 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4701 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4702 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4703 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4704 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4706 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4707 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4708 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4709 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4710 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4712 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4713 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4714 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4715 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4716 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4718 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4719 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4720 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4721 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4722 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4724 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4725 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4726 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4729 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4730 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4731 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4732 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4733 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4735 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4736 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4737 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4738 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4739 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4741 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4742 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4743 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4744 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4745 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4747 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4748 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4749 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4750 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4751 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4753 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4754 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4755 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4756 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4757 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4759 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4760 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4761 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4764 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4765 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4766 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4767 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4768 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4770 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4771 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4772 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4773 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4774 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4776 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4777 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4778 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4779 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4780 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4782 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4783 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4784 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4785 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4786 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4788 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4789 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4790 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4791 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4792 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4794 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4795 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4796 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4799 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4800 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4801 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4802 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4803 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4805 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4806 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4807 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4808 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4809 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4811 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4812 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4813 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4814 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4815 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4817 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4818 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4819 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4820 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4821 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4823 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4824 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4825 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4826 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4827 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4829 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4830 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4831 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4834 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4835 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4836 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4837 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4838 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4840 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4841 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4842 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4843 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4844 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4846 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4847 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4848 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4849 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4850 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4852 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4853 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4854 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4855 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4856 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4858 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4859 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4860 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4861 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4862 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4864 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4865 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4866 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4869 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4870 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4871 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4873 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4874 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4875 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4877 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4879 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4880 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4881 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4882 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4883 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4885 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4886 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4887 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4888 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4889 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4891 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4892 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4893 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4894 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4897 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4898 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4899 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4901 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4902 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4903 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4905 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4907 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4908 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4909 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4910 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4911 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4913 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4914 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4915 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4916 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4917 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4919 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4920 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4921 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4922 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4925 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4926 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4927 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4929 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4930 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4931 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4933 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4935 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4936 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4937 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4938 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4939 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4941 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4942 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4943 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4944 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4945 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4947 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4948 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4949 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4950 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4953 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4954 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4955 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4956 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4957 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4958 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4959 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4962 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4963 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4964 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4965 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4966 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4967 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4968 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4971 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4972 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4973 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4974 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4975 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4976 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4977 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4980 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4981 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4982 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4983 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4984 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4985 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4986 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4987 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4988 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4990 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4991 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4992 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4993 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4994 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4995 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4996 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4997 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4998 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5000 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5001 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5002 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5003 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5004 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5005 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5006 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5007 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5008 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5010 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5011 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5012 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5013 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5014 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5015 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5016 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5017 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5018 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5021 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5022 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5023 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5024 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5025 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5026 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5027 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5028 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5029 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5031 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5032 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5033 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5034 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5035 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5036 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5037 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5038 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5039 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5041 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5042 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5043 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5044 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5045 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5046 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5047 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5048 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5049 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5051 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5052 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5053 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5054 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5055 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5056 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5057 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5058 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5059 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5062 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5063 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5064 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5065 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5066 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5067 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5068 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5069 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5070 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5072 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5073 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5074 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5075 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5076 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5077 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5078 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5079 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5080 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5082 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5083 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5084 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5085 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5086 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5087 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5088 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5089 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5090 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5092 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5093 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5094 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5095 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5096 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5097 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5098 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5099 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5100 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5103 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5104 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5105 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5106 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5107 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5108 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5109 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5110 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5111 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5113 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5114 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5115 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5116 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5117 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5118 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5119 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5120 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5121 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5123 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5124 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5125 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5126 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5127 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5128 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5129 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5130 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5131 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5133 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5134 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5135 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5136 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5137 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5138 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5139 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5140 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5141 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5144 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5145 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5146 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5147 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5148 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5149 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5150 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5151 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5152 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5154 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5155 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5156 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5157 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5158 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5159 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5160 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5161 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5162 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5164 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5165 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5166 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5167 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5168 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5169 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5170 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5171 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5172 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5174 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5175 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5176 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5177 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5178 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5179 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5180 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5181 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5182 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5185 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5186 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5187 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5188 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5189 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5190 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5191 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5192 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5193 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5195 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5196 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5197 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5198 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5199 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5200 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5201 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5202 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5203 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5205 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5206 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5207 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5208 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5209 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5210 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5211 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5212 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5213 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5215 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5216 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5217 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5218 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5219 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5220 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5221 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5222 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5223 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5226 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5227 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5228 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5229 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5230 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5231 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5232 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5233 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5234 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5236 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5237 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5238 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5239 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5240 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5241 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5242 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5243 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5244 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5246 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5247 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5248 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5249 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5250 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5251 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5252 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5253 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5254 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5256 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5257 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5258 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5259 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5260 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5261 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5262 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5263 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5264 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5267 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5270 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5279 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5280 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5281 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5284 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5285 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5286 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5287 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5289 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5290 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5291 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5293 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5294 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5297 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5300 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5302 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5303 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5304 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5306 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5307 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5308 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5309 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5310 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5311 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5312 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5315 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5318 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5321 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5324 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5327 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5330 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5333 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5336 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5339 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5340 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5341 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5342 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5344 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5345 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5346 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5347 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5348 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5350 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5351 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5352 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5353 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5356 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5359 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5360 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5361 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5362 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5363 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5364 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5365 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5366 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5367 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5368 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5369 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5370 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5371 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5372 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5373 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5374 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5375 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5376 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5377 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5378 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5379 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5380 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5381 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5382 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5385 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5386 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5387 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5388 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5389 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5390 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5391 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5392 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5393 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5394 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5395 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5396 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5397 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5400 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5401 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5402 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5403 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5404 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5405 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5406 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5407 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5408 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5409 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5410 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5411 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5412 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5413 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5414 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5415 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5416 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5417 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5418 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5419 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5420 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5421 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5422 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5423 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5426 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5429 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5439 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5441 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5442 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5443 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5445 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5446 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5447 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5449 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5450 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5451 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5453 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5455 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5456 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5457 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5459 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5460 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5463 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5465 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5466 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5467 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5469 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5470 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5471 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5473 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5474 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5475 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5477 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5479 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5480 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5481 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5483 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5484 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5487 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5489 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5490 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5491 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5493 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5494 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5495 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5497 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5498 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5499 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5501 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5503 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5504 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5505 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5507 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5508 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5511 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5513 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5514 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5515 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5517 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5518 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5519 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5521 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5522 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5523 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5525 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5527 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5528 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5529 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5531 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5532 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5535 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5537 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5538 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5539 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5541 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5542 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5543 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5545 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5546 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5547 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5549 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5551 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5552 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5553 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5555 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5556 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5559 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5561 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5562 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5563 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5565 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5566 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5567 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5569 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5570 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5571 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5573 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5575 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5576 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5577 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5579 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5580 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5583 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5585 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5586 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5587 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5589 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5590 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5591 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5593 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5594 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5595 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5597 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5599 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5600 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5601 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5603 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5604 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5607 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5609 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5610 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5611 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5613 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5614 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5615 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5617 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5618 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5619 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5621 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5623 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5624 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5625 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5627 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5628 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5632 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5633 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5634 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5635 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5636 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5637 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5638 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5639 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5640 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5641 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5642 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5643 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5644 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5647 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5648 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5649 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5650 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5651 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5652 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5653 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5654 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5655 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5656 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5659 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5660 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5661 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5662 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5663 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5666 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5667 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5668 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5669 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5670 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5671 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5672 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5673 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5675 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5678 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5682 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5685 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5688 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5691 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5694 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5697 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5700 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5703 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5708 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5711 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5714 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5717 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5720 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5723 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5726 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5729 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5734 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5737 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5740 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5743 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5746 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5749 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5752 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5755 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5758 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5761 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5764 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5767 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5770 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5773 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5776 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5779 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5784 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5787 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5790 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5793 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5796 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5799 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5802 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5805 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5810 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5812 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5813 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5814 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5815 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5816 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5817 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5819 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5822 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5824 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5825 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5826 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5827 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5828 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5829 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5831 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5834 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5836 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5837 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5838 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5839 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5840 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5841 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5843 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5846 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5848 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5849 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5850 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5851 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5852 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5853 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5855 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5858 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5860 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5861 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5862 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5863 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5864 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5865 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5867 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5870 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5872 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5873 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5874 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5875 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5876 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5877 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5879 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5882 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5884 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5885 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5886 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5887 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5888 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5889 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5891 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5894 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5896 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5897 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5898 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5899 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5900 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5901 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5903 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5908 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5910 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5911 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5912 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5913 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5914 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5915 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5917 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5920 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5922 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5923 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5924 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5925 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5926 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5927 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5929 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5932 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5934 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5935 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5936 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5937 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5938 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5939 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5941 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5944 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5946 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5947 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5948 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5949 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5950 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5951 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5953 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5956 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5958 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5959 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5960 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5961 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5962 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5963 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5965 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5968 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5970 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5971 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5972 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5973 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5974 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5975 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5977 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5980 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5982 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5983 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5984 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5985 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5986 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5987 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5989 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5992 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5994 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5995 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5996 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5997 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5998 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5999 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6001 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6004 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6006 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6007 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6008 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6009 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6010 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6011 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6013 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6016 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6018 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6019 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6020 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6021 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6022 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6023 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6025 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6028 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6030 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6031 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6032 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6033 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6034 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6035 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6037 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6040 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6042 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6043 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6044 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6045 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6046 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6047 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6049 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6052 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6054 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6055 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6056 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6057 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6058 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6059 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6061 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6064 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6066 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6067 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6068 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6069 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6070 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6071 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6073 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6076 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6078 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6079 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6080 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6081 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6082 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6083 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6085 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6088 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6090 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6091 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6092 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6093 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6094 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6095 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6097 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6107 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6108 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6109 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6110 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6111 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6112 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6113 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6114 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6115 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6118 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6119 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6120 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6121 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6122 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6123 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6124 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6125 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6126 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6129 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6130 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6131 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6132 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6133 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6134 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6135 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6136 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6137 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6138 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6139 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6140 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6141 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6142 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6143 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6144 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6146 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6147 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6148 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6149 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6151 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6152 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6153 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6154 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6157 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6158 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6159 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6160 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6163 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6164 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6165 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6166 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6169 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6170 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6171 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6172 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6173 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6174 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6175 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6176 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6177 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6178 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6179 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6180 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6181 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6182 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6185 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6186 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6187 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6189 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6190 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6191 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6192 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6194 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6195 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6198 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6199 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6200 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6201 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6202 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6203 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6207 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6208 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6209 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6210 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6211 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6214 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6215 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6216 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6219 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6220 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6221 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6222 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6225 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6226 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6227 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6228 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6231 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6232 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6233 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6234 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6235 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6238 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6239 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6240 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6243 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6244 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6245 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6246 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6249 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6250 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6251 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6252 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6255 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6256 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6257 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6258 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6259 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6262 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6263 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6264 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6267 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6268 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6269 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6270 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6273 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6274 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6275 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6276 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6279 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6280 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6281 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6282 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6285 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6286 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6287 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6290 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6291 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6292 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6293 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6296 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6297 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6298 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6299 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6302 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6303 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6304 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6305 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6308 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6309 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6310 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6313 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6314 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6315 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6316 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6319 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6320 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6321 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6322 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6326 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6329 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6330 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6331 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6332 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6333 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6334 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6335 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6336 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6337 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6338 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6339 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6340 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6341 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6342 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6343 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6346 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6347 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6348 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6349 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6350 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6351 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6352 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6353 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6354 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6355 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6356 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6357 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6358 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6359 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6360 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6363 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6364 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6365 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6366 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6367 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6368 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6369 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6370 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6371 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6372 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6373 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6374 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6375 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6376 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6377 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6380 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6381 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6382 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6383 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6384 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6385 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6386 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6387 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6388 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6389 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6390 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6391 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6392 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6393 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6394 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6397 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6398 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6399 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6400 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6401 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6402 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6403 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6404 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6405 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6406 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6407 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6408 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6409 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6410 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6411 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6412 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6413 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6414 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6415 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6416 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6417 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6418 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6419 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6420 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6421 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6422 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6423 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6424 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6425 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6426 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6427 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6428 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6431 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6432 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6433 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6434 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6435 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6436 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6437 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6438 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6439 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6440 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6441 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6442 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6443 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6444 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6445 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6446 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6447 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6448 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6449 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6450 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6451 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6452 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6453 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6454 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6455 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6456 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6457 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6458 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6459 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6460 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6461 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6462 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6465 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6466 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6467 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6468 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6469 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6470 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6471 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6472 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6473 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6474 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6475 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6476 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6477 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6478 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6479 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6480 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6481 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6482 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6483 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6484 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6485 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6486 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6487 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6488 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6489 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6490 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6491 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6492 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6493 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6494 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6495 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6496 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6499 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6500 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6501 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6502 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6503 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6504 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6505 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6506 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6507 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6508 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6509 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6510 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6511 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6512 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6513 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6514 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6515 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6516 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6517 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6518 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6519 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6520 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6521 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6522 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6523 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6524 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6525 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6526 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6527 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6528 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6529 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6530 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6533 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6534 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6535 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6536 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6537 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6538 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6539 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6540 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6541 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6542 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6543 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6544 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6545 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6546 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6547 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6548 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6549 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6550 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6551 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6552 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6553 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6554 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6555 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6556 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6557 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6558 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6559 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6560 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6561 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6562 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6563 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6564 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6567 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6568 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6569 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6570 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6571 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6572 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6573 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6574 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6575 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6576 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6577 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6578 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6579 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6580 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6581 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6582 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6583 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6584 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6585 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6586 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6587 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6588 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6589 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6590 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6591 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6592 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6593 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6594 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6595 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6596 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6597 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6598 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6601 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6602 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6603 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6604 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6605 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6606 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6607 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6608 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6609 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6610 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6611 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6612 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6613 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6614 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6615 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6616 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6617 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6618 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6619 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6620 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6621 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6622 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6623 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6624 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6625 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6626 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6627 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6628 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6629 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6630 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6631 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6632 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6635 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6636 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6637 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6638 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6639 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6640 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6641 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6642 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6643 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6644 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6645 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6646 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6647 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6648 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6649 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6650 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6651 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6652 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6653 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6654 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6655 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6656 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6657 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6658 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6659 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6660 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6661 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6662 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6663 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6664 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6665 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6666 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6669 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6670 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6671 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6672 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6673 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6674 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6675 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6676 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6677 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6678 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6679 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6680 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6681 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6682 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6683 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6684 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6685 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6686 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6687 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6688 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6689 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6690 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6691 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6692 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6693 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6694 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6695 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6696 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6697 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6698 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6699 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6700 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6703 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6704 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6705 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6706 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6707 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6708 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6709 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6710 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6711 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6712 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6713 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6714 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6715 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6716 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6717 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6718 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6719 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6720 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6721 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6722 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6723 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6724 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6725 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6726 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6727 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6728 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6729 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6730 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6731 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6732 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6733 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6734 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6737 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6738 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6739 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6740 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6741 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6742 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6743 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6744 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6745 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6746 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6747 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6748 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6749 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6750 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6751 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6752 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6753 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6754 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6755 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6756 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6757 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6758 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6759 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6760 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6761 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6762 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6763 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6764 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6765 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6766 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6767 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6768 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6771 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6772 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6773 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6774 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6775 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6776 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6777 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6778 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6779 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6780 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6781 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6782 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6783 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6784 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6785 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6786 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6787 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6788 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6789 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6790 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6791 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6792 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6793 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6794 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6795 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6796 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6797 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6798 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6799 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6800 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6801 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6802 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6805 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6806 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6807 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6808 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6809 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6810 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6811 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6812 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6813 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6814 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6815 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6816 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6817 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6818 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6819 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6820 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6821 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6822 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6823 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6824 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6825 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6826 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6827 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6828 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6829 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6830 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6831 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6832 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6833 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6834 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6835 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6836 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6839 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6840 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6841 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6842 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6843 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6844 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6845 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6846 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6847 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6848 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6849 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6850 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6851 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6852 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6853 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6854 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6855 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6856 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6857 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6858 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6859 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6860 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6861 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6862 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6863 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6864 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6865 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6866 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6867 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6868 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6869 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6870 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6873 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6874 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6875 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6876 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6877 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6878 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6879 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6880 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6881 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6882 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6883 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6884 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6885 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6886 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6887 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6888 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6889 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6890 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6891 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6892 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6893 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6894 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6895 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6896 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6897 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6898 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6899 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6900 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6901 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6902 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6903 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6904 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6907 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6908 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6909 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6910 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6911 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6912 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6913 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6914 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6915 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6916 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6917 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6918 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6919 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6920 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6921 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6922 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6923 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6924 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6925 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6926 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6927 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6928 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6929 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6930 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6931 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6932 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6933 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6934 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6935 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6936 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6937 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6938 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6941 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6942 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6943 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6944 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6945 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6946 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6947 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6948 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6949 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6950 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6951 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6952 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6953 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6954 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6955 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6956 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6957 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6958 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6959 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6960 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6961 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6962 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6963 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6964 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6965 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6966 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6967 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6968 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6969 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6970 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6971 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6972 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6975 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6976 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6977 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6978 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6979 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6980 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6981 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6982 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6983 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6984 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6985 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6986 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6987 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6988 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6989 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6990 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6991 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6992 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6993 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6994 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6995 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6996 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6997 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6998 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6999 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7000 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7001 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7002 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7003 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7004 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7005 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7006 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7009 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7010 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7011 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7012 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7013 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7014 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7015 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7016 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7017 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7018 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7019 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7020 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7021 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7022 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7023 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7024 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7025 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7026 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7027 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7028 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7029 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7030 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7031 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7032 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7033 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7034 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7035 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7036 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7037 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7038 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7039 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7040 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7043 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7044 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7045 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7046 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7047 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7048 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7049 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7050 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7051 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7052 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7053 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7054 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7055 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7056 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7057 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7058 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7059 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7060 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7061 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7062 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7063 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7064 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7065 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7066 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7067 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7068 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7069 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7070 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7071 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7072 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7073 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7074 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7077 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7078 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7079 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7080 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7081 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7082 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7083 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7084 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7085 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7086 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7087 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7088 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7089 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7090 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7091 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7092 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7093 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7094 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7095 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7096 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7097 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7098 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7099 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7100 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7101 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7102 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7103 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7104 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7105 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7106 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7107 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7108 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7111 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7112 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7113 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7114 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7115 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7116 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7117 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7118 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7119 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7120 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7121 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7122 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7123 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7124 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7125 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7126 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7127 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7128 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7129 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7130 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7131 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7132 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7133 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7134 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7135 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7136 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7137 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7138 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7139 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7140 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7141 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7142 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7145 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7146 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7147 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7148 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7149 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7150 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7151 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7152 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7153 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7154 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7155 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7156 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7157 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7158 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7159 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7160 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7161 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7162 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7163 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7164 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7165 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7166 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7167 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7168 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7169 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7170 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7171 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7172 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7173 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7174 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7175 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7176 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7179 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7180 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7181 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7182 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7183 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7184 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7185 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7186 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7187 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7188 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7189 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7190 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7191 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7192 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7193 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7194 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7195 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7196 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7197 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7198 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7199 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7200 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7201 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7202 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7203 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7204 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7205 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7206 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7207 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7208 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7209 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7210 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7213 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7214 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7215 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7216 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7217 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7218 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7219 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7220 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7221 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7222 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7223 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7224 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7225 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7226 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7227 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7228 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7229 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7230 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7231 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7232 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7233 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7234 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7235 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7236 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7237 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7238 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7239 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7240 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7241 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7242 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7243 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7244 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7247 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7248 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7249 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7250 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7251 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7252 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7253 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7254 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7255 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7256 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7257 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7258 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7259 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7260 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7261 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7262 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7263 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7264 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7265 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7266 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7267 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7268 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7269 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7270 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7271 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7272 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7273 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7274 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7275 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7276 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7277 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7278 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7281 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7282 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7283 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7284 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7285 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7286 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7287 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7288 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7289 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7290 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7291 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7292 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7293 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7294 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7295 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7296 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7297 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7298 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7299 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7300 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7301 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7302 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7303 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7304 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7305 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7306 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7307 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7308 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7309 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7310 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7311 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7312 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7315 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7316 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7317 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7318 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7319 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7320 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7321 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7322 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7323 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7324 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7325 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7326 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7327 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7328 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7329 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7330 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7331 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7332 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7333 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7334 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7335 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7336 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7337 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7338 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7339 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7340 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7341 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7342 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7343 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7344 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7345 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7346 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7355 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7356 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7357 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7359 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7360 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7361 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7362 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7364 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7365 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7366 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7367 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7368 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7369 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7370 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7371 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7372 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7373 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7376 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7377 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7378 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7379 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7380 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7381 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7384 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7385 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7386 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7387 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7388 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7389 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7390 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7391 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7394 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7397 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7400 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7403 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7406 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7408 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7409 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7410 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7412 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7414 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7415 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7416 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7418 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7420 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7421 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7422 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7424 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7425 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7428 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7429 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7430 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7439 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7440 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7441 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7442 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7443 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7444 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7445 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7446 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7447 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7448 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7449 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7450 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7451 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7452 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7455 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7456 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7457 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7458 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7459 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7460 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7461 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7463 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7464 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7465 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7466 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7467 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7470 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7471 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7473 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7474 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7475 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7476 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7477 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7478 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7479 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7480 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7481 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7482 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7484 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7487 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7488 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7491 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7494 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7495 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7496 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7497 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7498 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7499 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7500 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7501 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7502 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7503 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7504 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7505 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7506 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7507 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7510 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7511 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7512 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7513 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7514 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7515 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7516 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7517 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7520 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7521 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7522 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7525 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7534 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7535 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7536 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7537 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7538 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7539 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7540 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7541 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7542 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7543 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7546 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7549 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7550 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7553 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7554 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7555 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7556 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7557 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7558 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7559 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7560 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7561 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7562 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7563 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7564 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7565 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7566 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7567 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7570 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7571 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7572 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7573 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7574 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7575 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7576 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7578 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7579 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7580 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7582 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7585 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7586 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7587 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7588 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7589 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7590 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7591 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7592 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7593 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7594 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7595 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7596 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7599 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7600 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7601 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7602 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7603 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7604 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7605 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7606 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7607 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7609 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7618 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7620 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7621 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7622 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7623 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7624 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7625 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7626 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7627 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7628 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7629 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7630 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7631 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7632 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7633 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7634 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7635 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7636 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7639 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7640 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7641 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7642 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7644 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7645 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7646 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7648 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7649 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7650 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7651 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7652 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7653 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7654 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7655 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7656 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7657 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7658 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7659 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7660 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7661 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7662 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7663 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7664 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7665 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7666 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7667 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7668 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7669 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7670 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7679 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7680 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7681 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7682 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7684 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7685 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7686 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7689 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7692 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7695 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7696 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7697 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7698 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7701 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7702 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7703 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7704 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7705 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7706 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7707 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7708 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7709 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7710 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7713 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7716 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7717 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7719 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7720 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7721 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7722 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7723 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7726 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7731 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7732 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7735 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7736 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7739 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7740 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7743 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7744 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7747 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7748 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7751 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7752 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7755 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7756 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7759 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7760 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7762 #ifde‡
STM32F10X_CL


7767 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7768 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7769 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7770 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7771 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7772 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7773 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7774 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7775 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7776 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7777 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7778 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7779 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7780 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7781 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7782 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7783 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7784 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7785 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7786 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7788 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7789 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7790 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7791 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7792 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7793 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7794 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7797 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7798 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7799 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7800 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7801 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7802 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7803 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7804 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7805 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7806 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7807 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7808 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7809 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7810 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7813 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7816 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7819 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7820 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7821 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7822 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7823 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7824 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7825 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7826 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7829 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7832 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7833 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7834 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7835 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7836 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7837 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7838 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7839 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7840 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7841 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7842 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7845 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7846 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7849 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7863 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7864 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7865 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7866 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7867 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7868 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7869 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7872 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7873 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7874 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7875 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7876 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7879 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7880 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7883 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7886 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7889 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7890 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7891 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7892 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7893 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7894 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7895 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7896 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7897 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7898 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7901 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7904 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7905 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7906 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7907 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7908 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7909 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7910 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7911 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7912 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7913 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7916 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7919 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7920 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7921 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7922 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7923 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7924 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7925 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7926 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7927 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7928 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7931 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7938 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7939 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7940 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7941 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7944 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7945 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7946 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7949 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7950 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7951 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7954 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7955 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7956 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7959 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7960 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7961 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7964 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7967 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7970 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7973 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7976 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7979 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7986 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7987 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7988 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7989 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7990 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7991 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7994 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7997 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8000 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8001 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8004 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8007 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8008 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8011 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8014 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8017 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8024 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8025 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8026 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8027 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8028 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8029 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8030 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8031 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8032 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8033 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8034 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8035 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8036 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8037 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8038 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8039 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8040 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8041 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8042 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8043 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8044 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8045 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8046 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8047 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8048 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8049 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8050 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8051 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8052 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8053 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8054 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8055 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8056 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8057 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8058 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8059 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8060 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8061 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8064 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8067 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8070 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8073 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8076 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8077 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8078 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8079 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8081 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8082 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8083 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8084 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8085 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8086 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8087 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8088 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8089 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8090 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8091 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8092 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8093 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8094 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8095 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8096 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8097 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8098 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8099 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8100 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8101 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8102 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8103 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8104 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8105 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8106 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8107 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8108 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8109 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8110 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8111 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8112 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8115 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8116 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8117 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8118 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8119 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8120 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8121 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8122 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8123 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8124 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8125 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8126 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8127 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8128 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8129 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8130 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8131 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8132 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8133 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8134 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8135 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8136 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8137 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8138 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8141 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8142 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8143 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8144 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8145 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8146 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8147 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8148 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8149 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8150 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8151 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8152 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8153 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8154 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8155 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8158 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8159 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8160 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8161 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8164 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8167 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8170 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8173 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8184 #ifde‡
USE_STDPERIPH_DRIVER


8185 
	~"°m32f10x_c⁄f.h
"

8192 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8194 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8196 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8198 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8200 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8202 
	#READ_REG
(
REG
Ë((REG))

	)

8204 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8210 #ifde‡
__˝lu•lus


	@CM3/system_stm32f10x.c

33 
	~"°m32f10x.h
"

74 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
)

76 
	#SYSCLK_FREQ_24MHz
 24000000

	)

83 
	#SYSCLK_FREQ_72MHz
 72000000

	)

88 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
)

111 #ifde‡
SYSCLK_FREQ_HSE


112 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

113 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


114 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

115 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


116 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

117 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


118 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

119 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


120 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

121 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


122 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

124 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VÆue
;

127 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

136 
SëSysClock
();

138 #ifde‡
SYSCLK_FREQ_HSE


139 
SëSysClockToHSE
();

140 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


141 
SëSysClockTo24
();

142 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


143 
SëSysClockTo36
();

144 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


145 
SëSysClockTo48
();

146 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


147 
SëSysClockTo56
();

148 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


149 
SëSysClockTo72
();

152 #ifde‡
DATA_IN_ExtSRAM


153 
Sy°emInô_ExtMemCé
();

172 
	$Sy°emInô
 ()

176 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

179 #i‚de‡
STM32F10X_CL


180 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

182 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

186 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

189 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

192 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

194 #ifde‡
STM32F10X_CL


196 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

199 
RCC
->
CIR
 = 0x00FF0000;

202 
RCC
->
CFGR2
 = 0x00000000;

203 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

205 
RCC
->
CIR
 = 0x009F0000;

208 
RCC
->
CFGR2
 = 0x00000000;

211 
RCC
->
CIR
 = 0x009F0000;

214 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
)

215 #ifde‡
DATA_IN_ExtSRAM


216 
	`Sy°emInô_ExtMemCé
();

222 
	`SëSysClock
();

223 
	}
}

231 
	$Sy°emC‹eClockUpd©e
 ()

233 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

235 #ifde‡ 
STM32F10X_CL


236 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

239 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

240 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

244 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

246 
tmp
)

249 
Sy°emC‹eClock
 = 
HSI_VÆue
;

252 
Sy°emC‹eClock
 = 
HSE_VÆue
;

257 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

258 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

260 #i‚de‡
STM32F10X_CL


261 
∂lmuŒ
 = (Öllmull >> 18) + 2;

263 i‡(
∂lsour˚
 == 0x00)

266 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

270 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

271 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

273 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

276 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

278 
Sy°emC‹eClock
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

282 
Sy°emC‹eClock
 = 
HSE_VÆue
 * 
∂lmuŒ
;

287 
∂lmuŒ
 =Öllmull >> 18;

289 i‡(
∂lmuŒ
 != 0x0D)

291 
∂lmuŒ
 += 2;

295 
∂lmuŒ
 = 13 / 2;

298 i‡(
∂lsour˚
 == 0x00)

301 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

307 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

308 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

310 i‡(
¥ediv1sour˚
 == 0)

313 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

319 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

320 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

321 
Sy°emC‹eClock
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

328 
Sy°emC‹eClock
 = 
HSI_VÆue
;

334 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

336 
Sy°emC‹eClock
 >>
tmp
;

337 
	}
}

344 
	$SëSysClock
()

346 #ifde‡
SYSCLK_FREQ_HSE


347 
	`SëSysClockToHSE
();

348 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


349 
	`SëSysClockTo24
();

350 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


351 
	`SëSysClockTo36
();

352 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


353 
	`SëSysClockTo48
();

354 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


355 
	`SëSysClockTo56
();

356 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


357 
	`SëSysClockTo72
();

362 
	}
}

370 #ifde‡
DATA_IN_ExtSRAM


380 
	$Sy°emInô_ExtMemCé
()

386 
RCC
->
AHBENR
 = 0x00000114;

389 
RCC
->
APB2ENR
 = 0x000001E0;

397 
GPIOD
->
CRL
 = 0x44BB44BB;

398 
GPIOD
->
CRH
 = 0xBBBBBBBB;

400 
GPIOE
->
CRL
 = 0xB44444BB;

401 
GPIOE
->
CRH
 = 0xBBBBBBBB;

403 
GPIOF
->
CRL
 = 0x44BBBBBB;

404 
GPIOF
->
CRH
 = 0xBBBB4444;

406 
GPIOG
->
CRL
 = 0x44BBBBBB;

407 
GPIOG
->
CRH
 = 0x44444B44;

412 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

413 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

414 
	}
}

417 #ifde‡
SYSCLK_FREQ_HSE


425 
	$SëSysClockToHSE
()

427 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

431 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

436 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

437 
SèπUpCou¡î
++;

438 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

440 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

442 
HSESètus
 = (
uöt32_t
)0x01;

446 
HSESètus
 = (
uöt32_t
)0x00;

449 i‡(
HSESètus
 =(
uöt32_t
)0x01)

452 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


454 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

457 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

459 #i‚de‡
STM32F10X_CL


460 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

462 i‡(
HSE_VÆue
 <= 24000000)

464 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

468 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

474 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

477 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

480 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

483 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

484 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

487 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

495 
	}
}

496 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


504 
	$SëSysClockTo24
()

506 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

510 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

515 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

516 
SèπUpCou¡î
++;

517 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

519 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

521 
HSESètus
 = (
uöt32_t
)0x01;

525 
HSESètus
 = (
uöt32_t
)0x00;

528 i‡(
HSESètus
 =(
uöt32_t
)0x01)

530 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


532 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

535 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

536 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

540 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

543 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

546 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

548 #ifde‡
STM32F10X_CL


551 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

552 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

553 
RCC_CFGR_PLLMULL6
);

557 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

558 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

559 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

560 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

563 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

565 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

568 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

570 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

571 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

574 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

575 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

579 
RCC
->
CR
 |
RCC_CR_PLLON
;

582 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

587 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

588 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

591 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

599 
	}
}

600 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


608 
	$SëSysClockTo36
()

610 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

614 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

619 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

620 
SèπUpCou¡î
++;

621 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

623 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

625 
HSESètus
 = (
uöt32_t
)0x01;

629 
HSESètus
 = (
uöt32_t
)0x00;

632 i‡(
HSESètus
 =(
uöt32_t
)0x01)

635 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

638 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

639 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

642 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

645 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

648 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

650 #ifde‡
STM32F10X_CL


654 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

655 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

656 
RCC_CFGR_PLLMULL9
);

661 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

662 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

663 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

664 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

667 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

669 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

675 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

676 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

680 
RCC
->
CR
 |
RCC_CR_PLLON
;

683 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

688 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

689 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

692 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

700 
	}
}

701 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


709 
	$SëSysClockTo48
()

711 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

715 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

720 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

721 
SèπUpCou¡î
++;

722 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

724 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

726 
HSESètus
 = (
uöt32_t
)0x01;

730 
HSESètus
 = (
uöt32_t
)0x00;

733 i‡(
HSESètus
 =(
uöt32_t
)0x01)

736 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

739 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

740 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

743 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

746 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

749 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

751 #ifde‡
STM32F10X_CL


756 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

757 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

758 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

759 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

762 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

764 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

770 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

771 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

772 
RCC_CFGR_PLLMULL6
);

775 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

776 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

780 
RCC
->
CR
 |
RCC_CR_PLLON
;

783 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

788 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

789 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

792 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

800 
	}
}

802 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


810 
	$SëSysClockTo56
()

812 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

816 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

821 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

822 
SèπUpCou¡î
++;

823 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

825 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

827 
HSESètus
 = (
uöt32_t
)0x01;

831 
HSESètus
 = (
uöt32_t
)0x00;

834 i‡(
HSESètus
 =(
uöt32_t
)0x01)

837 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

840 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

841 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

844 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

847 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

850 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

852 #ifde‡
STM32F10X_CL


857 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

858 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

859 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

860 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

863 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

865 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

871 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

872 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

873 
RCC_CFGR_PLLMULL7
);

876 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

877 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

882 
RCC
->
CR
 |
RCC_CR_PLLON
;

885 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

890 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

891 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

894 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

902 
	}
}

904 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


912 
	$SëSysClockTo72
()

914 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

918 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

923 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

924 
SèπUpCou¡î
++;

925 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

927 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

929 
HSESètus
 = (
uöt32_t
)0x01;

933 
HSESètus
 = (
uöt32_t
)0x00;

936 i‡(
HSESètus
 =(
uöt32_t
)0x01)

939 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

942 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

943 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

947 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

950 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

953 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

955 #ifde‡
STM32F10X_CL


960 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

961 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

962 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

963 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

966 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

968 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

974 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

975 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

976 
RCC_CFGR_PLLMULL9
);

979 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

980 
RCC_CFGR_PLLMULL
));

981 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

985 
RCC
->
CR
 |
RCC_CR_PLLON
;

988 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

993 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

994 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

997 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1005 
	}
}

	@CM3/system_stm32f10x.h

32 #i‚de‡
__SYSTEM_STM32F10X_H


33 
	#__SYSTEM_STM32F10X_H


	)

35 #ifde‡
__˝lu•lus


52 
uöt32_t
 
Sy°emC‹eClock
;

78 
Sy°emInô
();

79 
Sy°emC‹eClockUpd©e
();

84 #ifde‡
__˝lu•lus


	@FWlib/SRC/misc.c

23 
	~"misc.h
"

46 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

95 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

98 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

101 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

102 
	}
}

111 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

113 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

116 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

117 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

118 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

120 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

123 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

124 
tmµª
 = (0x4 - 
tmµri‹ôy
);

125 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

127 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

128 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

129 
tmµri‹ôy
 =Åmppriority << 0x04;

131 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

134 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

135 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

140 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

141 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

143 
	}
}

154 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

157 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

158 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

160 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

161 
	}
}

173 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

179 i‡(
NewSèã
 !
DISABLE
)

181 
SCB
->
SCR
 |
LowPowîMode
;

185 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

187 
	}
}

197 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

200 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

201 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

203 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

207 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

209 
	}
}

	@FWlib/SRC/stm32f10x_adc.c

22 
	~"°m32f10x_adc.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

50 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

51 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

54 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

55 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

58 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

59 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

62 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

65 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

71 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

72 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

75 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

76 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

79 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

82 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

85 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

88 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

89 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

92 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

93 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

96 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

99 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

100 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

103 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

106 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

110 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

111 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

114 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

117 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

118 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

122 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

125 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

128 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

129 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

133 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

136 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

139 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

178 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

181 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

183 i‡(
ADCx
 =
ADC1
)

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

188 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

190 i‡(
ADCx
 =
ADC2
)

193 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

199 i‡(
ADCx
 =
ADC3
)

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

207 
	}
}

217 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

219 
uöt32_t
 
tm¥eg1
 = 0;

220 
uöt8_t
 
tm¥eg2
 = 0;

222 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

223 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

224 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

227 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

228 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

232 
tm¥eg1
 = 
ADCx
->
CR1
;

234 
tm¥eg1
 &
CR1_CLEAR_Mask
;

238 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

240 
ADCx
->
CR1
 = 
tm¥eg1
;

244 
tm¥eg1
 = 
ADCx
->
CR2
;

246 
tm¥eg1
 &
CR2_CLEAR_Mask
;

251 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

252 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

254 
ADCx
->
CR2
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
SQR1
;

260 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

263 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

264 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

266 
ADCx
->
SQR1
 = 
tm¥eg1
;

267 
	}
}

274 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

278 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

280 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

282 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

284 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

286 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

288 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

289 
	}
}

298 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

301 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 i‡(
NewSèã
 !
DISABLE
)

306 
ADCx
->
CR2
 |
CR2_ADON_Së
;

311 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

313 
	}
}

323 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
ADCx
->
CR2
 |
CR2_DMA_Së
;

336 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

338 
	}
}

352 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
uöt8_t
 
ômask
 = 0;

356 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

360 
ômask
 = (
uöt8_t
)
ADC_IT
;

361 i‡(
NewSèã
 !
DISABLE
)

364 
ADCx
->
CR1
 |
ômask
;

369 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

371 
	}
}

378 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

381 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

383 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

384 
	}
}

391 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

393 
FœgSètus
 
bô°©us
 = 
RESET
;

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

397 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

400 
bô°©us
 = 
SET
;

405 
bô°©us
 = 
RESET
;

408  
bô°©us
;

409 
	}
}

416 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

419 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

421 
ADCx
->
CR2
 |
CR2_CAL_Së
;

422 
	}
}

429 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

431 
FœgSètus
 
bô°©us
 = 
RESET
;

433 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

435 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

438 
bô°©us
 = 
SET
;

443 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

456 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

461 i‡(
NewSèã
 !
DISABLE
)

465 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

471 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

473 
	}
}

480 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

482 
FœgSètus
 
bô°©us
 = 
RESET
;

484 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

486 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

489 
bô°©us
 = 
SET
;

494 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

508 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

510 
uöt32_t
 
tm¥eg1
 = 0;

511 
uöt32_t
 
tm¥eg2
 = 0;

513 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

514 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

516 
tm¥eg1
 = 
ADCx
->
CR1
;

518 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

520 
tm¥eg2
 = 
Numbî
 - 1;

521 
tm¥eg1
 |
tm¥eg2
 << 13;

523 
ADCx
->
CR1
 = 
tm¥eg1
;

524 
	}
}

535 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 !
DISABLE
)

543 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

548 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

550 
	}
}

589 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

591 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

593 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

594 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

596 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

598 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

601 
tm¥eg1
 = 
ADCx
->
SMPR1
;

603 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

605 
tm¥eg1
 &~
tm¥eg2
;

607 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

609 
tm¥eg1
 |
tm¥eg2
;

611 
ADCx
->
SMPR1
 = 
tm¥eg1
;

616 
tm¥eg1
 = 
ADCx
->
SMPR2
;

618 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

620 
tm¥eg1
 &~
tm¥eg2
;

622 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

624 
tm¥eg1
 |
tm¥eg2
;

626 
ADCx
->
SMPR2
 = 
tm¥eg1
;

629 i‡(
R™k
 < 7)

632 
tm¥eg1
 = 
ADCx
->
SQR3
;

634 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

636 
tm¥eg1
 &~
tm¥eg2
;

638 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

640 
tm¥eg1
 |
tm¥eg2
;

642 
ADCx
->
SQR3
 = 
tm¥eg1
;

645 i‡(
R™k
 < 13)

648 
tm¥eg1
 = 
ADCx
->
SQR2
;

650 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

652 
tm¥eg1
 &~
tm¥eg2
;

654 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

656 
tm¥eg1
 |
tm¥eg2
;

658 
ADCx
->
SQR2
 = 
tm¥eg1
;

664 
tm¥eg1
 = 
ADCx
->
SQR1
;

666 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

668 
tm¥eg1
 &~
tm¥eg2
;

670 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

672 
tm¥eg1
 |
tm¥eg2
;

674 
ADCx
->
SQR1
 = 
tm¥eg1
;

676 
	}
}

685 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

688 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

689 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

690 i‡(
NewSèã
 !
DISABLE
)

693 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

698 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

700 
	}
}

707 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

710 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

712  (
uöt16_t
Ë
ADCx
->
DR
;

713 
	}
}

719 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

722  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

723 
	}
}

733 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

736 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

737 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

738 i‡(
NewSèã
 !
DISABLE
)

741 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

746 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

748 
	}
}

759 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

772 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

774 
	}
}

798 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

800 
uöt32_t
 
tm¥eg
 = 0;

802 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

803 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

805 
tm¥eg
 = 
ADCx
->
CR2
;

807 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

809 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

811 
ADCx
->
CR2
 = 
tm¥eg
;

812 
	}
}

823 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

826 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

827 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

828 i‡(
NewSèã
 !
DISABLE
)

831 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

836 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

838 
	}
}

848 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

851 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

852 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

853 i‡(
NewSèã
 !
DISABLE
)

857 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

863 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

865 
	}
}

872 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

874 
FœgSètus
 
bô°©us
 = 
RESET
;

876 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

878 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

881 
bô°©us
 = 
SET
;

886 
bô°©us
 = 
RESET
;

889  
bô°©us
;

890 
	}
}

929 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

931 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

933 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

934 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

935 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

936 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

938 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

941 
tm¥eg1
 = 
ADCx
->
SMPR1
;

943 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

945 
tm¥eg1
 &~
tm¥eg2
;

947 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

949 
tm¥eg1
 |
tm¥eg2
;

951 
ADCx
->
SMPR1
 = 
tm¥eg1
;

956 
tm¥eg1
 = 
ADCx
->
SMPR2
;

958 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

960 
tm¥eg1
 &~
tm¥eg2
;

962 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

964 
tm¥eg1
 |
tm¥eg2
;

966 
ADCx
->
SMPR2
 = 
tm¥eg1
;

970 
tm¥eg1
 = 
ADCx
->
JSQR
;

972 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

974 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

976 
tm¥eg1
 &~
tm¥eg2
;

978 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

980 
tm¥eg1
 |
tm¥eg2
;

982 
ADCx
->
JSQR
 = 
tm¥eg1
;

983 
	}
}

992 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

994 
uöt32_t
 
tm¥eg1
 = 0;

995 
uöt32_t
 
tm¥eg2
 = 0;

997 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

998 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1001 
tm¥eg1
 = 
ADCx
->
JSQR
;

1003 
tm¥eg1
 &
JSQR_JL_Re£t
;

1005 
tm¥eg2
 = 
Lígth
 - 1;

1006 
tm¥eg1
 |
tm¥eg2
 << 20;

1008 
ADCx
->
JSQR
 = 
tm¥eg1
;

1009 
	}
}

1024 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1026 
__IO
 
uöt32_t
 
tmp
 = 0;

1029 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1030 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1031 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1033 
tmp
 = (
uöt32_t
)
ADCx
;

1034 
tmp
 +
ADC_Inje˘edCh™√l
;

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1038 
	}
}

1051 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1053 
__IO
 
uöt32_t
 
tmp
 = 0;

1056 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1057 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1059 
tmp
 = (
uöt32_t
)
ADCx
;

1060 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1063  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1064 
	}
}

1081 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1083 
uöt32_t
 
tm¥eg
 = 0;

1085 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1086 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1088 
tm¥eg
 = 
ADCx
->
CR1
;

1090 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1092 
tm¥eg
 |
ADC_A«logW©chdog
;

1094 
ADCx
->
CR1
 = 
tm¥eg
;

1095 
	}
}

1106 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1107 
uöt16_t
 
LowThªshﬁd
)

1110 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1111 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1114 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1116 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1117 
	}
}

1144 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1146 
uöt32_t
 
tm¥eg
 = 0;

1148 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1149 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1151 
tm¥eg
 = 
ADCx
->
CR1
;

1153 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1155 
tm¥eg
 |
ADC_Ch™√l
;

1157 
ADCx
->
CR1
 = 
tm¥eg
;

1158 
	}
}

1166 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1169 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1170 i‡(
NewSèã
 !
DISABLE
)

1173 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1178 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1180 
	}
}

1194 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1198 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1199 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1201 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1204 
bô°©us
 = 
SET
;

1209 
bô°©us
 = 
RESET
;

1212  
bô°©us
;

1213 
	}
}

1227 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1230 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1231 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1233 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1234 
	}
}

1246 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1251 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1252 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1254 
ômask
 = 
ADC_IT
 >> 8;

1256 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1258 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1261 
bô°©us
 = 
SET
;

1266 
bô°©us
 = 
RESET
;

1269  
bô°©us
;

1270 
	}
}

1282 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1284 
uöt8_t
 
ômask
 = 0;

1286 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1287 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1289 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1291 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1292 
	}
}

	@FWlib/SRC/stm32f10x_bkp.c

22 
	~"°m32f10x_bkp.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

53 
	#TPAL_BôNumbî
 0x01

	)

54 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

57 
	#TPE_BôNumbî
 0x00

	)

58 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

64 
	#TPIE_BôNumbî
 0x02

	)

65 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

68 
	#TIF_BôNumbî
 0x09

	)

69 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

72 
	#TEF_BôNumbî
 0x08

	)

73 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

78 
	#RTCCR_CAL_Mask
 ((
uöt16_t
)0xFF80)

	)

79 
	#RTCCR_Mask
 ((
uöt16_t
)0xFC7F)

	)

82 
	#CSR_CTE_Së
 ((
uöt16_t
)0x0001)

	)

83 
	#CSR_CTI_Së
 ((
uöt16_t
)0x0002)

	)

123 
	$BKP_DeInô
()

125 
	`RCC_BackupRe£tCmd
(
ENABLE
);

126 
	`RCC_BackupRe£tCmd
(
DISABLE
);

127 
	}
}

137 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

140 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

142 
	}
}

150 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

153 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

154 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

155 
	}
}

163 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

167 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

168 
	}
}

183 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

185 
uöt16_t
 
tm¥eg
 = 0;

187 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

188 
tm¥eg
 = 
BKP
->
RTCCR
;

190 
tm¥eg
 &
RTCCR_Mask
;

193 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

195 
BKP
->
RTCCR
 = 
tm¥eg
;

196 
	}
}

204 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

206 
uöt16_t
 
tm¥eg
 = 0;

208 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

209 
tm¥eg
 = 
BKP
->
RTCCR
;

211 
tm¥eg
 &
RTCCR_CAL_Mask
;

213 
tm¥eg
 |
CÆibøti⁄VÆue
;

215 
BKP
->
RTCCR
 = 
tm¥eg
;

216 
	}
}

225 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

227 
__IO
 
uöt32_t
 
tmp
 = 0;

230 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

232 
tmp
 = (
uöt32_t
)
BKP_BASE
;

233 
tmp
 +
BKP_DR
;

235 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

236 
	}
}

244 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

246 
__IO
 
uöt32_t
 
tmp
 = 0;

249 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

251 
tmp
 = (
uöt32_t
)
BKP_BASE
;

252 
tmp
 +
BKP_DR
;

254  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

255 
	}
}

262 
FœgSètus
 
	$BKP_GëFœgSètus
()

264  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

265 
	}
}

272 
	$BKP_CÀ¨Fœg
()

275 
BKP
->
CSR
 |
CSR_CTE_Së
;

276 
	}
}

283 
ITSètus
 
	$BKP_GëITSètus
()

285  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

286 
	}
}

293 
	$BKP_CÀ¨ITPídögBô
()

296 
BKP
->
CSR
 |
CSR_CTI_Së
;

297 
	}
}

	@FWlib/SRC/stm32f10x_can.c

22 
	~"°m32f10x_ˇn.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

48 
	#MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

49 
	#MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

50 
	#MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

51 
	#MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

52 
	#MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

53 
	#MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

54 
	#MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

55 
	#MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

56 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

59 
	#MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

60 
	#MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

61 
	#MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

64 
	#TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

65 
	#TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

66 
	#TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

67 
	#TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

68 
	#TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

69 
	#TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

70 
	#TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

71 
	#TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

72 
	#TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

73 
	#TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

74 
	#TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

75 
	#TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

78 
	#RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

79 
	#RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

80 
	#RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

83 
	#RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

84 
	#RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

85 
	#RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

88 
	#ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

89 
	#ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

90 
	#ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

96 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

99 
	#INAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

102 
	#SLAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

128 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

143 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

146 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

148 i‡(
CANx
 =
CAN1
)

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

162 
	}
}

173 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

175 
uöt8_t
 
InôSètus
 = 
CANINITFAILED
;

176 
uöt32_t
 
waô_ack
 = 0x00000000;

178 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

185 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

186 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

187 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

188 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

189 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

192 
CANx
->
MCR
 &~
MCR_SLEEP
;

195 
CANx
->
MCR
 |
MCR_INRQ
 ;

198 ((
CANx
->
MSR
 & 
MSR_INAK
Ë!MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

200 
waô_ack
++;

204 i‡((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK)

206 
InôSètus
 = 
CANINITFAILED
;

211 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

213 
CANx
->
MCR
 |
MCR_TTCM
;

217 
CANx
->
MCR
 &~
MCR_TTCM
;

221 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

223 
CANx
->
MCR
 |
MCR_ABOM
;

227 
CANx
->
MCR
 &~
MCR_ABOM
;

231 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

233 
CANx
->
MCR
 |
MCR_AWUM
;

237 
CANx
->
MCR
 &~
MCR_AWUM
;

241 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

243 
CANx
->
MCR
 |
MCR_NART
;

247 
CANx
->
MCR
 &~
MCR_NART
;

251 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

253 
CANx
->
MCR
 |
MCR_RFLM
;

257 
CANx
->
MCR
 &~
MCR_RFLM
;

261 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

263 
CANx
->
MCR
 |
MCR_TXFP
;

267 
CANx
->
MCR
 &~
MCR_TXFP
;

271 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_SJW
 << 24) |

272 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_BS2
 << 20) |

273 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

276 
CANx
->
MCR
 &~
MCR_INRQ
;

279 
waô_ack
 = 0x00;

281 ((
CANx
->
MSR
 & 
MSR_INAK
Ë=MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

283 
waô_ack
++;

287 i‡((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK)

289 
InôSètus
 = 
CANINITFAILED
;

293 
InôSètus
 = 
CANINITOK
 ;

298  
InôSètus
;

299 
	}
}

308 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

310 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

312 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

313 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

314 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

315 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

316 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

318 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)0x00000001Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

321 
CAN1
->
FMR
 |
FMR_FINIT
;

324 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

327 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

330 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

340 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

341 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

342 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

345 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

348 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

350 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

351 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

352 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

354 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

355 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

356 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

360 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

363 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

368 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

372 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO0
)

375 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

378 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO1
)

381 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

385 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

387 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

391 
CAN1
->
FMR
 &~
FMR_FINIT
;

392 
	}
}

400 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

404 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

406 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

408 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

410 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

412 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

414 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

416 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

418 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

420 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

422 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

424 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

425 
	}
}

433 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

436 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

438 
CAN1
->
FMR
 |
FMR_FINIT
;

440 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

441 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

443 
CAN1
->
FMR
 &~
FMR_FINIT
;

444 
	}
}

459 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

462 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

463 
	`as£π_∑øm
(
	`IS_CAN_ITC⁄fig
(
CAN_IT
));

464 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

466 i‡(
NewSèã
 !
DISABLE
)

469 
CANx
->
IER
 |
CAN_IT
;

474 
CANx
->
IER
 &~
CAN_IT
;

476 
	}
}

486 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

488 
uöt8_t
 
å™smô_maûbox
 = 0;

490 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

491 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

492 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

493 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

496 i‡((
CANx
->
TSR
&
TSR_TME0
) == TSR_TME0)

498 
å™smô_maûbox
 = 0;

500 i‡((
CANx
->
TSR
&
TSR_TME1
) == TSR_TME1)

502 
å™smô_maûbox
 = 1;

504 i‡((
CANx
->
TSR
&
TSR_TME2
) == TSR_TME2)

506 
å™smô_maûbox
 = 2;

510 
å™smô_maûbox
 = 
CAN_NO_MB
;

513 i‡(
å™smô_maûbox
 !
CAN_NO_MB
)

516 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

517 i‡(
TxMesßge
->
IDE
 =
CAN_ID_STD
)

519 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

520 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21Ë| TxMesßge->
RTR
);

524 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

525 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
<<3Ë| TxMesßge->
IDE
 |

526 
TxMesßge
->
RTR
);

531 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

532 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

533 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

536 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

537 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

538 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

539 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

540 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

541 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

542 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

543 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

547  
å™smô_maûbox
;

548 
	}
}

556 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

559 
uöt8_t
 
°©e
 = 0;

561 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

562 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

563 
TønsmôMaûbox
)

565 (0): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP0
) << 2);

566 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK0
) >> 0);

567 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME0
) >> 26);

569 (1): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP1
) >> 6);

570 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK1
) >> 8);

571 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME1
) >> 27);

573 (2): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP2
) >> 14);

574 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK2
) >> 16);

575 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME2
) >> 28);

578 
°©e
 = 
CANTXFAILED
;

581 
°©e
)

584 (0x0): 
°©e
 = 
CANTXPENDING
;

587 (0x5): 
°©e
 = 
CANTXFAILED
;

590 (0x7): 
°©e
 = 
CANTXOK
;

593 
°©e
 = 
CANTXFAILED
;

596  
°©e
;

597 
	}
}

605 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

608 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

609 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

611 
Maûbox
)

613 (0): 
CANx
->
TSR
 |
TSR_ABRQ0
;

615 (1): 
CANx
->
TSR
 |
TSR_ABRQ1
;

617 (2): 
CANx
->
TSR
 |
TSR_ABRQ2
;

622 
	}
}

630 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

633 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

634 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

636 i‡(
FIFONumbî
 =
CAN_FIFO0
)

638 
CANx
->
RF0R
 = 
RF0R_RFOM0
;

643 
CANx
->
RF1R
 = 
RF1R_RFOM1
;

645 
	}
}

653 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

655 
uöt8_t
 
mesßge_≥ndög
=0;

657 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

658 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

659 i‡(
FIFONumbî
 =
CAN_FIFO0
)

661 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

663 i‡(
FIFONumbî
 =
CAN_FIFO1
)

665 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

669 
mesßge_≥ndög
 = 0;

671  
mesßge_≥ndög
;

672 
	}
}

682 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

685 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

686 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

688 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 i‡(
RxMesßge
->
IDE
 =
CAN_ID_STD
)

691 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

695 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

698 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

700 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

702 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

704 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

705 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

706 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

707 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

708 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

709 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

710 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

711 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

713 
	`CAN_FIFORñó£
(
CANx
, 
FIFONumbî
);

714 
	}
}

723 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

727 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

729 i‡(
NewSèã
 !
DISABLE
)

732 
CANx
->
MCR
 |
MCR_DBF
;

737 
CANx
->
MCR
 &~
MCR_DBF
;

739 
	}
}

746 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

748 
uöt8_t
 
¶ìp°©us
 = 
CANSLEEPFAILED
;

751 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

754 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~
MCR_INRQ
)Ë| 
MCR_SLEEP
);

757 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

760 
¶ìp°©us
 = 
CANSLEEPOK
;

763  (
uöt8_t
)
¶ìp°©us
;

764 
	}
}

771 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

773 
uöt32_t
 
waô_¶ak
 = 
SLAK_TimeOut
 ;

774 
uöt8_t
 
wakeup°©us
 = 
CANWAKEUPFAILED
;

777 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

780 
CANx
->
MCR
 &~
MCR_SLEEP
;

783 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

785 
waô_¶ak
--;

787 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

790 
wakeup°©us
 = 
CANWAKEUPOK
;

793  (
uöt8_t
)
wakeup°©us
;

794 
	}
}

803 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

805 
FœgSètus
 
bô°©us
 = 
RESET
;

807 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

808 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

810 i‡((
CANx
->
ESR
 & 
CAN_FLAG
Ë!(
uöt32_t
)
RESET
)

813 
bô°©us
 = 
SET
;

818 
bô°©us
 = 
RESET
;

821  
bô°©us
;

822 
	}
}

830 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

833 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

834 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

836 
CANx
->
ESR
 &~
CAN_FLAG
;

837 
	}
}

849 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

851 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

854 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

855 
CAN_IT
)

857 
CAN_IT_RQCP0
:

858 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP0
);

860 
CAN_IT_RQCP1
:

861 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP1
);

863 
CAN_IT_RQCP2
:

864 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP2
);

866 
CAN_IT_FF0
:

867 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FULL0
);

869 
CAN_IT_FOV0
:

870 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FOVR0
);

872 
CAN_IT_FF1
:

873 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FULL1
);

875 
CAN_IT_FOV1
:

876 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FOVR1
);

878 
CAN_IT_EWG
:

879 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EWGF
);

881 
CAN_IT_EPV
:

882 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EPVF
);

884 
CAN_IT_BOF
:

885 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_BOFF
);

887 
CAN_IT_SLK
:

888 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_SLAKI
);

890 
CAN_IT_WKU
:

891 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_WKUI
);

894 
≥ndögbô°©us
 = 
RESET
;

898  
≥ndögbô°©us
;

899 
	}
}

907 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

910 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

911 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

912 
CAN_IT
)

914 
CAN_IT_RQCP0
:

915 
CANx
->
TSR
 = 
TSR_RQCP0
;

917 
CAN_IT_RQCP1
:

918 
CANx
->
TSR
 = 
TSR_RQCP1
;

920 
CAN_IT_RQCP2
:

921 
CANx
->
TSR
 = 
TSR_RQCP2
;

923 
CAN_IT_FF0
:

924 
CANx
->
RF0R
 = 
RF0R_FULL0
;

926 
CAN_IT_FOV0
:

927 
CANx
->
RF0R
 = 
RF0R_FOVR0
;

929 
CAN_IT_FF1
:

930 
CANx
->
RF1R
 = 
RF1R_FULL1
;

932 
CAN_IT_FOV1
:

933 
CANx
->
RF1R
 = 
RF1R_FOVR1
;

935 
CAN_IT_EWG
:

936 
CANx
->
ESR
 &~ 
ESR_EWGF
;

938 
CAN_IT_EPV
:

939 
CANx
->
ESR
 &~ 
ESR_EPVF
;

941 
CAN_IT_BOF
:

942 
CANx
->
ESR
 &~ 
ESR_BOFF
;

944 
CAN_IT_WKU
:

945 
CANx
->
MSR
 = 
MSR_WKUI
;

947 
CAN_IT_SLK
:

948 
CANx
->
MSR
 = 
MSR_SLAKI
;

953 
	}
}

961 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

963 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

965 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

968 
≥ndögbô°©us
 = 
SET
;

973 
≥ndögbô°©us
 = 
RESET
;

975  
≥ndögbô°©us
;

976 
	}
}

	@FWlib/SRC/stm32f10x_cec.c

22 
	~"°m32f10x_˚c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

54 
	#PE_BôNumbî
 0x00

	)

55 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

58 
	#IE_BôNumbî
 0x01

	)

59 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

65 
	#TSOM_BôNumbî
 0x00

	)

66 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

69 
	#TEOM_BôNumbî
 0x01

	)

70 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

72 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

73 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

117 
	$CEC_DeInô
()

120 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

123 
	}
}

134 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

136 
uöt16_t
 
tm¥eg
 = 0;

139 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

144 
tm¥eg
 = 
CEC
->
CFGR
;

147 
tm¥eg
 &
CFGR_CLEAR_Mask
;

150 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

153 
CEC
->
CFGR
 = 
tm¥eg
;

155 
	}
}

163 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

168 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

170 if(
NewSèã
 =
DISABLE
)

173 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

177 
	}
}

185 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

188 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

190 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

191 
	}
}

198 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

201 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

204 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

205 
	}
}

212 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

215 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

218 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

219 
	}
}

226 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

229 
CEC
->
TXD
 = 
D©a
 ;

230 
	}
}

238 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

241  (
uöt8_t
)(
CEC
->
RXD
);

242 
	}
}

249 
	$CEC_SèπOfMesßge
()

252 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

253 
	}
}

261 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

268 
	}
}

290 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

292 
FœgSètus
 
bô°©us
 = 
RESET
;

293 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

296 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

299 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

302 
˚¸eg
 = 
CEC_FLAG
 >> 28;

305 
CEC_FLAG
 &
FLAG_Mask
;

307 if(
˚¸eg
 != 0)

310 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

313 
˚cba£
 += 0xC;

318 
˚cba£
 += 0x10;

321 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

324 
bô°©us
 = 
SET
;

329 
bô°©us
 = 
RESET
;

333  
bô°©us
;

334 
	}
}

348 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

350 
uöt32_t
 
tmp
 = 0x0;

353 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

355 
tmp
 = 
CEC
->
CSR
 & 0x2;

358 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

359 
	}
}

371 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

373 
ITSètus
 
bô°©us
 = 
RESET
;

374 
uöt32_t
 
íabÀ°©us
 = 0;

377 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

380 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

383 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

386 
bô°©us
 = 
SET
;

391 
bô°©us
 = 
RESET
;

394  
bô°©us
;

395 
	}
}

407 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

409 
uöt32_t
 
tmp
 = 0x0;

412 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

414 
tmp
 = 
CEC
->
CSR
 & 0x2;

417 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

418 
	}
}

	@FWlib/SRC/stm32f10x_crc.c

22 
	~"°m32f10x_¸c.h
"

47 
	#CR_RESET_Së
 ((
uöt32_t
)0x00000001)

	)

86 
	$CRC_Re£tDR
()

89 
CRC
->
CR
 = 
CR_RESET_Së
;

90 
	}
}

97 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

99 
CRC
->
DR
 = 
D©a
;

101  (
CRC
->
DR
);

102 
	}
}

110 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

112 
uöt32_t
 
ödex
 = 0;

114 
ödex
 = 0; index < 
Buf„rLígth
; index++)

116 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

118  (
CRC
->
DR
);

119 
	}
}

126 
uöt32_t
 
	$CRC_GëCRC
()

128  (
CRC
->
DR
);

129 
	}
}

136 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

138 
CRC
->
IDR
 = 
IDVÆue
;

139 
	}
}

146 
uöt8_t
 
	$CRC_GëIDRegi°î
()

148  (
CRC
->
IDR
);

149 
	}
}

	@FWlib/SRC/stm32f10x_dac.c

22 
	~"°m32f10x_dac.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR_EN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#CR_DMAEN_Së
 ((
uöt32_t
)0x00001000)

	)

53 
	#CR_CLEAR_Mask
 ((
uöt32_t
)0x00000FFE)

	)

56 
	#SWTRIGR_SWTRIG_Së
 ((
uöt32_t
)0x00000001)

	)

59 
	#DUAL_SWTRIG_Së
 ((
uöt32_t
)0x00000003)

	)

60 
	#DUAL_SWTRIG_Re£t
 ((
uöt32_t
)0xFFFFFFFC)

	)

63 
	#DHR12R1_Off£t
 ((
uöt32_t
)0x00000008)

	)

64 
	#DHR12R2_Off£t
 ((
uöt32_t
)0x00000014)

	)

65 
	#DHR12RD_Off£t
 ((
uöt32_t
)0x00000020)

	)

68 
	#DOR_Off£t
 ((
uöt32_t
)0x0000002C)

	)

106 
	$DAC_DeInô
()

109 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

111 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

112 
	}
}

125 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

127 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

129 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

130 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

131 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

132 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

135 
tm¥eg1
 = 
DAC
->
CR
;

137 
tm¥eg1
 &~(
CR_CLEAR_Mask
 << 
DAC_Ch™√l
);

144 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

145 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

147 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

149 
DAC
->
CR
 = 
tm¥eg1
;

150 
	}
}

158 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

162 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

164 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

166 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

168 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

169 
	}
}

181 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

184 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

185 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

186 i‡(
NewSèã
 !
DISABLE
)

189 
DAC
->
CR
 |
CR_EN_Së
 << 
DAC_Ch™√l
;

194 
DAC
->
CR
 &~(
CR_EN_Së
 << 
DAC_Ch™√l
);

196 
	}
}

197 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

211 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

214 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

216 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

218 i‡(
NewSèã
 !
DISABLE
)

221 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

226 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

228 
	}
}

241 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

244 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

245 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

246 i‡(
NewSèã
 !
DISABLE
)

249 
DAC
->
CR
 |
CR_DMAEN_Së
 << 
DAC_Ch™√l
;

254 
DAC
->
CR
 &~(
CR_DMAEN_Së
 << 
DAC_Ch™√l
);

256 
	}
}

268 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

272 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
DAC
->
SWTRIGR
 |
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4);

281 
DAC
->
SWTRIGR
 &~(
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4));

283 
	}
}

292 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

296 i‡(
NewSèã
 !
DISABLE
)

299 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_Së
 ;

304 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_Re£t
;

306 
	}
}

322 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

336 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

338 
	}
}

350 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

352 
__IO
 
uöt32_t
 
tmp
 = 0;

355 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

356 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

358 
tmp
 = (
uöt32_t
)
DAC_BASE
;

359 
tmp
 +
DHR12R1_Off£t
 + 
DAC_Align
;

362 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

363 
	}
}

375 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

377 
__IO
 
uöt32_t
 
tmp
 = 0;

380 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

381 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

383 
tmp
 = (
uöt32_t
)
DAC_BASE
;

384 
tmp
 +
DHR12R2_Off£t
 + 
DAC_Align
;

387 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

388 
	}
}

404 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

406 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

409 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

410 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

411 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

414 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

416 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

420 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

423 
tmp
 = (
uöt32_t
)
DAC_BASE
;

424 
tmp
 +
DHR12RD_Off£t
 + 
DAC_Align
;

427 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

428 
	}
}

438 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

440 
__IO
 
uöt32_t
 
tmp
 = 0;

443 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

445 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

446 
tmp
 +
DOR_Off£t
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

449  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

450 
	}
}

452 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

464 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

466 
FœgSètus
 
bô°©us
 = 
RESET
;

468 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

469 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

472 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

475 
bô°©us
 = 
SET
;

480 
bô°©us
 = 
RESET
;

483  
bô°©us
;

484 
	}
}

497 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

500 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

501 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

504 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

505 
	}
}

518 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

520 
ITSètus
 
bô°©us
 = 
RESET
;

521 
uöt32_t
 
íabÀ°©us
 = 0;

524 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

525 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

528 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

531 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

534 
bô°©us
 = 
SET
;

539 
bô°©us
 = 
RESET
;

542  
bô°©us
;

543 
	}
}

556 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

559 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

560 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

563 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

564 
	}
}

	@FWlib/SRC/stm32f10x_dbgmcu.c

22 
	~"°m32f10x_dbgmcu.h
"

45 
	#IDCODE_DEVID_Mask
 ((
uöt32_t
)0x00000FFF)

	)

83 
uöt32_t
 
	$DBGMCU_GëREVID
()

85 (
DBGMCU
->
IDCODE
 >> 16);

86 
	}
}

93 
uöt32_t
 
	$DBGMCU_GëDEVID
()

95 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_Mask
);

96 
	}
}

133 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

139 i‡(
NewSèã
 !
DISABLE
)

141 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

145 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

147 
	}
}

	@FWlib/SRC/stm32f10x_dma.c

22 
	~"°m32f10x_dma.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CCR_ENABLE_Së
 ((
uöt32_t
)0x00000001)

	)

47 
	#CCR_ENABLE_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

50 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

51 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

52 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

53 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

54 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

55 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)0x00F00000)

	)

56 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)0x0F000000)

	)

59 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

60 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

61 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

62 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

63 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

66 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

69 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

110 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

113 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

115 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
CCR_ENABLE_Së
;

308 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

352 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

355 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

357  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

358 
	}
}

414 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
tm¥eg
 = 0;

419 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

422 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

425 
tm¥eg
 = 
DMA2
->
ISR
 ;

430 
tm¥eg
 = 
DMA1
->
ISR
 ;

434 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

437 
bô°©us
 = 
SET
;

442 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

503 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
)

506 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

509 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

512 
DMA2
->
IFCR
 = 
DMA_FLAG
;

517 
DMA1
->
IFCR
 = 
DMA_FLAG
;

519 
	}
}

575 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMA_IT
)

577 
ITSètus
 
bô°©us
 = 
RESET
;

578 
uöt32_t
 
tm¥eg
 = 0;

580 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

583 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

586 
tm¥eg
 = 
DMA2
->
ISR
 ;

591 
tm¥eg
 = 
DMA1
->
ISR
 ;

595 i‡((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
)

598 
bô°©us
 = 
SET
;

603 
bô°©us
 = 
RESET
;

606  
bô°©us
;

607 
	}
}

663 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
)

666 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

669 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

672 
DMA2
->
IFCR
 = 
DMA_IT
;

677 
DMA1
->
IFCR
 = 
DMA_IT
;

679 
	}
}

	@FWlib/SRC/stm32f10x_exti.c

22 
	~"°m32f10x_exti.h
"

45 
	#EXTI_LöeN⁄e
 ((
uöt32_t
)0x00000Ë

	)

84 
	$EXTI_DeInô
()

86 
EXTI
->
IMR
 = 0x00000000;

87 
EXTI
->
EMR
 = 0x00000000;

88 
EXTI
->
RTSR
 = 0x00000000;

89 
EXTI
->
FTSR
 = 0x00000000;

90 
EXTI
->
PR
 = 0x000FFFFF;

91 
	}
}

100 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

102 
uöt32_t
 
tmp
 = 0;

105 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

106 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

107 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

110 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

112 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

115 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

116 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

118 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

120 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

123 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

127 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

130 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

131 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

136 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

138 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

146 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
	}
}

156 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

158 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LöeN⁄e
;

159 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

160 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

161 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

162 
	}
}

170 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

173 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

175 
EXTI
->
SWIER
 |
EXTI_Löe
;

176 
	}
}

185 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

187 
FœgSètus
 
bô°©us
 = 
RESET
;

189 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

191 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

193 
bô°©us
 = 
SET
;

197 
bô°©us
 = 
RESET
;

199  
bô°©us
;

200 
	}
}

208 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

211 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

213 
EXTI
->
PR
 = 
EXTI_Löe
;

214 
	}
}

223 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

225 
ITSètus
 
bô°©us
 = 
RESET
;

226 
uöt32_t
 
íabÀ°©us
 = 0;

228 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

230 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

231 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

233 
bô°©us
 = 
SET
;

237 
bô°©us
 = 
RESET
;

239  
bô°©us
;

240 
	}
}

248 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

251 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

253 
EXTI
->
PR
 = 
EXTI_Löe
;

254 
	}
}

	@FWlib/SRC/stm32f10x_flash.c

22 
	~"°m32f10x_Êash.h
"

46 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

47 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

48 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

51 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

54 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

55 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

56 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

57 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

58 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

59 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

60 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

61 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

62 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

63 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

64 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

65 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

68 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

69 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

70 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

71 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

72 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

73 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

76 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

77 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

78 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

81 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

84 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

85 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

253 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

255 
uöt32_t
 
tm¥eg
 = 0;

258 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

261 
tm¥eg
 = 
FLASH
->
ACR
;

264 
tm¥eg
 &
ACR_LATENCY_Mask
;

265 
tm¥eg
 |
FLASH_L©ícy
;

268 
FLASH
->
ACR
 = 
tm¥eg
;

269 
	}
}

280 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

283 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

286 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

287 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

288 
	}
}

299 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

302 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

305 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

306 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

307 
	}
}

318 
	$FLASH_U∆ock
()

321 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

322 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

324 #ifde‡
STM32F10X_XL


326 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

327 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

329 
	}
}

339 
	$FLASH_U∆ockB™k1
()

342 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

343 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

344 
	}
}

346 #ifde‡
STM32F10X_XL


353 
	$FLASH_U∆ockB™k2
()

356 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

357 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

359 
	}
}

371 
	$FLASH_Lock
()

374 
FLASH
->
CR
 |
CR_LOCK_Së
;

376 #ifde‡
STM32F10X_XL


378 
FLASH
->
CR2
 |
CR_LOCK_Së
;

380 
	}
}

391 
	$FLASH_LockB™k1
()

394 
FLASH
->
CR
 |
CR_LOCK_Së
;

395 
	}
}

397 #ifde‡
STM32F10X_XL


404 
	$FLASH_LockB™k2
()

407 
FLASH
->
CR2
 |
CR_LOCK_Së
;

408 
	}
}

418 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

420 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

422 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

424 #ifde‡
STM32F10X_XL


425 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

428 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

429 if(
°©us
 =
FLASH_COMPLETE
)

432 
FLASH
->
CR
|
CR_PER_Së
;

433 
FLASH
->
AR
 = 
Page_Addªss
;

434 
FLASH
->
CR
|
CR_STRT_Së
;

437 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

438 if(
°©us
 !
FLASH_TIMEOUT
)

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

448 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

449 if(
°©us
 =
FLASH_COMPLETE
)

452 
FLASH
->
CR2
|
CR_PER_Së
;

453 
FLASH
->
AR2
 = 
Page_Addªss
;

454 
FLASH
->
CR2
|
CR_STRT_Së
;

457 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

458 if(
°©us
 !
FLASH_TIMEOUT
)

461 
FLASH
->
CR2
 &
CR_PER_Re£t
;

467 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

469 if(
°©us
 =
FLASH_COMPLETE
)

472 
FLASH
->
CR
|
CR_PER_Së
;

473 
FLASH
->
AR
 = 
Page_Addªss
;

474 
FLASH
->
CR
|
CR_STRT_Së
;

477 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

478 if(
°©us
 !
FLASH_TIMEOUT
)

481 
FLASH
->
CR
 &
CR_PER_Re£t
;

487  
°©us
;

488 
	}
}

497 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

499 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

501 #ifde‡
STM32F10X_XL


503 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

505 if(
°©us
 =
FLASH_COMPLETE
)

508 
FLASH
->
CR
 |
CR_MER_Së
;

509 
FLASH
->
CR
 |
CR_STRT_Së
;

512 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

513 if(
°©us
 !
FLASH_TIMEOUT
)

516 
FLASH
->
CR
 &
CR_MER_Re£t
;

519 if(
°©us
 =
FLASH_COMPLETE
)

522 
FLASH
->
CR2
 |
CR_MER_Së
;

523 
FLASH
->
CR2
 |
CR_STRT_Së
;

526 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 !
FLASH_TIMEOUT
)

530 
FLASH
->
CR2
 &
CR_MER_Re£t
;

535 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

536 if(
°©us
 =
FLASH_COMPLETE
)

539 
FLASH
->
CR
 |
CR_MER_Së
;

540 
FLASH
->
CR
 |
CR_STRT_Së
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

544 if(
°©us
 !
FLASH_TIMEOUT
)

547 
FLASH
->
CR
 &
CR_MER_Re£t
;

553  
°©us
;

554 
	}
}

566 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

568 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

570 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

572 if(
°©us
 =
FLASH_COMPLETE
)

575 
FLASH
->
CR
 |
CR_MER_Së
;

576 
FLASH
->
CR
 |
CR_STRT_Së
;

579 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

580 if(
°©us
 !
FLASH_TIMEOUT
)

583 
FLASH
->
CR
 &
CR_MER_Re£t
;

587  
°©us
;

588 
	}
}

590 #ifde‡
STM32F10X_XL


598 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

600 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

602 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

604 if(
°©us
 =
FLASH_COMPLETE
)

607 
FLASH
->
CR2
 |
CR_MER_Së
;

608 
FLASH
->
CR2
 |
CR_STRT_Së
;

611 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

612 if(
°©us
 !
FLASH_TIMEOUT
)

615 
FLASH
->
CR2
 &
CR_MER_Re£t
;

619  
°©us
;

620 
	}
}

631 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

633 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

635 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

638 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

640 
rd±mp
 = 0x00;

644 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

645 if(
°©us
 =
FLASH_COMPLETE
)

648 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

649 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

652 
FLASH
->
CR
 |
CR_OPTER_Së
;

653 
FLASH
->
CR
 |
CR_STRT_Së
;

655 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

657 if(
°©us
 =
FLASH_COMPLETE
)

660 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

663 
FLASH
->
CR
 |
CR_OPTPG_Së
;

665 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

667 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

669 if(
°©us
 !
FLASH_TIMEOUT
)

672 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

677 i‡(
°©us
 !
FLASH_TIMEOUT
)

680 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

685  
°©us
;

686 
	}
}

696 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

698 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

699 
__IO
 
uöt32_t
 
tmp
 = 0;

702 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

704 #ifde‡
STM32F10X_XL


705 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

708 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

709 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 |
CR_PG_Së
;

715 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

717 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

719 if(
°©us
 =
FLASH_COMPLETE
)

723 
tmp
 = 
Addªss
 + 2;

725 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

728 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 !
FLASH_TIMEOUT
)

733 
FLASH
->
CR
 &
CR_PG_Re£t
;

738 i‡(
°©us
 !
FLASH_TIMEOUT
)

741 
FLASH
->
CR
 &
CR_PG_Re£t
;

746 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

749 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

751 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 |
CR_PG_Së
;

757 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

760 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

762 if(
°©us
 !
FLASH_TIMEOUT
)

765 
FLASH
->
CR
 &
CR_PG_Re£t
;

770 i‡(
°©us
 !
FLASH_TIMEOUT
)

773 
FLASH
->
CR
 &
CR_PG_Re£t
;

778 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

780 if(
°©us
 =
FLASH_COMPLETE
)

784 
FLASH
->
CR2
 |
CR_PG_Së
;

785 
tmp
 = 
Addªss
 + 2;

787 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

790 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

792 if(
°©us
 !
FLASH_TIMEOUT
)

795 
FLASH
->
CR2
 &
CR_PG_Re£t
;

800 i‡(
°©us
 !
FLASH_TIMEOUT
)

803 
FLASH
->
CR2
 &
CR_PG_Re£t
;

810 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

812 if(
°©us
 =
FLASH_COMPLETE
)

816 
FLASH
->
CR2
 |
CR_PG_Së
;

818 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

820 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

822 if(
°©us
 =
FLASH_COMPLETE
)

826 
tmp
 = 
Addªss
 + 2;

828 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

831 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

833 if(
°©us
 !
FLASH_TIMEOUT
)

836 
FLASH
->
CR2
 &
CR_PG_Re£t
;

841 i‡(
°©us
 !
FLASH_TIMEOUT
)

844 
FLASH
->
CR2
 &
CR_PG_Re£t
;

851 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

853 if(
°©us
 =
FLASH_COMPLETE
)

857 
FLASH
->
CR
 |
CR_PG_Së
;

859 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

861 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

863 if(
°©us
 =
FLASH_COMPLETE
)

867 
tmp
 = 
Addªss
 + 2;

869 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

872 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

874 if(
°©us
 !
FLASH_TIMEOUT
)

877 
FLASH
->
CR
 &
CR_PG_Re£t
;

882 i‡(
°©us
 !
FLASH_TIMEOUT
)

885 
FLASH
->
CR
 &
CR_PG_Re£t
;

892  
°©us
;

893 
	}
}

903 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

905 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

907 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

909 #ifde‡
STM32F10X_XL


911 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

913 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

915 if(
°©us
 =
FLASH_COMPLETE
)

918 
FLASH
->
CR
 |
CR_PG_Së
;

920 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

922 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

923 if(
°©us
 !
FLASH_TIMEOUT
)

926 
FLASH
->
CR
 &
CR_PG_Re£t
;

932 if(
°©us
 =
FLASH_COMPLETE
)

935 
FLASH
->
CR2
 |
CR_PG_Së
;

937 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

939 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

940 if(
°©us
 !
FLASH_TIMEOUT
)

943 
FLASH
->
CR2
 &
CR_PG_Re£t
;

949 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

951 if(
°©us
 =
FLASH_COMPLETE
)

954 
FLASH
->
CR
 |
CR_PG_Së
;

956 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

958 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

959 if(
°©us
 !
FLASH_TIMEOUT
)

962 
FLASH
->
CR
 &
CR_PG_Re£t
;

968  
°©us
;

969 
	}
}

980 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

982 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

984 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

985 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

987 if(
°©us
 =
FLASH_COMPLETE
)

990 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

991 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

993 
FLASH
->
CR
 |
CR_OPTPG_Së
;

994 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

997 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

998 if(
°©us
 !
FLASH_TIMEOUT
)

1001 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1005  
°©us
;

1006 
	}
}

1026 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

1028 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

1030 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1033 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

1035 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

1036 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

1037 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

1038 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

1039 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

1042 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1044 if(
°©us
 =
FLASH_COMPLETE
)

1047 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1048 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1049 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1050 if(
WRP0_D©a
 != 0xFF)

1052 
OB
->
WRP0
 = 
WRP0_D©a
;

1055 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1057 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1059 
OB
->
WRP1
 = 
WRP1_D©a
;

1062 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1064 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1066 
OB
->
WRP2
 = 
WRP2_D©a
;

1069 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1072 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1074 
OB
->
WRP3
 = 
WRP3_D©a
;

1077 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1080 if(
°©us
 !
FLASH_TIMEOUT
)

1083 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1087  
°©us
;

1088 
	}
}

1100 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1105 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1106 if(
°©us
 =
FLASH_COMPLETE
)

1109 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1110 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1111 
FLASH
->
CR
 |
CR_OPTER_Së
;

1112 
FLASH
->
CR
 |
CR_STRT_Së
;

1114 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1115 if(
°©us
 =
FLASH_COMPLETE
)

1118 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1120 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1121 if(
NewSèã
 !
DISABLE
)

1123 
OB
->
RDP
 = 0x00;

1127 
OB
->
RDP
 = 
RDP_Key
;

1130 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1132 if(
°©us
 !
FLASH_TIMEOUT
)

1135 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1140 if(
°©us
 !
FLASH_TIMEOUT
)

1143 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1148  
°©us
;

1149 
	}
}

1169 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1171 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1174 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1175 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1176 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1179 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1180 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1183 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1185 if(
°©us
 =
FLASH_COMPLETE
)

1188 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1190 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1193 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1194 if(
°©us
 !
FLASH_TIMEOUT
)

1197 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1201  
°©us
;

1202 
	}
}

1204 #ifde‡
STM32F10X_XL


1223 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1225 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1226 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1228 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1229 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1232 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1234 if(
°©us
 =
FLASH_COMPLETE
)

1237 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1239 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1241 
OB
->
USER
 |
OB_USER_BFB2
;

1245 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1248 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1249 if(
°©us
 !
FLASH_TIMEOUT
)

1252 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1256  
°©us
;

1257 
	}
}

1267 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1270  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1271 
	}
}

1279 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1282  (
uöt32_t
)(
FLASH
->
WRPR
);

1283 
	}
}

1291 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1293 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1294 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1296 
ªadout°©us
 = 
SET
;

1300 
ªadout°©us
 = 
RESET
;

1302  
ªadout°©us
;

1303 
	}
}

1311 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1313 
FœgSètus
 
bô°©us
 = 
RESET
;

1315 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1317 
bô°©us
 = 
SET
;

1321 
bô°©us
 = 
RESET
;

1324  
bô°©us
;

1325 
	}
}

1341 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1343 #ifde‡
STM32F10X_XL


1345 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1348 if((
FLASH_IT
 & 0x80000000) != 0x0)

1350 if(
NewSèã
 !
DISABLE
)

1353 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1358 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1363 if(
NewSèã
 !
DISABLE
)

1366 
FLASH
->
CR
 |
FLASH_IT
;

1371 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1376 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1379 if(
NewSèã
 !
DISABLE
)

1382 
FLASH
->
CR
 |
FLASH_IT
;

1387 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1390 
	}
}

1408 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1410 
FœgSètus
 
bô°©us
 = 
RESET
;

1412 #ifde‡
STM32F10X_XL


1414 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1415 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1417 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1419 
bô°©us
 = 
SET
;

1423 
bô°©us
 = 
RESET
;

1428 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1430 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1432 
bô°©us
 = 
SET
;

1436 
bô°©us
 = 
RESET
;

1441 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1443 
bô°©us
 = 
SET
;

1447 
bô°©us
 = 
RESET
;

1453 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1454 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1456 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1458 
bô°©us
 = 
SET
;

1462 
bô°©us
 = 
RESET
;

1467 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1469 
bô°©us
 = 
SET
;

1473 
bô°©us
 = 
RESET
;

1479  
bô°©us
;

1480 
	}
}

1494 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1496 #ifde‡
STM32F10X_XL


1498 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1500 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1503 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1508 
FLASH
->
SR
 = 
FLASH_FLAG
;

1513 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1516 
FLASH
->
SR
 = 
FLASH_FLAG
;

1518 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1540 
Êash°©us
 = 
FLASH_ERROR_PG
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1546 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1550 
Êash°©us
 = 
FLASH_COMPLETE
;

1555  
Êash°©us
;

1556 
	}
}

1566 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1568 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1570 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1572 
Êash°©us
 = 
FLASH_BUSY
;

1576 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1578 
Êash°©us
 = 
FLASH_ERROR_PG
;

1582 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1584 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1588 
Êash°©us
 = 
FLASH_COMPLETE
;

1593  
Êash°©us
;

1594 
	}
}

1596 #ifde‡
STM32F10X_XL


1604 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1606 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1608 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1610 
Êash°©us
 = 
FLASH_BUSY
;

1614 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1616 
Êash°©us
 = 
FLASH_ERROR_PG
;

1620 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1622 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1626 
Êash°©us
 = 
FLASH_COMPLETE
;

1631  
Êash°©us
;

1632 
	}
}

1646 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1648 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1651 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1653 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1655 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1656 
Timeout
--;

1658 if(
Timeout
 == 0x00 )

1660 
°©us
 = 
FLASH_TIMEOUT
;

1663  
°©us
;

1664 
	}
}

1674 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1676 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1679 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1681 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1683 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1684 
Timeout
--;

1686 if(
Timeout
 == 0x00 )

1688 
°©us
 = 
FLASH_TIMEOUT
;

1691  
°©us
;

1692 
	}
}

1694 #ifde‡
STM32F10X_XL


1702 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1704 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1707 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1709 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1711 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1712 
Timeout
--;

1714 if(
Timeout
 == 0x00 )

1716 
°©us
 = 
FLASH_TIMEOUT
;

1719  
°©us
;

1720 
	}
}

	@FWlib/SRC/stm32f10x_fsmc.c

22 
	~"°m32f10x_fsmc.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

49 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

50 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

53 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

54 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

55 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

56 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

57 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

101 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

104 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

107 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

109 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

114 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

116 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

117 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

118 
	}
}

128 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

131 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

133 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

136 
FSMC_B™k2
->
PCR2
 = 0x00000018;

137 
FSMC_B™k2
->
SR2
 = 0x00000040;

138 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

139 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

145 
FSMC_B™k3
->
PCR3
 = 0x00000018;

146 
FSMC_B™k3
->
SR3
 = 0x00000040;

147 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

148 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

150 
	}
}

157 
	$FSMC_PCCARDDeInô
()

160 
FSMC_B™k4
->
PCR4
 = 0x00000018;

161 
FSMC_B™k4
->
SR4
 = 0x00000000;

162 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

163 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

165 
	}
}

175 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

178 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

179 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

182 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

183 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

184 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

188 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

190 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

191 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

192 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

194 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

195 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

196 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

199 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

200 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

201 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

202 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

211 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

213 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

216 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

217 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

218 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

219 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

223 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

227 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

229 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

230 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

231 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

232 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

233 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

234 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

235 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

236 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

237 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

238 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

239 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

240 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

245 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

247 
	}
}

256 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

258 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

261 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

262 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

263 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

264 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

265 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

266 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

267 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

268 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

269 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

270 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

271 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

272 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

273 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

279 
PCR_Mem‹yTy≥_NAND
 |

280 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

281 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

282 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

283 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

284 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

287 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

288 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

289 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

290 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

293 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

298 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

301 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

302 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

303 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

308 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

309 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

310 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

312 
	}
}

321 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

324 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

325 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

326 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

328 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

329 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

330 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

331 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

334 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

339 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

343 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

344 
FSMC_Mem‹yD©aWidth_16b
 |

345 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

346 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

349 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

350 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

351 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

355 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

356 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

361 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

362 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

365 
	}
}

373 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

376 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

377 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

378 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

379 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

380 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

381 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

382 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

402 
	}
}

410 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

413 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

414 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

415 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

416 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

417 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

418 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

419 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

420 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

421 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

422 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

423 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

424 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

425 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

426 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

427 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

428 
	}
}

436 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

439 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

440 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

441 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

442 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

443 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

444 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

445 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

446 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

447 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
	}
}

467 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

469 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

470 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

472 i‡(
NewSèã
 !
DISABLE
)

475 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

480 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

482 
	}
}

493 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

503 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

507 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

513 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

515 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

519 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

522 
	}
}

530 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 i‡(
NewSèã
 !
DISABLE
)

537 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

542 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

544 
	}
}

556 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(
NewSèã
 !
DISABLE
)

564 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

566 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

570 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

576 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

578 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

582 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

585 
	}
}

595 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

597 
uöt32_t
 
eccvÆ
 = 0x00000000;

599 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

602 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

607 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

610 (
eccvÆ
);

611 
	}
}

629 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

631 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

632 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

633 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

635 i‡(
NewSèã
 !
DISABLE
)

638 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

640 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

643 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

645 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

650 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

656 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

659 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

662 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

664 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

669 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

672 
	}
}

689 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

691 
FœgSètus
 
bô°©us
 = 
RESET
;

692 
uöt32_t
 
tmp§
 = 0x00000000;

695 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

696 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

698 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

700 
tmp§
 = 
FSMC_B™k2
->
SR2
;

702 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

704 
tmp§
 = 
FSMC_B™k3
->
SR3
;

709 
tmp§
 = 
FSMC_B™k4
->
SR4
;

713 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

715 
bô°©us
 = 
SET
;

719 
bô°©us
 = 
RESET
;

722  
bô°©us
;

723 
	}
}

739 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

742 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

743 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

745 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

747 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

749 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

751 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

756 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

758 
	}
}

774 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

776 
ITSètus
 
bô°©us
 = 
RESET
;

777 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

780 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

781 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

783 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

785 
tmp§
 = 
FSMC_B™k2
->
SR2
;

787 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

789 
tmp§
 = 
FSMC_B™k3
->
SR3
;

794 
tmp§
 = 
FSMC_B™k4
->
SR4
;

797 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

799 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

800 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

802 
bô°©us
 = 
SET
;

806 
bô°©us
 = 
RESET
;

808  
bô°©us
;

809 
	}
}

825 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

828 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

829 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

831 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

833 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

835 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

837 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

842 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

844 
	}
}

	@FWlib/SRC/stm32f10x_gpio.c

22 
	~"°m32f10x_gpio.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

52 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

53 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

54 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

59 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

60 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

61 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

64 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

65 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

66 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

67 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

68 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

69 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

107 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

110 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

112 i‡(
GPIOx
 =
GPIOA
)

114 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

117 i‡(
GPIOx
 =
GPIOB
)

119 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

122 i‡(
GPIOx
 =
GPIOC
)

124 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

127 i‡(
GPIOx
 =
GPIOD
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

132 i‡(
GPIOx
 =
GPIOE
)

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOF
)

139 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

144 i‡(
GPIOx
 =
GPIOG
)

146 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

150 
	}
}

158 
	$GPIO_AFIODeInô
()

160 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

162 
	}
}

172 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

174 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

175 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

177 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

178 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

179 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

182 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

183 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

186 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

188 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

192 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

194 
tm¥eg
 = 
GPIOx
->
CRL
;

195 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

197 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

199 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

200 i‡(
cuºíçö
 =
pos
)

202 
pos
 = 
pöpos
 << 2;

204 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

205 
tm¥eg
 &~
pömask
;

207 
tm¥eg
 |(
cuºítmode
 << 
pos
);

209 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

211 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

216 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

218 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

223 
GPIOx
->
CRL
 = 
tm¥eg
;

227 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

229 
tm¥eg
 = 
GPIOx
->
CRH
;

230 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

232 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

234 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

235 i‡(
cuºíçö
 =
pos
)

237 
pos
 = 
pöpos
 << 2;

239 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

240 
tm¥eg
 &~
pömask
;

242 
tm¥eg
 |(
cuºítmode
 << 
pos
);

244 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

246 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

249 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

251 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

255 
GPIOx
->
CRH
 = 
tm¥eg
;

257 
	}
}

265 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

268 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

269 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

270 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

271 
	}
}

280 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

282 
uöt8_t
 
bô°©us
 = 0x00;

285 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

286 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

288 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

290 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

294 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

296  
bô°©us
;

297 
	}
}

304 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

307 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

309  ((
uöt16_t
)
GPIOx
->
IDR
);

310 
	}
}

319 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

321 
uöt8_t
 
bô°©us
 = 0x00;

323 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

324 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

326 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

328 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

332 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

334  
bô°©us
;

335 
	}
}

342 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

345 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

347  ((
uöt16_t
)
GPIOx
->
ODR
);

348 
	}
}

357 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

360 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

361 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

363 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

364 
	}
}

373 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

376 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

377 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

379 
GPIOx
->
BRR
 = 
GPIO_Pö
;

380 
	}
}

393 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

396 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

398 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

400 i‡(
BôVÆ
 !
Bô_RESET
)

402 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

406 
GPIOx
->
BRR
 = 
GPIO_Pö
;

408 
	}
}

416 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

419 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

421 
GPIOx
->
ODR
 = 
P‹tVÆ
;

422 
	}
}

431 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

433 
uöt32_t
 
tmp
 = 0x00010000;

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
tmp
 |
GPIO_Pö
;

441 
GPIOx
->
LCKR
 = 
tmp
;

443 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

445 
GPIOx
->
LCKR
 = 
tmp
;

447 
tmp
 = 
GPIOx
->
LCKR
;

449 
tmp
 = 
GPIOx
->
LCKR
;

450 
	}
}

461 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

463 
uöt32_t
 
tm¥eg
 = 0x00;

465 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

466 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

468 
tm¥eg
 = 
AFIO
->
EVCR
;

470 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

471 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

472 
tm¥eg
 |
GPIO_PöSour˚
;

473 
AFIO
->
EVCR
 = 
tm¥eg
;

474 
	}
}

482 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

488 
	}
}

541 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

543 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

546 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

547 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

551 
tm¥eg
 = 
AFIO
->
MAPR2
;

555 
tm¥eg
 = 
AFIO
->
MAPR
;

558 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

559 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

561 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

563 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

564 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

566 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

568 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

569 
tm¥eg
 &~
tmp1
;

570 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

574 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

575 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

578 i‡(
NewSèã
 !
DISABLE
)

580 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

585 
AFIO
->
MAPR2
 = 
tm¥eg
;

589 
AFIO
->
MAPR
 = 
tm¥eg
;

591 
	}
}

601 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

603 
uöt32_t
 
tmp
 = 0x00;

605 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

606 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

608 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

609 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

610 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

611 
	}
}

622 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

624 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

627 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

628 
	}
}

	@FWlib/SRC/stm32f10x_i2c.c

22 
	~"°m32f10x_i2c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

49 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

52 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

53 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

56 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

57 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

60 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

61 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

64 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

65 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

68 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

69 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

72 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

73 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

76 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

77 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

80 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

81 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

84 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

85 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

88 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

91 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

92 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

95 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

96 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

99 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

102 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

103 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

106 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

107 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

110 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

113 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

116 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

119 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

122 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

161 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

164 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

166 i‡(
I2Cx
 =
I2C1
)

169 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

171 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

178 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

180 
	}
}

190 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

192 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

193 
uöt16_t
 
ªsu…
 = 0x04;

194 
uöt32_t
 
p˛k1
 = 8000000;

195 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

197 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

198 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

199 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

200 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

201 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

202 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

207 
tm¥eg
 = 
I2Cx
->
CR2
;

209 
tm¥eg
 &
CR2_FREQ_Re£t
;

211 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

212 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

214 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

215 
tm¥eg
 |
‰eqønge
;

217 
I2Cx
->
CR2
 = 
tm¥eg
;

221 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

224 
tm¥eg
 = 0;

227 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

230 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

232 i‡(
ªsu…
 < 0x04)

235 
ªsu…
 = 0x04;

238 
tm¥eg
 |
ªsu…
;

240 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

245 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

248 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

253 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

255 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

259 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

262 
ªsu…
 |(
uöt16_t
)0x0001;

265 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

267 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

271 
I2Cx
->
CCR
 = 
tm¥eg
;

273 
I2Cx
->
CR1
 |
CR1_PE_Së
;

277 
tm¥eg
 = 
I2Cx
->
CR1
;

279 
tm¥eg
 &
CR1_CLEAR_Mask
;

283 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

285 
I2Cx
->
CR1
 = 
tm¥eg
;

289 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

290 
	}
}

297 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

301 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

303 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

305 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

307 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

309 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

311 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

312 
	}
}

321 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

324 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

326 i‡(
NewSèã
 !
DISABLE
)

329 
I2Cx
->
CR1
 |
CR1_PE_Së
;

334 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

336 
	}
}

345 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

348 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

349 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

350 i‡(
NewSèã
 !
DISABLE
)

353 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

358 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

360 
	}
}

369 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

372 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

374 i‡(
NewSèã
 !
DISABLE
)

377 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

382 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

384 
	}
}

393 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

397 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

398 i‡(
NewSèã
 !
DISABLE
)

401 
I2Cx
->
CR1
 |
CR1_START_Së
;

406 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

408 
	}
}

417 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

420 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

422 i‡(
NewSèã
 !
DISABLE
)

425 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

430 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

432 
	}
}

441 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

444 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

445 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

446 i‡(
NewSèã
 !
DISABLE
)

449 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

454 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

456 
	}
}

464 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

466 
uöt16_t
 
tm¥eg
 = 0;

469 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

472 
tm¥eg
 = 
I2Cx
->
OAR2
;

475 
tm¥eg
 &
OAR2_ADD2_Re£t
;

478 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

481 
I2Cx
->
OAR2
 = 
tm¥eg
;

482 
	}
}

491 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

495 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

504 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

506 
	}
}

515 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

518 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

519 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

528 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

530 
	}
}

544 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

551 i‡(
NewSèã
 !
DISABLE
)

554 
I2Cx
->
CR2
 |
I2C_IT
;

559 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

561 
	}
}

569 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

572 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

574 
I2Cx
->
DR
 = 
D©a
;

575 
	}
}

582 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

585 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

587  (
uöt8_t
)
I2Cx
->
DR
;

588 
	}
}

600 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

603 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

604 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

606 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

609 
Addªss
 |
OAR1_ADD0_Së
;

614 
Addªss
 &
OAR1_ADD0_Re£t
;

617 
I2Cx
->
DR
 = 
Addªss
;

618 
	}
}

635 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

637 
__IO
 
uöt32_t
 
tmp
 = 0;

640 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

641 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

643 
tmp
 = (
uöt32_t
Ë
I2Cx
;

644 
tmp
 +
I2C_Regi°î
;

647  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

648 
	}
}

657 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

660 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

661 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

662 i‡(
NewSèã
 !
DISABLE
)

665 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

670 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

672 
	}
}

683 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

686 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

687 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

688 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

691 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

696 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

698 
	}
}

707 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

710 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

711 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

712 i‡(
NewSèã
 !
DISABLE
)

715 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

720 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

722 
	}
}

733 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

736 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

737 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

738 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

741 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

746 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

748 
	}
}

757 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

760 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

762 i‡(
NewSèã
 !
DISABLE
)

765 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

770 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

772 
	}
}

779 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

784  ((
I2Cx
->
SR2
) >> 8);

785 
	}
}

794 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

797 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

798 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

799 i‡(
NewSèã
 !
DISABLE
)

802 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

807 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

809 
	}
}

818 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

821 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

822 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

823 i‡(
NewSèã
 =
DISABLE
)

826 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

831 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

833 
	}
}

844 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

847 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

848 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

849 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

852 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

857 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

859 
	}
}

984 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

986 
uöt32_t
 
œ°evít
 = 0;

987 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

988 
Eº‹Sètus
 
°©us
 = 
ERROR
;

991 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

992 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

995 
Êag1
 = 
I2Cx
->
SR1
;

996 
Êag2
 = 
I2Cx
->
SR2
;

997 
Êag2
 = flag2 << 16;

1000 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1003 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1006 
°©us
 = 
SUCCESS
;

1011 
°©us
 = 
ERROR
;

1014  
°©us
;

1015 
	}
}

1032 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1034 
uöt32_t
 
œ°evít
 = 0;

1035 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1038 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049  
œ°evít
;

1050 
	}
}

1087 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1089 
FœgSètus
 
bô°©us
 = 
RESET
;

1090 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1093 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1094 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1097 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1100 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1103 
I2C_FLAG
 &
FLAG_Mask
;

1105 if(
i2¸eg
 != 0)

1108 
i2cxba£
 += 0x14;

1113 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1115 
i2cxba£
 += 0x18;

1118 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1121 
bô°©us
 = 
SET
;

1126 
bô°©us
 = 
RESET
;

1130  
bô°©us
;

1131 
	}
}

1166 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1168 
uöt32_t
 
Êagpos
 = 0;

1170 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1171 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1173 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1175 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1176 
	}
}

1200 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1202 
ITSètus
 
bô°©us
 = 
RESET
;

1203 
uöt32_t
 
íabÀ°©us
 = 0;

1206 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1207 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1210 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1213 
I2C_IT
 &
FLAG_Mask
;

1216 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1219 
bô°©us
 = 
SET
;

1224 
bô°©us
 = 
RESET
;

1227  
bô°©us
;

1228 
	}
}

1261 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1263 
uöt32_t
 
Êagpos
 = 0;

1265 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1266 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1268 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1270 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1271 
	}
}

	@FWlib/SRC/stm32f10x_iwdg.c

22 
	~"°m32f10x_iwdg.h
"

48 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

49 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

91 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

94 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

95 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

96 
	}
}

111 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

114 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

115 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

116 
	}
}

124 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

127 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

128 
IWDG
->
RLR
 = 
Rñﬂd
;

129 
	}
}

137 
	$IWDG_RñﬂdCou¡î
()

139 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

140 
	}
}

147 
	$IWDG_E«bÀ
()

149 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

150 
	}
}

160 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

162 
FœgSètus
 
bô°©us
 = 
RESET
;

164 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

165 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

167 
bô°©us
 = 
SET
;

171 
bô°©us
 = 
RESET
;

174  
bô°©us
;

175 
	}
}

	@FWlib/SRC/stm32f10x_pwr.c

22 
	~"°m32f10x_pwr.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

64 
	#EWUP_BôNumbî
 0x08

	)

65 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

70 
	#CR_PDDS_Së
 ((
uöt32_t
)0x00000002)

	)

71 
	#CR_DS_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_CWUF_Së
 ((
uöt32_t
)0x00000004)

	)

73 
	#CR_PLS_Mask
 ((
uöt32_t
)0xFFFFFF1F)

	)

78 
	#SCB_SysCål
 ((
uöt32_t
)0xE000ED10)

	)

81 
	#SysCål_SLEEPDEEP_Së
 ((
uöt32_t
)0x00000004)

	)

82 
	#SysCål_SLEEPDEEP_Re£t
 ((
uöt32_t
)0xFFFFFFFB)

	)

121 
	$PWR_DeInô
()

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

124 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

125 
	}
}

133 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

137 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

138 
	}
}

146 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

149 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

150 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

151 
	}
}

167 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

169 
uöt32_t
 
tm¥eg
 = 0;

171 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

172 
tm¥eg
 = 
PWR
->
CR
;

174 
tm¥eg
 &
CR_PLS_Mask
;

176 
tm¥eg
 |
PWR_PVDLevñ
;

178 
PWR
->
CR
 = 
tm¥eg
;

179 
	}
}

187 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

190 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

206 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

208 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

211 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

214 
tm¥eg
 = 
PWR
->
CR
;

216 
tm¥eg
 &
CR_DS_Mask
;

218 
tm¥eg
 |
PWR_Reguœt‹
;

220 
PWR
->
CR
 = 
tm¥eg
;

222 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

225 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

228 
	`__WFI
();

233 
	`__WFE
();

237 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 &
SysCål_SLEEPDEEP_Re£t
;

238 
	}
}

245 
	$PWR_E¡îSTANDBYMode
()

248 
PWR
->
CR
 |
CR_CWUF_Së
;

250 
PWR
->
CR
 |
CR_PDDS_Së
;

252 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

254 #i‡
	`deföed
 ( 
__CC_ARM
 )

255 
	`__f‹˚_°‹es
();

258 
	`__WFI
();

259 
	}
}

270 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

272 
FœgSètus
 
bô°©us
 = 
RESET
;

274 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

276 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

278 
bô°©us
 = 
SET
;

282 
bô°©us
 = 
RESET
;

285  
bô°©us
;

286 
	}
}

296 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

299 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

301 
PWR
->
CR
 |
PWR_FLAG
 << 2;

302 
	}
}

	@FWlib/SRC/stm32f10x_rcc.c

22 
	~"°m32f10x_rcc.h
"

46 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

52 
	#HSION_BôNumbî
 0x00

	)

53 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

56 
	#PLLON_BôNumbî
 0x18

	)

57 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

59 #ifde‡
STM32F10X_CL


61 
	#PLL2ON_BôNumbî
 0x1A

	)

62 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

65 
	#PLL3ON_BôNumbî
 0x1C

	)

66 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

70 
	#CSSON_BôNumbî
 0x13

	)

71 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

76 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

78 #i‚de‡
STM32F10X_CL


79 
	#USBPRE_BôNumbî
 0x16

	)

80 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

82 
	#OTGFSPRE_BôNumbî
 0x16

	)

83 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

89 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

90 
	#RTCEN_BôNumbî
 0x0F

	)

91 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

94 
	#BDRST_BôNumbî
 0x10

	)

95 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

100 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

101 
	#LSION_BôNumbî
 0x00

	)

102 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

104 #ifde‡
STM32F10X_CL


108 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

109 
	#I2S2SRC_BôNumbî
 0x11

	)

110 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

113 
	#I2S3SRC_BôNumbî
 0x12

	)

114 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

120 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

121 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

122 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

123 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

124 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

127 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

128 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

130 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

133 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

134 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

135 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

136 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

137 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

138 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

139 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

140 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

141 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

142 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

143 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

144 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

145 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

148 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

150 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

152 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

153 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

155 #ifde‡
STM32F10X_CL


156 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

157 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

158 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

162 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

164 #i‚de‡
HSI_VÆue


166 
	#HSI_VÆue
 ((
uöt32_t
)8000000)

	)

170 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

173 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

176 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

179 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

181 #i‚de‡
HSESèπUp_TimeOut


183 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500)

	)

202 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

203 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

226 
	$RCC_DeInô
()

229 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

232 #i‚de‡
STM32F10X_CL


233 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

235 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

239 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

242 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

245 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

247 #ifde‡
STM32F10X_CL


249 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

252 
RCC
->
CIR
 = 0x00FF0000;

255 
RCC
->
CFGR2
 = 0x00000000;

256 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

258 
RCC
->
CIR
 = 0x009F0000;

261 
RCC
->
CFGR2
 = 0x00000000;

264 
RCC
->
CIR
 = 0x009F0000;

267 
	}
}

279 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

282 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

285 
RCC
->
CR
 &
CR_HSEON_Re£t
;

287 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

289 
RCC_HSE
)

291 
RCC_HSE_ON
:

293 
RCC
->
CR
 |
CR_HSEON_Së
;

296 
RCC_HSE_By∑ss
:

298 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

304 
	}
}

313 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

315 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

316 
Eº‹Sètus
 
°©us
 = 
ERROR
;

317 
FœgSètus
 
HSESètus
 = 
RESET
;

322 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

323 
SèπUpCou¡î
++;

324 } (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
Ë&& (
HSESètus
 =
RESET
));

326 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

328 
°©us
 = 
SUCCESS
;

332 
°©us
 = 
ERROR
;

334  (
°©us
);

335 
	}
}

343 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

345 
uöt32_t
 
tm¥eg
 = 0;

347 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

348 
tm¥eg
 = 
RCC
->
CR
;

350 
tm¥eg
 &
CR_HSITRIM_Mask
;

352 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

354 
RCC
->
CR
 = 
tm¥eg
;

355 
	}
}

363 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

366 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

367 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

368 
	}
}

387 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

389 
uöt32_t
 
tm¥eg
 = 0;

392 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

393 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

395 
tm¥eg
 = 
RCC
->
CFGR
;

397 
tm¥eg
 &
CFGR_PLL_Mask
;

399 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

401 
RCC
->
CFGR
 = 
tm¥eg
;

402 
	}
}

410 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

415 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

416 
	}
}

418 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

435 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

437 
uöt32_t
 
tm¥eg
 = 0;

440 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

441 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

443 
tm¥eg
 = 
RCC
->
CFGR2
;

445 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

447 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

449 
RCC
->
CFGR2
 = 
tm¥eg
;

450 
	}
}

453 #ifde‡
STM32F10X_CL


463 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

465 
uöt32_t
 
tm¥eg
 = 0;

468 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

470 
tm¥eg
 = 
RCC
->
CFGR2
;

472 
tm¥eg
 &~
CFGR2_PREDIV2
;

474 
tm¥eg
 |
RCC_PREDIV2_Div
;

476 
RCC
->
CFGR2
 = 
tm¥eg
;

477 
	}
}

488 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

490 
uöt32_t
 
tm¥eg
 = 0;

493 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

495 
tm¥eg
 = 
RCC
->
CFGR2
;

497 
tm¥eg
 &~
CFGR2_PLL2MUL
;

499 
tm¥eg
 |
RCC_PLL2Mul
;

501 
RCC
->
CFGR2
 = 
tm¥eg
;

502 
	}
}

514 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

519 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

520 
	}
}

532 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

534 
uöt32_t
 
tm¥eg
 = 0;

537 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

539 
tm¥eg
 = 
RCC
->
CFGR2
;

541 
tm¥eg
 &~
CFGR2_PLL3MUL
;

543 
tm¥eg
 |
RCC_PLL3Mul
;

545 
RCC
->
CFGR2
 = 
tm¥eg
;

546 
	}
}

555 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

560 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

561 
	}
}

573 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

575 
uöt32_t
 
tm¥eg
 = 0;

577 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

578 
tm¥eg
 = 
RCC
->
CFGR
;

580 
tm¥eg
 &
CFGR_SW_Mask
;

582 
tm¥eg
 |
RCC_SYSCLKSour˚
;

584 
RCC
->
CFGR
 = 
tm¥eg
;

585 
	}
}

596 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

598  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

599 
	}
}

617 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

619 
uöt32_t
 
tm¥eg
 = 0;

621 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

622 
tm¥eg
 = 
RCC
->
CFGR
;

624 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

626 
tm¥eg
 |
RCC_SYSCLK
;

628 
RCC
->
CFGR
 = 
tm¥eg
;

629 
	}
}

643 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

645 
uöt32_t
 
tm¥eg
 = 0;

647 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

648 
tm¥eg
 = 
RCC
->
CFGR
;

650 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

652 
tm¥eg
 |
RCC_HCLK
;

654 
RCC
->
CFGR
 = 
tm¥eg
;

655 
	}
}

669 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

671 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

674 
tm¥eg
 = 
RCC
->
CFGR
;

676 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

678 
tm¥eg
 |
RCC_HCLK
 << 3;

680 
RCC
->
CFGR
 = 
tm¥eg
;

681 
	}
}

709 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 i‡(
NewSèã
 !
DISABLE
)

717 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

722 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

724 
	}
}

726 #i‚de‡
STM32F10X_CL


737 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

740 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

742 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

743 
	}
}

755 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

758 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

760 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

761 
	}
}

775 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

777 
uöt32_t
 
tm¥eg
 = 0;

779 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

780 
tm¥eg
 = 
RCC
->
CFGR
;

782 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

784 
tm¥eg
 |
RCC_PCLK2
;

786 
RCC
->
CFGR
 = 
tm¥eg
;

787 
	}
}

789 #ifde‡
STM32F10X_CL


801 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

804 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

806 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

807 
	}
}

820 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

823 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

825 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

826 
	}
}

838 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

841 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

844 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

846 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

848 
RCC_LSE
)

850 
RCC_LSE_ON
:

852 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

855 
RCC_LSE_By∑ss
:

857 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

863 
	}
}

871 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

874 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

875 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

876 
	}
}

888 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

891 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

893 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

894 
	}
}

902 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

905 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

906 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

907 
	}
}

915 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

917 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

919 #ifde‡ 
STM32F10X_CL


920 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

923 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

924 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

928 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

930 
tmp
)

933 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

936 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
;

941 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

942 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

944 #i‚de‡
STM32F10X_CL


945 
∂lmuŒ
 = (Öllmull >> 18) + 2;

947 i‡(
∂lsour˚
 == 0x00)

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

953 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

954 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

956 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

959 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

961 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

965 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
 * 
∂lmuŒ
;

970 
∂lmuŒ
 =Öllmull >> 18;

972 i‡(
∂lmuŒ
 != 0x0D)

974 
∂lmuŒ
 += 2;

978 
∂lmuŒ
 = 13 / 2;

981 i‡(
∂lsour˚
 == 0x00)

983 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

989 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

990 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

992 i‡(
¥ediv1sour˚
 == 0)

994 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1000 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

1001 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1009 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

1015 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1016 
tmp
 =Åmp >> 4;

1017 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1019 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1021 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1022 
tmp
 =Åmp >> 8;

1023 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1025 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1027 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1028 
tmp
 =Åmp >> 11;

1029 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1031 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1033 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1034 
tmp
 =Åmp >> 14;

1035 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1037 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1038 
	}
}

1071 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1074 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1075 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 i‡(
NewSèã
 !
DISABLE
)

1079 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1083 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1085 
	}
}

1102 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1105 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1109 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1113 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1115 
	}
}

1133 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1136 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1138 i‡(
NewSèã
 !
DISABLE
)

1140 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1144 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1146 
	}
}

1148 #ifde‡
STM32F10X_CL


1160 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1163 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1166 i‡(
NewSèã
 !
DISABLE
)

1168 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1172 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1174 
	}
}

1192 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1195 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1196 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1197 i‡(
NewSèã
 !
DISABLE
)

1199 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1203 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1205 
	}
}

1223 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1226 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1228 i‡(
NewSèã
 !
DISABLE
)

1230 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1234 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1236 
	}
}

1244 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1247 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1248 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1249 
	}
}

1257 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1260 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1261 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1262 
	}
}

1289 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1292 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1295 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1296 
	}
}

1333 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1335 
uöt32_t
 
tmp
 = 0;

1336 
uöt32_t
 
°©u§eg
 = 0;

1337 
FœgSètus
 
bô°©us
 = 
RESET
;

1339 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1342 
tmp
 = 
RCC_FLAG
 >> 5;

1343 i‡(
tmp
 == 1)

1345 
°©u§eg
 = 
RCC
->
CR
;

1347 i‡(
tmp
 == 2)

1349 
°©u§eg
 = 
RCC
->
BDCR
;

1353 
°©u§eg
 = 
RCC
->
CSR
;

1357 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1358 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1360 
bô°©us
 = 
SET
;

1364 
bô°©us
 = 
RESET
;

1368  
bô°©us
;

1369 
	}
}

1378 
	$RCC_CÀ¨Fœg
()

1381 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1382 
	}
}

1409 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1411 
ITSètus
 
bô°©us
 = 
RESET
;

1413 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1416 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1426  
bô°©us
;

1427 
	}
}

1455 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1458 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1462 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1463 
	}
}

	@FWlib/SRC/stm32f10x_rtc.c

22 
	~"°m32f10x_πc.h
"

44 
	#CRL_CNF_Së
 ((
uöt16_t
)0x0010Ë

	)

45 
	#CRL_CNF_Re£t
 ((
uöt16_t
)0xFFEFË

	)

46 
	#RTC_LSB_Mask
 ((
uöt32_t
)0x0000FFFFË

	)

47 
	#PRLH_MSB_Mask
 ((
uöt32_t
)0x000F0000Ë

	)

92 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

95 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

96 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

98 i‡(
NewSèã
 !
DISABLE
)

100 
RTC
->
CRH
 |
RTC_IT
;

104 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

106 
	}
}

113 
	$RTC_E¡îC⁄figMode
()

116 
RTC
->
CRL
 |
CRL_CNF_Së
;

117 
	}
}

124 
	$RTC_ExôC⁄figMode
()

127 
RTC
->
CRL
 &
CRL_CNF_Re£t
;

128 
	}
}

135 
uöt32_t
 
	$RTC_GëCou¡î
()

137 
uöt16_t
 
tmp
 = 0;

138 
tmp
 = 
RTC
->
CNTL
;

139  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

140 
	}
}

147 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

149 
	`RTC_E¡îC⁄figMode
();

151 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

153 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_Mask
);

154 
	`RTC_ExôC⁄figMode
();

155 
	}
}

162 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

165 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

167 
	`RTC_E¡îC⁄figMode
();

169 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_Mask
) >> 16;

171 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_Mask
);

172 
	`RTC_ExôC⁄figMode
();

173 
	}
}

180 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

182 
	`RTC_E¡îC⁄figMode
();

184 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

186 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_Mask
);

187 
	`RTC_ExôC⁄figMode
();

188 
	}
}

195 
uöt32_t
 
	$RTC_GëDividî
()

197 
uöt32_t
 
tmp
 = 0x00;

198 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

199 
tmp
 |
RTC
->
DIVL
;

200  
tmp
;

201 
	}
}

209 
	$RTC_WaôF‹La°Task
()

212 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

215 
	}
}

225 
	$RTC_WaôF‹Synchro
()

228 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

230 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

233 
	}
}

246 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

248 
FœgSètus
 
bô°©us
 = 
RESET
;

251 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

253 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

255 
bô°©us
 = 
SET
;

259 
bô°©us
 = 
RESET
;

261  
bô°©us
;

262 
	}
}

275 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

278 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

281 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

282 
	}
}

293 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

295 
ITSètus
 
bô°©us
 = 
RESET
;

297 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

299 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

300 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

302 
bô°©us
 = 
SET
;

306 
bô°©us
 = 
RESET
;

308  
bô°©us
;

309 
	}
}

320 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

323 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

326 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

327 
	}
}

	@FWlib/SRC/stm32f10x_sdio.c

22 
	~"°m32f10x_sdio.h
"

23 
	~"°m32f10x_rcc.h
"

39 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

44 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

45 
	#CLKEN_BôNumbî
 0x08

	)

46 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

51 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

52 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

53 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

56 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

57 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

60 
	#NIEN_BôNumbî
 0x0D

	)

61 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

64 
	#ATACMD_BôNumbî
 0x0E

	)

65 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

70 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

71 
	#DMAEN_BôNumbî
 0x03

	)

72 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

75 
	#RWSTART_BôNumbî
 0x08

	)

76 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

79 
	#RWSTOP_BôNumbî
 0x09

	)

80 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

83 
	#RWMOD_BôNumbî
 0x0A

	)

84 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

87 
	#SDIOEN_BôNumbî
 0x0B

	)

88 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

95 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

100 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

105 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

110 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

113 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

160 
	$SDIO_DeInô
()

162 
SDIO
->
POWER
 = 0x00000000;

163 
SDIO
->
CLKCR
 = 0x00000000;

164 
SDIO
->
ARG
 = 0x00000000;

165 
SDIO
->
CMD
 = 0x00000000;

166 
SDIO
->
DTIMER
 = 0x00000000;

167 
SDIO
->
DLEN
 = 0x00000000;

168 
SDIO
->
DCTRL
 = 0x00000000;

169 
SDIO
->
ICR
 = 0x00C007FF;

170 
SDIO
->
MASK
 = 0x00000000;

171 
	}
}

180 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

182 
uöt32_t
 
tm¥eg
 = 0;

185 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

188 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

189 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

193 
tm¥eg
 = 
SDIO
->
CLKCR
;

196 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

204 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

205 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

209 
SDIO
->
CLKCR
 = 
tm¥eg
;

210 
	}
}

218 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

221 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

222 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

223 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

224 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

226 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

227 
	}
}

234 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

239 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

240 
	}
}

250 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

253 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

255 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

256 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

257 
	}
}

268 
uöt32_t
 
	$SDIO_GëPowîSèã
()

270  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

271 
	}
}

306 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

310 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

312 i‡(
NewSèã
 !
DISABLE
)

315 
SDIO
->
MASK
 |
SDIO_IT
;

320 
SDIO
->
MASK
 &~
SDIO_IT
;

322 
	}
}

330 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

333 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

335 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

336 
	}
}

345 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

347 
uöt32_t
 
tm¥eg
 = 0;

350 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

351 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

352 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

353 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

357 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

361 
tm¥eg
 = 
SDIO
->
CMD
;

363 
tm¥eg
 &
CMD_CLEAR_MASK
;

368 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


369 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

372 
SDIO
->
CMD
 = 
tm¥eg
;

373 
	}
}

381 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

384 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

385 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

387 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

389 
	}
}

396 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

398  (
uöt8_t
)(
SDIO
->
RESPCMD
);

399 
	}
}

411 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

413 
__IO
 
uöt32_t
 
tmp
 = 0;

416 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

418 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

420  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

421 
	}
}

430 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

432 
uöt32_t
 
tm¥eg
 = 0;

435 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

436 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

437 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

439 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

443 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

447 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

451 
tm¥eg
 = 
SDIO
->
DCTRL
;

453 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

458 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


459 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

462 
SDIO
->
DCTRL
 = 
tm¥eg
;

463 
	}
}

471 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

474 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

477 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

479 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

480 
	}
}

487 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

489  
SDIO
->
DCOUNT
;

490 
	}
}

497 
uöt32_t
 
	$SDIO_RódD©a
()

499  
SDIO
->
FIFO
;

500 
	}
}

507 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

509 
SDIO
->
FIFO
 = 
D©a
;

510 
	}
}

517 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

519  
SDIO
->
FIFOCNT
;

520 
	}
}

528 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

534 
	}
}

542 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

547 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

548 
	}
}

558 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

561 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

563 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

564 
	}
}

572 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

575 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

577 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

578 
	}
}

586 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

591 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

592 
	}
}

600 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

603 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

605 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

606 
	}
}

613 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

619 
	}
}

626 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

632 
	}
}

665 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

667 
FœgSètus
 
bô°©us
 = 
RESET
;

670 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

672 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

678 
bô°©us
 = 
RESET
;

680  
bô°©us
;

681 
	}
}

703 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

706 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

708 
SDIO
->
ICR
 = 
SDIO_FLAG
;

709 
	}
}

742 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

744 
ITSètus
 
bô°©us
 = 
RESET
;

747 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

748 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

750 
bô°©us
 = 
SET
;

754 
bô°©us
 = 
RESET
;

756  
bô°©us
;

757 
	}
}

778 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

781 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

783 
SDIO
->
ICR
 = 
SDIO_IT
;

784 
	}
}

	@FWlib/SRC/stm32f10x_spi.c

22 
	~"°m32f10x_•i.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

49 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

52 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

53 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

56 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

59 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

60 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

63 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

64 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

67 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

68 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

71 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

72 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

75 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

76 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

77 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

78 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

118 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

121 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

123 i‡(
SPIx
 =
SPI1
)

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

130 i‡(
SPIx
 =
SPI2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

139 i‡(
SPIx
 =
SPI3
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

147 
	}
}

157 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

159 
uöt16_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

165 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

166 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

167 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

168 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

170 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

171 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

172 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

173 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

177 
tm¥eg
 = 
SPIx
->
CR1
;

179 
tm¥eg
 &
CR1_CLEAR_Mask
;

188 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

189 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

190 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

191 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

193 
SPIx
->
CR1
 = 
tm¥eg
;

196 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

200 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

201 
	}
}

218 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

220 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

221 
uöt32_t
 
tmp
 = 0;

222 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

223 
uöt32_t
 
sour˚˛ock
 = 0;

226 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

227 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

228 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

229 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

230 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

231 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

232 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

236 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

237 
SPIx
->
I2SPR
 = 0x0002;

240 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

243 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

245 
i2sodd
 = (
uöt16_t
)0;

246 
i2sdiv
 = (
uöt16_t
)2;

252 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

255 
∑ckëÀngth
 = 1;

260 
∑ckëÀngth
 = 2;

264 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

267 
tmp
 = 
I2S2_CLOCK_SRC
;

272 
tmp
 = 
I2S3_CLOCK_SRC
;

277 #ifde‡
STM32F10X_CL


278 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

281 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

284 if((
tmp
 > 5) && (tmp < 15))

287 
tmp
 += 2;

291 i‡(
tmp
 == 15)

294 
tmp
 = 20;

298 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

301 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

306 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

309 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

313 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

316 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

320 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

323 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

328 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

332 
tmp
 =Åmp / 10;

335 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

338 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

341 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

345 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

348 
i2sdiv
 = 2;

349 
i2sodd
 = 0;

353 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

356 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

357 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

358 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

361 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

362 
	}
}

369 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

373 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

375 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

377 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

379 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

381 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

383 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

385 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

387 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

389 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

390 
	}
}

397 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

401 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

404 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

407 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

410 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

413 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

416 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

417 
	}
}

426 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

429 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

430 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

431 i‡(
NewSèã
 !
DISABLE
)

434 
SPIx
->
CR1
 |
CR1_SPE_Së
;

439 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

441 
	}
}

450 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

453 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

455 i‡(
NewSèã
 !
DISABLE
)

458 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

463 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

465 
	}
}

481 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

483 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

485 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

490 
ôpos
 = 
SPI_I2S_IT
 >> 4;

493 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

495 i‡(
NewSèã
 !
DISABLE
)

498 
SPIx
->
CR2
 |
ômask
;

503 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

505 
	}
}

520 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

523 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

524 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

525 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

526 i‡(
NewSèã
 !
DISABLE
)

529 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

534 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

536 
	}
}

546 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

549 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

552 
SPIx
->
DR
 = 
D©a
;

553 
	}
}

562 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

565 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

568  
SPIx
->
DR
;

569 
	}
}

580 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

583 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

584 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

585 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

588 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

593 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

595 
	}
}

604 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

607 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

609 i‡(
NewSèã
 !
DISABLE
)

612 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

617 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

619 
	}
}

630 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

633 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

634 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

636 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

638 
SPIx
->
CR1
 |
SPI_D©aSize
;

639 
	}
}

646 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

649 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

652 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

653 
	}
}

662 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

665 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

667 i‡(
NewSèã
 !
DISABLE
)

670 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

675 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

677 
	}
}

688 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

690 
uöt16_t
 
¸¸eg
 = 0;

692 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

693 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

694 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

697 
¸¸eg
 = 
SPIx
->
TXCRCR
;

702 
¸¸eg
 = 
SPIx
->
RXCRCR
;

705  
¸¸eg
;

706 
	}
}

713 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

716 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

719  
SPIx
->
CRCPR
;

720 
	}
}

731 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

734 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

735 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

736 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

739 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

744 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

746 
	}
}

765 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

767 
FœgSètus
 
bô°©us
 = 
RESET
;

769 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

770 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

772 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

775 
bô°©us
 = 
SET
;

780 
bô°©us
 = 
RESET
;

783  
bô°©us
;

784 
	}
}

803 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

806 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

807 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

810 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

811 
	}
}

828 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

830 
ITSètus
 
bô°©us
 = 
RESET
;

831 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

834 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

835 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

838 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

841 
ômask
 = 
SPI_I2S_IT
 >> 4;

844 
ômask
 = 0x01 << itmask;

847 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

850 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

853 
bô°©us
 = 
SET
;

858 
bô°©us
 = 
RESET
;

861  
bô°©us
;

862 
	}
}

882 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

884 
uöt16_t
 
ôpos
 = 0;

886 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

887 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

890 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

893 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

894 
	}
}

	@FWlib/SRC/stm32f10x_tim.c

22 
	~"°m32f10x_tim.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

48 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

49 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

76 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

77 
uöt16_t
 
TIM_ICFûãr
);

78 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

79 
uöt16_t
 
TIM_ICFûãr
);

80 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

81 
uöt16_t
 
TIM_ICFûãr
);

82 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

83 
uöt16_t
 
TIM_ICFûãr
);

121 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

124 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

126 i‡(
TIMx
 =
TIM1
)

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

131 i‡(
TIMx
 =
TIM2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

136 i‡(
TIMx
 =
TIM3
)

138 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

141 i‡(
TIMx
 =
TIM4
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

146 i‡(
TIMx
 =
TIM5
)

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

151 i‡(
TIMx
 =
TIM6
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

156 i‡(
TIMx
 =
TIM7
)

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

161 i‡(
TIMx
 =
TIM8
)

163 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

166 i‡(
TIMx
 =
TIM9
)

168 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

171 i‡(
TIMx
 =
TIM10
)

173 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

176 i‡(
TIMx
 =
TIM11
)

178 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

181 i‡(
TIMx
 =
TIM12
)

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

186 i‡(
TIMx
 =
TIM13
)

188 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

191 i‡(
TIMx
 =
TIM14
)

193 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

196 i‡(
TIMx
 =
TIM15
)

198 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

201 i‡(
TIMx
 =
TIM16
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

208 i‡(
TIMx
 =
TIM17
)

210 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

214 
	}
}

224 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

226 
uöt16_t
 
tmp¸1
 = 0;

229 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

230 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

231 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

233 
tmp¸1
 = 
TIMx
->
CR1
;

235 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

236 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

239 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

240 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

243 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

246 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

247 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

250 
TIMx
->
CR1
 = 
tmp¸1
;

253 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

256 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

258 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

261 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

266 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

267 
	}
}

277 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

279 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

282 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

283 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

284 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

287 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

289 
tmpc˚r
 = 
TIMx
->
CCER
;

291 
tmp¸2
 = 
TIMx
->
CR2
;

294 
tmpccmrx
 = 
TIMx
->
CCMR1
;

297 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

298 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

301 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

304 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

306 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

309 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

311 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

312 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

314 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

315 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

316 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

320 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

322 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

325 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

327 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

330 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

331 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

334 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

339 
TIMx
->
CR2
 = 
tmp¸2
;

342 
TIMx
->
CCMR1
 = 
tmpccmrx
;

345 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

348 
TIMx
->
CCER
 = 
tmpc˚r
;

349 
	}
}

360 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

362 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

365 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

366 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

367 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

370 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

373 
tmpc˚r
 = 
TIMx
->
CCER
;

375 
tmp¸2
 = 
TIMx
->
CR2
;

378 
tmpccmrx
 = 
TIMx
->
CCMR1
;

381 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

382 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

385 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

388 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

390 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

393 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

395 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

397 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

398 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

399 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

403 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

405 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

408 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

410 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

413 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

414 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

417 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

422 
TIMx
->
CR2
 = 
tmp¸2
;

425 
TIMx
->
CCMR1
 = 
tmpccmrx
;

428 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

431 
TIMx
->
CCER
 = 
tmpc˚r
;

432 
	}
}

442 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

444 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

447 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

448 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

449 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

452 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

455 
tmpc˚r
 = 
TIMx
->
CCER
;

457 
tmp¸2
 = 
TIMx
->
CR2
;

460 
tmpccmrx
 = 
TIMx
->
CCMR2
;

463 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

464 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

466 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

469 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

471 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

474 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

476 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

478 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

479 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

480 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

484 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

486 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

488 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

491 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

493 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

494 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

496 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

501 
TIMx
->
CR2
 = 
tmp¸2
;

504 
TIMx
->
CCMR2
 = 
tmpccmrx
;

507 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

510 
TIMx
->
CCER
 = 
tmpc˚r
;

511 
	}
}

521 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

523 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

526 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

527 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

528 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

531 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

534 
tmpc˚r
 = 
TIMx
->
CCER
;

536 
tmp¸2
 = 
TIMx
->
CR2
;

539 
tmpccmrx
 = 
TIMx
->
CCMR2
;

542 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

543 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

546 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

549 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

551 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

554 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

556 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

558 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

560 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

562 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

565 
TIMx
->
CR2
 = 
tmp¸2
;

568 
TIMx
->
CCMR2
 = 
tmpccmrx
;

571 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

574 
TIMx
->
CCER
 = 
tmpc˚r
;

575 
	}
}

585 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

588 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

589 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

590 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

594 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

596 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

598 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

599 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

600 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

602 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

608 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

618 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

634 
	}
}

644 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

646 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

647 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

649 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

651 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

653 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

657 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

660 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

662 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

666 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

668 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

671 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

672 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

674 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

676 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

678 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

683 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

684 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

686 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

688 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

690 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

692 
	}
}

702 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

705 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

706 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

707 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

708 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

709 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

710 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

711 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

714 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

715 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

716 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

717 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

718 
	}
}

726 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

729 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

730 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

731 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

732 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

733 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

734 
	}
}

742 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

745 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

746 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

747 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

748 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

749 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

750 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

751 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

752 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

753 
	}
}

761 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

764 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

765 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

766 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

767 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

768 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

769 
	}
}

777 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

780 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

781 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

782 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

783 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

784 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

785 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

786 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

787 
	}
}

796 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

799 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

800 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

802 i‡(
NewSèã
 !
DISABLE
)

805 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

810 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

812 
	}
}

821 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

824 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

825 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

826 i‡(
NewSèã
 !
DISABLE
)

829 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

834 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

836 
	}
}

862 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

866 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

867 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 !
DISABLE
)

872 
TIMx
->
DIER
 |
TIM_IT
;

877 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

879 
	}
}

899 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

902 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

903 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

906 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

907 
	}
}

927 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

930 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

931 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

932 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

934 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

935 
	}
}

954 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

957 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

958 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

959 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

961 i‡(
NewSèã
 !
DISABLE
)

964 
TIMx
->
DIER
 |
TIM_DMASour˚
;

969 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

971 
	}
}

979 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

982 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

984 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

985 
	}
}

998 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1001 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1002 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1004 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1006 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1007 
	}
}

1025 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1026 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1029 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1030 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1031 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1032 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1034 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1036 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1040 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1043 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1045 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1046 
	}
}

1065 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1066 
uöt16_t
 
ExtTRGFûãr
)

1068 
uöt16_t
 
tmpsm¸
 = 0;

1070 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1071 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1072 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1073 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1075 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1078 
tmpsm¸
 = 
TIMx
->
SMCR
;

1080 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1082 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1084 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1085 
tmpsm¸
 |
TIM_TS_ETRF
;

1087 
TIMx
->
SMCR
 = 
tmpsm¸
;

1088 
	}
}

1107 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1108 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1111 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1113 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1114 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1116 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1118 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1119 
	}
}

1138 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1139 
uöt16_t
 
ExtTRGFûãr
)

1141 
uöt16_t
 
tmpsm¸
 = 0;

1143 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1144 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1145 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1146 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1147 
tmpsm¸
 = 
TIMx
->
SMCR
;

1149 
tmpsm¸
 &
SMCR_ETR_Mask
;

1151 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1153 
TIMx
->
SMCR
 = 
tmpsm¸
;

1154 
	}
}

1166 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1169 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1170 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1172 
TIMx
->
PSC
 = 
PªsˇÀr
;

1174 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1175 
	}
}

1189 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1191 
uöt16_t
 
tmp¸1
 = 0;

1193 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1194 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1195 
tmp¸1
 = 
TIMx
->
CR1
;

1197 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1199 
tmp¸1
 |
TIM_Cou¡îMode
;

1201 
TIMx
->
CR1
 = 
tmp¸1
;

1202 
	}
}

1219 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1221 
uöt16_t
 
tmpsm¸
 = 0;

1223 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1224 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1226 
tmpsm¸
 = 
TIMx
->
SMCR
;

1228 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1230 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1232 
TIMx
->
SMCR
 = 
tmpsm¸
;

1233 
	}
}

1254 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1255 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1257 
uöt16_t
 
tmpsm¸
 = 0;

1258 
uöt16_t
 
tmpccmr1
 = 0;

1259 
uöt16_t
 
tmpc˚r
 = 0;

1262 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1263 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1264 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1265 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1268 
tmpsm¸
 = 
TIMx
->
SMCR
;

1271 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1274 
tmpc˚r
 = 
TIMx
->
CCER
;

1277 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1278 
tmpsm¸
 |
TIM_EncodîMode
;

1281 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1282 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1285 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1286 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1289 
TIMx
->
SMCR
 = 
tmpsm¸
;

1291 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1293 
TIMx
->
CCER
 = 
tmpc˚r
;

1294 
	}
}

1305 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1307 
uöt16_t
 
tmpccmr1
 = 0;

1309 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1310 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1311 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1313 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1315 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1317 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1318 
	}
}

1329 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1331 
uöt16_t
 
tmpccmr1
 = 0;

1333 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1334 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1335 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1337 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1339 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1341 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1342 
	}
}

1353 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1355 
uöt16_t
 
tmpccmr2
 = 0;

1357 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1358 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1359 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1361 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1363 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1365 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1366 
	}
}

1377 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1379 
uöt16_t
 
tmpccmr2
 = 0;

1381 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1382 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1383 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1385 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1387 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1389 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1390 
	}
}

1399 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1402 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1404 i‡(
NewSèã
 !
DISABLE
)

1407 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1412 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1414 
	}
}

1423 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1436 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1438 
	}
}

1448 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1453 i‡(
NewSèã
 !
DISABLE
)

1456 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1461 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1463 
	}
}

1473 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1476 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1477 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1478 i‡(
NewSèã
 !
DISABLE
)

1481 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1486 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1488 
	}
}

1499 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1501 
uöt16_t
 
tmpccmr1
 = 0;

1503 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1504 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1505 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1507 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1509 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1511 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1512 
	}
}

1524 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1526 
uöt16_t
 
tmpccmr1
 = 0;

1528 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1529 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1530 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1532 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1534 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1536 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1537 
	}
}

1548 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1550 
uöt16_t
 
tmpccmr2
 = 0;

1552 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1553 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1554 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1556 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1558 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1560 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1561 
	}
}

1572 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1574 
uöt16_t
 
tmpccmr2
 = 0;

1576 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1577 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1578 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1580 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1582 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1584 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1585 
	}
}

1596 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1598 
uöt16_t
 
tmpccmr1
 = 0;

1600 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1601 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1603 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1605 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1607 
tmpccmr1
 |
TIM_OCFa°
;

1609 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1610 
	}
}

1622 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1624 
uöt16_t
 
tmpccmr1
 = 0;

1626 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1627 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1629 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1631 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1633 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1635 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1636 
	}
}

1647 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1649 
uöt16_t
 
tmpccmr2
 = 0;

1651 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1652 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1654 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1656 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1658 
tmpccmr2
 |
TIM_OCFa°
;

1660 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1661 
	}
}

1672 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1674 
uöt16_t
 
tmpccmr2
 = 0;

1676 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1677 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1679 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1681 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1683 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1685 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1686 
	}
}

1697 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1699 
uöt16_t
 
tmpccmr1
 = 0;

1701 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1702 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1704 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1707 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1709 
tmpccmr1
 |
TIM_OCCÀ¨
;

1711 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1712 
	}
}

1723 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1725 
uöt16_t
 
tmpccmr1
 = 0;

1727 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1728 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1729 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1731 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1733 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1735 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1736 
	}
}

1747 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1749 
uöt16_t
 
tmpccmr2
 = 0;

1751 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1752 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1753 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1755 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1757 
tmpccmr2
 |
TIM_OCCÀ¨
;

1759 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1760 
	}
}

1771 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1773 
uöt16_t
 
tmpccmr2
 = 0;

1775 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1776 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1777 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1779 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1781 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1783 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1784 
	}
}

1795 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1797 
uöt16_t
 
tmpc˚r
 = 0;

1799 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1800 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1801 
tmpc˚r
 = 
TIMx
->
CCER
;

1803 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1804 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1806 
TIMx
->
CCER
 = 
tmpc˚r
;

1807 
	}
}

1818 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1820 
uöt16_t
 
tmpc˚r
 = 0;

1822 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1823 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1825 
tmpc˚r
 = 
TIMx
->
CCER
;

1827 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1828 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1830 
TIMx
->
CCER
 = 
tmpc˚r
;

1831 
	}
}

1842 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1844 
uöt16_t
 
tmpc˚r
 = 0;

1846 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1847 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1848 
tmpc˚r
 = 
TIMx
->
CCER
;

1850 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1851 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1853 
TIMx
->
CCER
 = 
tmpc˚r
;

1854 
	}
}

1865 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1867 
uöt16_t
 
tmpc˚r
 = 0;

1869 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1870 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1872 
tmpc˚r
 = 
TIMx
->
CCER
;

1874 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1875 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1877 
TIMx
->
CCER
 = 
tmpc˚r
;

1878 
	}
}

1889 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1891 
uöt16_t
 
tmpc˚r
 = 0;

1893 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1894 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1895 
tmpc˚r
 = 
TIMx
->
CCER
;

1897 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1898 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1900 
TIMx
->
CCER
 = 
tmpc˚r
;

1901 
	}
}

1912 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1914 
uöt16_t
 
tmpc˚r
 = 0;

1917 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1918 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1920 
tmpc˚r
 = 
TIMx
->
CCER
;

1922 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1923 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1925 
TIMx
->
CCER
 = 
tmpc˚r
;

1926 
	}
}

1937 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1939 
uöt16_t
 
tmpc˚r
 = 0;

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1943 
tmpc˚r
 = 
TIMx
->
CCER
;

1945 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1948 
TIMx
->
CCER
 = 
tmpc˚r
;

1949 
	}
}

1964 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1966 
uöt16_t
 
tmp
 = 0;

1969 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1970 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1971 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1973 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1976 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1979 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1980 
	}
}

1994 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1996 
uöt16_t
 
tmp
 = 0;

1999 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2000 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2001 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2003 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2006 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2009 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2010 
	}
}

2035 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2037 
uöt32_t
 
tmp
 = 0;

2038 
uöt16_t
 
tmp1
 = 0;

2041 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2042 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2043 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2045 
tmp
 = (
uöt32_t
Ë
TIMx
;

2046 
tmp
 +
CCMR_Off£t
;

2048 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2051 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2053 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2055 
tmp
 +(
TIM_Ch™√l
>>1);

2058 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2061 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2065 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2073 
	}
}

2082 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2085 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2086 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2087 i‡(
NewSèã
 !
DISABLE
)

2090 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2095 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2097 
	}
}

2110 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2113 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2114 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2115 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2118 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2123 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2125 
	}
}

2134 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2137 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2139 i‡(
NewSèã
 !
DISABLE
)

2142 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2147 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2149 
	}
}

2160 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2163 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2164 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2166 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2168 
TIMx
->
CR1
 |
TIM_OPMode
;

2169 
	}
}

2192 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2195 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2196 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2198 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2200 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2201 
	}
}

2215 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2218 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2219 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2221 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2223 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2224 
	}
}

2236 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2239 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2240 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2242 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2245 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2246 
	}
}

2254 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2257 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2259 
TIMx
->
CNT
 = 
Cou¡î
;

2260 
	}
}

2268 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2271 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2273 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2274 
	}
}

2282 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2285 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2287 
TIMx
->
CCR1
 = 
Com∑ª1
;

2288 
	}
}

2296 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2299 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2301 
TIMx
->
CCR2
 = 
Com∑ª2
;

2302 
	}
}

2310 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2313 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2315 
TIMx
->
CCR3
 = 
Com∑ª3
;

2316 
	}
}

2324 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2327 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2329 
TIMx
->
CCR4
 = 
Com∑ª4
;

2330 
	}
}

2343 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2346 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2347 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2349 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2351 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2352 
	}
}

2365 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2368 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2369 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2371 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2373 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2374 
	}
}

2387 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2390 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2391 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2393 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2395 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2396 
	}
}

2409 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2412 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2413 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2415 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2417 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2418 
	}
}

2431 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2434 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2435 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2437 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2439 
TIMx
->
CR1
 |
TIM_CKD
;

2440 
	}
}

2447 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2450 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2452  
TIMx
->
CCR1
;

2453 
	}
}

2460 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2463 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2465  
TIMx
->
CCR2
;

2466 
	}
}

2473 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2476 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2478  
TIMx
->
CCR3
;

2479 
	}
}

2486 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2489 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2491  
TIMx
->
CCR4
;

2492 
	}
}

2499 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2502 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2504  
TIMx
->
CNT
;

2505 
	}
}

2512 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2515 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2517  
TIMx
->
PSC
;

2518 
	}
}

2546 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2548 
ITSètus
 
bô°©us
 = 
RESET
;

2550 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2551 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2553 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2555 
bô°©us
 = 
SET
;

2559 
bô°©us
 = 
RESET
;

2561  
bô°©us
;

2562 
	}
}

2590 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2593 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2594 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2597 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2598 
	}
}

2622 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2624 
ITSètus
 
bô°©us
 = 
RESET
;

2625 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2627 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2628 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2630 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2632 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2633 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2635 
bô°©us
 = 
SET
;

2639 
bô°©us
 = 
RESET
;

2641  
bô°©us
;

2642 
	}
}

2666 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2669 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2670 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2672 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2673 
	}
}

2691 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2692 
uöt16_t
 
TIM_ICFûãr
)

2694 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2696 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2697 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2698 
tmpc˚r
 = 
TIMx
->
CCER
;

2700 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2701 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2703 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2704 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2706 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2707 
TIMx
->
CCER
 = 
tmpc˚r
;

2708 
	}
}

2726 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2727 
uöt16_t
 
TIM_ICFûãr
)

2729 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2731 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2732 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2733 
tmpc˚r
 = 
TIMx
->
CCER
;

2734 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2736 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2737 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2738 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2740 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2741 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2743 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2744 
TIMx
->
CCER
 = 
tmpc˚r
;

2745 
	}
}

2763 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2764 
uöt16_t
 
TIM_ICFûãr
)

2766 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2768 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2769 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2770 
tmpc˚r
 = 
TIMx
->
CCER
;

2771 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2773 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2774 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2776 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2777 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2779 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2780 
TIMx
->
CCER
 = 
tmpc˚r
;

2781 
	}
}

2799 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2800 
uöt16_t
 
TIM_ICFûãr
)

2802 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2805 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2806 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2807 
tmpc˚r
 = 
TIMx
->
CCER
;

2808 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2810 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2811 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2812 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2815 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2816 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2818 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2819 
TIMx
->
CCER
 = 
tmpc˚r
;

2820 
	}
}

	@FWlib/SRC/stm32f10x_usart.c

22 
	~"°m32f10x_ußπ.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

47 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

49 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

51 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

52 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

53 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

54 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

55 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

57 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

58 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

60 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

61 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

62 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

64 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

65 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

67 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

68 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

70 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

71 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

73 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

74 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

76 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

77 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

78 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

79 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

80 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

83 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

84 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

87 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

88 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

128 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

131 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

133 i‡(
USARTx
 =
USART1
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

138 i‡(
USARTx
 =
USART2
)

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

143 i‡(
USARTx
 =
USART3
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

146 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

148 i‡(
USARTx
 =
UART4
)

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

155 i‡(
USARTx
 =
UART5
)

157 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

161 
	}
}

173 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

175 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

176 
uöt32_t
 
öãgîdividî
 = 0x00;

177 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

178 
uöt32_t
 
ußπxba£
 = 0;

179 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

181 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

182 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

183 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

184 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

185 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

186 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

187 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

189 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

191 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

194 
ußπxba£
 = (
uöt32_t
)
USARTx
;

197 
tm¥eg
 = 
USARTx
->
CR2
;

199 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

202 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

205 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

208 
tm¥eg
 = 
USARTx
->
CR1
;

210 
tm¥eg
 &
CR1_CLEAR_Mask
;

215 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

216 
USART_InôSåu˘
->
USART_Mode
;

218 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

221 
tm¥eg
 = 
USARTx
->
CR3
;

223 
tm¥eg
 &
CR3_CLEAR_Mask
;

226 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

228 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

232 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

233 i‡(
ußπxba£
 =
USART1_BASE
)

235 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

239 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

243 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

246 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

251 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

253 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

256 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

259 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

261 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

265 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

269 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

270 
	}
}

278 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

281 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

282 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

283 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

284 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

285 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

286 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

287 
	}
}

299 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

301 
uöt32_t
 
tm¥eg
 = 0x00;

303 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

304 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

305 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

306 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

307 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

310 
tm¥eg
 = 
USARTx
->
CR2
;

312 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

318 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

319 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

321 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

322 
	}
}

330 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

333 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

334 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

335 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

336 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

337 
	}
}

348 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

351 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

352 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

354 i‡(
NewSèã
 !
DISABLE
)

357 
USARTx
->
CR1
 |
CR1_UE_Së
;

362 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

364 
	}
}

385 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

387 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

388 
uöt32_t
 
ußπxba£
 = 0x00;

390 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

391 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

392 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

394 i‡(
USART_IT
 =
USART_IT_CTS
)

396 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

399 
ußπxba£
 = (
uöt32_t
)
USARTx
;

402 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

405 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

406 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

408 i‡(
ußπªg
 == 0x01)

410 
ußπxba£
 += 0x0C;

412 i‡(
ußπªg
 == 0x02)

414 
ußπxba£
 += 0x10;

418 
ußπxba£
 += 0x14;

420 i‡(
NewSèã
 !
DISABLE
)

422 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

426 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

428 
	}
}

444 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

447 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

448 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

449 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

450 i‡(
NewSèã
 !
DISABLE
)

454 
USARTx
->
CR3
 |
USART_DMAReq
;

460 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

462 
	}
}

472 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

475 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

476 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

479 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

481 
USARTx
->
CR2
 |
USART_Addªss
;

482 
	}
}

495 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

498 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

499 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

501 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

502 
USARTx
->
CR1
 |
USART_WakeUp
;

503 
	}
}

514 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
USARTx
->
CR1
 |
CR1_RWU_Së
;

528 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

530 
	}
}

543 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

546 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

547 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

549 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

550 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

551 
	}
}

562 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

565 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

566 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

568 i‡(
NewSèã
 !
DISABLE
)

571 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

576 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

578 
	}
}

588 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

591 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

592 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

595 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

596 
	}
}

605 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

608 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

611  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

612 
	}
}

621 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

624 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

627 
USARTx
->
CR1
 |
CR1_SBK_Së
;

628 
	}
}

637 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

640 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

643 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

645 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

646 
	}
}

657 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

660 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

663 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

665 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

666 
	}
}

676 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

679 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

681 i‡(
NewSèã
 !
DISABLE
)

684 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

689 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

691 
	}
}

701 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

706 i‡(
NewSèã
 !
DISABLE
)

709 
USARTx
->
CR3
 |
CR3_NACK_Së
;

714 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

716 
	}
}

727 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

730 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

731 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

733 i‡(
NewSèã
 !
DISABLE
)

736 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

741 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

743 
	}
}

758 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

761 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

762 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

772 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

774 
	}
}

785 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

788 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

791 i‡(
NewSèã
 !
DISABLE
)

794 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

799 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

801 
	}
}

814 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

817 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

818 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

820 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

821 
USARTx
->
CR3
 |
USART_IrDAMode
;

822 
	}
}

833 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

836 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

837 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

839 i‡(
NewSèã
 !
DISABLE
)

842 
USARTx
->
CR3
 |
CR3_IREN_Së
;

847 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

849 
	}
}

870 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

872 
FœgSètus
 
bô°©us
 = 
RESET
;

874 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

875 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

877 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

879 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

882 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

919 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

922 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

923 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

925 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

927 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

930 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

931 
	}
}

952 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

954 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

955 
ITSètus
 
bô°©us
 = 
RESET
;

957 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

958 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

960 i‡(
USART_IT
 =
USART_IT_CTS
)

962 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

966 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

968 
ômask
 = 
USART_IT
 & 
IT_Mask
;

969 
ômask
 = (
uöt32_t
)0x01 << itmask;

971 i‡(
ußπªg
 == 0x01)

973 
ômask
 &
USARTx
->
CR1
;

975 i‡(
ußπªg
 == 0x02)

977 
ômask
 &
USARTx
->
CR2
;

981 
ômask
 &
USARTx
->
CR3
;

984 
bôpos
 = 
USART_IT
 >> 0x08;

985 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

986 
bôpos
 &
USARTx
->
SR
;

987 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

989 
bô°©us
 = 
SET
;

993 
bô°©us
 = 
RESET
;

996  
bô°©us
;

997 
	}
}

1026 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1028 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1030 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1031 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1033 i‡(
USART_IT
 =
USART_IT_CTS
)

1035 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1038 
bôpos
 = 
USART_IT
 >> 0x08;

1039 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1040 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1041 
	}
}

	@FWlib/SRC/stm32f10x_wwdg.c

22 
	~"°m32f10x_wwdg.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

50 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

51 
	#EWI_BôNumbî
 0x09

	)

52 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

57 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

60 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

61 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

62 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

101 
	$WWDG_DeInô
()

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

105 
	}
}

117 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

119 
uöt32_t
 
tm¥eg
 = 0;

121 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

123 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

125 
tm¥eg
 |
WWDG_PªsˇÀr
;

127 
WWDG
->
CFR
 = 
tm¥eg
;

128 
	}
}

136 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

138 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

141 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

144 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

147 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

150 
WWDG
->
CFR
 = 
tm¥eg
;

151 
	}
}

158 
	$WWDG_E«bÀIT
()

160 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

161 
	}
}

169 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

172 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

175 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

176 
	}
}

184 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

187 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

188 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

189 
	}
}

196 
FœgSètus
 
	$WWDG_GëFœgSètus
()

198  (
FœgSètus
)(
WWDG
->
SR
);

199 
	}
}

206 
	$WWDG_CÀ¨Fœg
()

208 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

209 
	}
}

	@FWlib/SRC/system_stm32f10x.c

25 
	~"°m32f10x.h
"

50 
	#SYSCLK_FREQ_72MHz
 72000000

	)

54 #ifde‡
STM32F10X_HD


77 #ifde‡
SYSCLK_FREQ_HSE


78 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_HSE
;

79 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_HSE
;

80 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_HSE
;

81 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_HSE
;

82 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_HSE
;

83 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


84 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_20MHz
;

85 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_20MHz
;

86 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_20MHz
;

87 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_20MHz
;

88 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_20MHz
;

89 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


90 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_36MHz
;

91 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_36MHz
;

92 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_36MHz
;

93 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_36MHz
;

94 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_36MHz
;

95 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


96 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_48MHz
;

97 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_48MHz
;

98 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_48MHz
;

99 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_48MHz
/2);

100 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_48MHz
;

101 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


102 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_56MHz
;

103 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_56MHz
;

104 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_56MHz
;

105 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_56MHz
/2);

106 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_56MHz
;

107 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


108 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_72MHz
;

109 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_72MHz
;

110 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_72MHz
;

111 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_72MHz
/2);

112 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_72MHz
;

114 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
HSI_VÆue
;

115 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
HSI_VÆue
;

116 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
HSI_VÆue
;

117 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
HSI_VÆue
;

118 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
HSI_VÆue
;

129 
SëSysClock
();

131 #ifde‡
SYSCLK_FREQ_HSE


132 
SëSysClockToHSE
();

133 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


134 
SëSysClockTo20
();

135 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


136 
SëSysClockTo36
();

137 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


138 
SëSysClockTo48
();

139 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


140 
SëSysClockTo56
();

141 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


142 
SëSysClockTo72
();

161 
	$Sy°emInô
 ()

165 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

167 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

169 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

171 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

173 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

175 
RCC
->
CIR
 = 0x00000000;

179 
	`SëSysClock
();

181 
	}
}

191 
	$SëSysClock
()

193 #ifde‡
SYSCLK_FREQ_HSE


194 
	`SëSysClockToHSE
();

195 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


196 
	`SëSysClockTo20
();

197 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


198 
	`SëSysClockTo36
();

199 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


200 
	`SëSysClockTo48
();

201 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


202 
	`SëSysClockTo56
();

203 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


204 
	`SëSysClockTo72
();

209 
	}
}

219 #ifde‡
DATA_IN_ExtSRAM


231 
	$Sy°emInô_ExtMemCé
()

237 
RCC
->
AHBENR
 = 0x00000114;

240 
RCC
->
APB2ENR
 = 0x000001E0;

248 
GPIOD
->
CRL
 = 0x44BB44BB;

249 
GPIOD
->
CRH
 = 0xBBBBBBBB;

251 
GPIOE
->
CRL
 = 0xB44444BB;

252 
GPIOE
->
CRH
 = 0xBBBBBBBB;

254 
GPIOF
->
CRL
 = 0x44BBBBBB;

255 
GPIOF
->
CRH
 = 0xBBBB4444;

257 
GPIOG
->
CRL
 = 0x44BBBBBB;

258 
GPIOG
->
CRH
 = 0x44444B44;

263 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

264 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

265 
	}
}

268 #ifde‡
SYSCLK_FREQ_HSE


277 
	$SëSysClockToHSE
()

279 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

283 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

288 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

289 
SèπUpCou¡î
++;

290 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

292 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

294 
HSESètus
 = (
uöt32_t
)0x01;

298 
HSESètus
 = (
uöt32_t
)0x00;

301 i‡(
HSESètus
 =(
uöt32_t
)0x01)

304 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

307 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

308 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

311 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

314 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

317 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

320 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

321 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

324 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

337 
	}
}

338 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


347 
	$SëSysClockTo20
()

349 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

353 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

358 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

359 
SèπUpCou¡î
++;

360 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

362 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

364 
HSESètus
 = (
uöt32_t
)0x01;

368 
HSESètus
 = (
uöt32_t
)0x00;

371 i‡(
HSESètus
 =(
uöt32_t
)0x01)

374 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

377 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

378 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

381 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

384 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

387 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

390 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

391 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL5
);

394 
RCC
->
CR
 |
RCC_CR_PLLON
;

397 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

402 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

403 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

406 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

419 
	}
}

420 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


429 
	$SëSysClockTo36
()

431 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

435 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

440 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

441 
SèπUpCou¡î
++;

442 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

444 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

446 
HSESètus
 = (
uöt32_t
)0x01;

450 
HSESètus
 = (
uöt32_t
)0x00;

453 i‡(
HSESètus
 =(
uöt32_t
)0x01)

456 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

459 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

460 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

463 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

466 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

469 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

472 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

473 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL9
);

476 
RCC
->
CR
 |
RCC_CR_PLLON
;

479 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

484 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

485 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

488 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

501 
	}
}

502 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


511 
	$SëSysClockTo48
()

513 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

517 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

522 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

523 
SèπUpCou¡î
++;

524 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

526 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

528 
HSESètus
 = (
uöt32_t
)0x01;

532 
HSESètus
 = (
uöt32_t
)0x00;

535 i‡(
HSESètus
 =(
uöt32_t
)0x01)

538 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

541 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

542 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

545 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

548 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

551 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

554 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

555 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL6
);

558 
RCC
->
CR
 |
RCC_CR_PLLON
;

561 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

566 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

567 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

570 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

583 
	}
}

585 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


594 
	$SëSysClockTo56
()

596 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

600 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

605 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

606 
SèπUpCou¡î
++;

607 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

609 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

611 
HSESètus
 = (
uöt32_t
)0x01;

615 
HSESètus
 = (
uöt32_t
)0x00;

618 i‡(
HSESètus
 =(
uöt32_t
)0x01)

621 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

624 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

625 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

628 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

631 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

634 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

637 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

638 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL7
);

641 
RCC
->
CR
 |
RCC_CR_PLLON
;

644 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

649 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

650 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

653 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

666 
	}
}

668 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


677 
	$SëSysClockTo72
()

679 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

683 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

688 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

689 
SèπUpCou¡î
++;

690 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

692 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

694 
HSESètus
 = (
uöt32_t
)0x01;

698 
HSESètus
 = (
uöt32_t
)0x00;

701 i‡(
HSESètus
 =(
uöt32_t
)0x01)

704 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

707 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

708 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

711 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

714 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

717 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

720 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

721 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL9
);

724 
RCC
->
CR
 |
RCC_CR_PLLON
;

727 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

732 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

733 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

736 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

749 
	}
}

	@FWlib/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt8_t
 
NVIC_IRQCh™√l
;

56 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

64 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

67 } 
	tNVIC_InôTy≥Def
;

114 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

115 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

116 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

117 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

126 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

127 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

128 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

129 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

130 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

140 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

142 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

144 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

146 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

148 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

151 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

152 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

157 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

159 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

161 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

171 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

172 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

173 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

174 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

195 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

196 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

197 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

198 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

199 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

201 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
ADC_Mode
;

55 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

59 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

63 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

67 
uöt32_t
 
ADC_D©aAlign
;

70 
uöt8_t
 
ADC_NbrOfCh™√l
;

73 }
	tADC_InôTy≥Def
;

82 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

83 ((
PERIPH
Ë=
ADC2
) || \

84 ((
PERIPH
Ë=
ADC3
))

	)

86 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

87 ((
PERIPH
Ë=
ADC3
))

	)

93 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

94 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

95 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

96 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

97 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

98 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

99 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

100 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

101 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

102 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

104 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

105 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

106 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

107 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

110 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

112 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

	)

122 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

132 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

139 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

	)

161 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

162 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

163 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

164 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

173 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

174 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

175 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

176 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

177 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

178 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

179 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

180 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

181 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

182 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

183 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

184 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

185 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

186 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

187 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

188 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

189 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

190 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

192 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

193 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

195 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
) || \

196 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

	)

212 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

213 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

214 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

215 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

216 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

217 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

218 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

219 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

220 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
) || \

221 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

	)

236 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

242 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

246 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

252 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

253 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

	)

273 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

274 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

275 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

276 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

277 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

278 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

289 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

290 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

291 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

292 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

293 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

294 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

295 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

297 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

298 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

312 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

313 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

314 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

316 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

318 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

319 ((
IT
Ë=
ADC_IT_JEOC
))

	)

328 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

329 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

330 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

331 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

332 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

333 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

334 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
) || \

335 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

336 ((
FLAG
Ë=
ADC_FLAG_STRT
))

	)

345 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

355 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

365 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

375 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

386 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

395 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

405 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

427 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

428 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

429 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

434 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

435 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

436 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

437 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

439 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

440 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

441 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

442 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

444 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

445 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

451 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

452 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

453 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

454 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

455 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

456 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

457 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

458 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

460 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

462 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

464 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

58 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

59 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
) || \

60 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

	)

69 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

70 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

71 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

72 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

73 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
) || \

74 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

	)

85 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

86 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

87 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

88 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

89 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

90 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

91 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

92 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

93 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

94 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

95 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

96 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

97 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

98 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

99 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

100 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

101 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

102 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

103 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

104 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

105 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

106 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

107 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

108 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

109 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

110 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

111 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

112 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

113 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

114 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

115 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

116 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

117 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

118 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

119 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

120 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

121 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

122 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

123 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

124 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

125 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

126 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

128 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
) || \

129 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

130 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

131 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

132 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

133 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

134 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

135 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

136 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

137 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

138 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

139 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

140 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

141 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

	)

143 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

164 
BKP_DeInô
();

165 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

166 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

167 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

169 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

170 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

171 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

172 
FœgSètus
 
BKP_GëFœgSètus
();

173 
BKP_CÀ¨Fœg
();

174 
ITSètus
 
BKP_GëITSètus
();

175 
BKP_CÀ¨ITPídögBô
();

177 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

46 ((
PERIPH
Ë=
CAN2
))

	)

54 
uöt16_t
 
CAN_PªsˇÀr
;

56 
uöt8_t
 
CAN_Mode
;

59 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

66 
uöt8_t
 
CAN_BS2
;

69 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

72 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

75 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

78 
Fun˘i⁄ÆSèã
 
CAN_NART
;

81 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

84 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

86 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

133 
uöt32_t
 
StdId
;

136 
uöt32_t
 
ExtId
;

139 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

145 
uöt8_t
 
DLC
;

148 
uöt8_t
 
D©a
[8];

149 } 
	tC™TxMsg
;

157 
uöt32_t
 
StdId
;

160 
uöt32_t
 
ExtId
;

163 
uöt8_t
 
IDE
;

166 
uöt8_t
 
RTR
;

169 
uöt8_t
 
DLC
;

172 
uöt8_t
 
D©a
[8];

174 
uöt8_t
 
FMI
;

176 } 
	tC™RxMsg
;

190 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

191 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

201 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

202 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

203 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

204 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

206 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

207 ((
MODE
Ë=
CAN_Mode_Sûít
Ë|| ((MODEË=
CAN_Mode_Sûít_Lo›Back
))

	)

216 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

217 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

218 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

219 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

221 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

222 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

231 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

232 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

233 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

234 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

235 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

236 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

237 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

238 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

239 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

240 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

241 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

242 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

243 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

244 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

245 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

246 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

248 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

257 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

258 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

259 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

260 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

261 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

262 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

263 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

264 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

266 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

276 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

285 #i‚de‡
STM32F10X_CL


286 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

288 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

298 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

301 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

302 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

311 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

314 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

315 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

325 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

327 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

328 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

337 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

346 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

347 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

348 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

349 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

359 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

360 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

361 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

371 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

372 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

373 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

383 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

384 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

385 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

386 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

396 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

397 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

399 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

409 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

410 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

420 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

421 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

431 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

432 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

433 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

435 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
) ||\

436 ((
FLAG
Ë=
CAN_FLAG_BOF
))

	)

446 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

447 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

448 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

449 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

450 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

451 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

452 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

453 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

454 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

455 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

456 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

457 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

458 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

459 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

460 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

461 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

462 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

464 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

465 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

466 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

467 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

468 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

469 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

470 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

472 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
) ||\

473 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

474 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

475 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

476 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

477 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

498 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

499 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

500 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

501 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

502 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

503 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

505 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

506 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

507 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

508 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

509 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

510 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

512 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

513 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

514 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

515 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

516 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

518 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_cec.h

23 #i‚de‡
__STM32F10x_CEC_H


24 
	#__STM32F10x_CEC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
CEC_BôTimögMode
;

53 
uöt16_t
 
CEC_BôPîiodMode
;

55 }
	tCEC_InôTy≥Def
;

68 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

69 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

71 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
) || \

72 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

	)

80 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

81 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

83 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
) || \

84 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

	)

93 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

94 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

95 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

96 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

97 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
) || \

98 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

	)

107 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

115 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

128 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

129 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

130 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

131 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

132 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

133 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

134 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

139 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

140 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

141 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

142 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

143 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

144 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

145 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

147 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

149 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
) || \

150 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

154 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

	)

176 
CEC_DeInô
();

177 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

178 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

181 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

182 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

183 
uöt8_t
 
CEC_Re˚iveD©aByã
();

184 
CEC_SèπOfMesßge
();

185 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

186 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

187 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

188 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

189 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

191 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

26 
	~"°m32f10x_adc.h
"

27 
	~"°m32f10x_bkp.h
"

28 
	~"°m32f10x_ˇn.h
"

29 
	~"°m32f10x_¸c.h
"

30 
	~"°m32f10x_dac.h
"

31 
	~"°m32f10x_dbgmcu.h
"

32 
	~"°m32f10x_dma.h
"

33 
	~"°m32f10x_exti.h
"

34 
	~"°m32f10x_Êash.h
"

35 
	~"°m32f10x_fsmc.h
"

36 
	~"°m32f10x_gpio.h
"

37 
	~"°m32f10x_i2c.h
"

38 
	~"°m32f10x_iwdg.h
"

39 
	~"°m32f10x_pwr.h
"

40 
	~"°m32f10x_rcc.h
"

41 
	~"°m32f10x_πc.h
"

42 
	~"°m32f10x_sdio.h
"

43 
	~"°m32f10x_•i.h
"

44 
	~"°m32f10x_tim.h
"

45 
	~"°m32f10x_ußπ.h
"

46 
	~"°m32f10x_wwdg.h
"

47 
	~"misc.h
"

56 #ifde‡ 
USE_FULL_ASSERT


66 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

68 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

70 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@FWlib/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

69 
CRC_Re£tDR
();

70 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

71 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

72 
uöt32_t
 
CRC_GëCRC
();

73 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

74 
uöt8_t
 
CRC_GëIDRegi°î
();

76 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DAC_Triggî
;

54 
uöt32_t
 
DAC_WaveGíî©i⁄
;

58 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

62 
uöt32_t
 
DAC_OuçutBuf„r
;

64 }
	tDAC_InôTy≥Def
;

78 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

83 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

85 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

86 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

87 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

89 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

90 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

91 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

92 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

94 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

112 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

113 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

114 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

115 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

126 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

127 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

128 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

129 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

130 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

131 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

132 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

133 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

134 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

135 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

136 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

137 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

151 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

183 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

184 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

185 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

186 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

195 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

196 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

197 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

198 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

207 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

208 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

209 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

210 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

211 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

212 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

221 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

222 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

223 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

224 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

233 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

237 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

242 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

243 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

253 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

254 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

277 
DAC_DeInô
();

278 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

279 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

281 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

282 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

289 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

291 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

292 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

293 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

294 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

296 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

299 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

57 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

58 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

59 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

60 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

61 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

62 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

63 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

64 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

65 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

66 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

67 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

68 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

69 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

71 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

72 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

73 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

76 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

77 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

78 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

80 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

97 
uöt32_t
 
DBGMCU_GëREVID
();

98 
uöt32_t
 
DBGMCU_GëDEVID
();

99 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

101 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

53 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

55 
uöt32_t
 
DMA_DIR
;

58 
uöt32_t
 
DMA_Buf„rSize
;

62 
uöt32_t
 
DMA_PîùhîÆInc
;

65 
uöt32_t
 
DMA_Mem‹yInc
;

68 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

71 
uöt32_t
 
DMA_Mem‹yD©aSize
;

74 
uöt32_t
 
DMA_Mode
;

79 
uöt32_t
 
DMA_Pri‹ôy
;

82 
uöt32_t
 
DMA_M2M
;

84 }
	tDMA_InôTy≥Def
;

94 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
) || \

95 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

101 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

	)

111 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

112 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

113 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
) || \

114 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

	)

123 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

124 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

125 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

126 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

135 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

136 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

137 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

138 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

147 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

148 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

149 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

150 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

151 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

161 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

162 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

163 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

165 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

	)

175 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

176 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

177 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

186 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

187 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

188 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

189 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

190 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
) || \

191 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

	)

202 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

203 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

204 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

214 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

215 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

216 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

217 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

219 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

220 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

221 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

222 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

223 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

224 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

225 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

226 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

227 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

228 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

229 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

230 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

231 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

232 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

234 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

235 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

236 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

237 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

238 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

239 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

240 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

241 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

242 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

243 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

244 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

245 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

246 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

248 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

249 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

250 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

251 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

252 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

253 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

254 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

255 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

256 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

257 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

258 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

259 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

260 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

261 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

262 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

263 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

264 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

265 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

266 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

267 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

269 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

271 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
) || \

272 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

273 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

274 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

275 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

276 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

277 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

278 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

279 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

280 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

281 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

282 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

283 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

284 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

285 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

286 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

287 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

288 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

289 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

290 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

291 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

292 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

293 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

294 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

	)

303 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

304 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

305 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

306 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

307 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

308 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

309 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

310 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

311 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

312 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

313 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

314 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

315 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

316 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

317 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

318 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

319 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

320 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

321 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

322 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

323 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

324 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

327 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

328 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

329 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

330 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

332 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

333 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

334 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

335 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

336 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

337 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

338 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

339 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

340 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

341 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

342 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

343 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

344 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

345 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

346 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

347 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

348 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

349 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

350 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

351 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

353 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

355 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
) || \

356 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

	)

387 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

409 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

410 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

411 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

415 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

416 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

417 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

418 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

420 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
EXTI_Mode_I¡îru±
 = 0x00,

52 
EXTI_Mode_Evít
 = 0x04

53 }
	tEXTIMode_Ty≥Def
;

55 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

63 
EXTI_Triggî_Risög
 = 0x08,

64 
EXTI_Triggî_FÆlög
 = 0x0C,

65 
EXTI_Triggî_Risög_FÆlög
 = 0x10

66 }
	tEXTITriggî_Ty≥Def
;

68 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

69 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

77 
uöt32_t
 
EXTI_Löe
;

80 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

83 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

86 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

88 }
	tEXTI_InôTy≥Def
;

102 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

103 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

104 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

105 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

106 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

107 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

108 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

109 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

110 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

111 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

112 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

113 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

114 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

115 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

116 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

117 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

118 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

119 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

120 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

122 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

124 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

125 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

126 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

127 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

128 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

129 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

130 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

131 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

132 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

133 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

134 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

	)

157 
EXTI_DeInô
();

158 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

159 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

161 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

162 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

163 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

164 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

166 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
FLASH_BUSY
 = 1,

52 
FLASH_ERROR_PG
,

53 
FLASH_ERROR_WRP
,

54 
FLASH_COMPLETE
,

55 
FLASH_TIMEOUT


56 }
	tFLASH_Sètus
;

70 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

71 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

72 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

73 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

74 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

	)

84 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

86 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
) || \

87 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

	)

96 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

97 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

98 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
) || \

99 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

	)

109 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

110 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

111 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

112 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

113 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

114 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

115 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

116 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

119 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

120 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

121 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

122 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

123 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

124 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

125 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

126 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

127 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

128 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

129 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

131 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

132 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

133 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

134 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

135 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

145 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

147 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

149 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

151 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

153 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

155 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

157 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

159 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

161 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

163 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

165 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

167 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

169 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

171 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

173 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

175 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

177 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

179 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

181 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

183 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

185 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

187 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

189 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

191 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

193 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

195 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

197 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

199 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

201 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

203 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

205 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

207 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

211 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

213 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

215 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

217 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

227 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

228 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

229 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

239 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

240 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

241 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

251 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

252 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

253 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

255 #ifde‡
STM32F10X_XL


262 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

264 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

267 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

275 #ifde‡
STM32F10X_XL


276 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

277 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

279 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

280 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

282 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

283 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

284 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

286 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

287 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

288 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

289 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

291 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

301 #ifde‡
STM32F10X_XL


302 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

303 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

304 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

305 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

307 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

308 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

309 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

310 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

312 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

313 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

314 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

315 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

316 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

318 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

319 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

320 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

322 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

	)

327 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

328 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

329 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

330 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

331 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

333 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

334 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

335 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

336 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

338 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

339 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

340 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

	)

367 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

368 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

369 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

370 
FLASH_U∆ock
();

371 
FLASH_Lock
();

372 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

373 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

374 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

375 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

376 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

379 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

380 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

381 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

382 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

383 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

384 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

385 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

387 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_Sètus
 
FLASH_GëSètus
();

389 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

392 
FLASH_U∆ockB™k1
();

393 
FLASH_LockB™k1
();

394 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

395 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

396 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

398 #ifde‡
STM32F10X_XL


400 
FLASH_U∆ockB™k2
();

401 
FLASH_LockB™k2
();

402 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

403 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

404 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

405 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

408 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
FSMC_AddªssSëupTime
;

56 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

61 
uöt32_t
 
FSMC_D©aSëupTime
;

66 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

71 
uöt32_t
 
FSMC_CLKDivisi⁄
;

75 
uöt32_t
 
FSMC_D©aL©ícy
;

83 
uöt32_t
 
FSMC_Ac˚ssMode
;

85 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

93 
uöt32_t
 
FSMC_B™k
;

96 
uöt32_t
 
FSMC_D©aAddªssMux
;

100 
uöt32_t
 
FSMC_Mem‹yTy≥
;

104 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

107 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

111 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

115 
uöt32_t
 
FSMC_WøpMode
;

119 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

124 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

127 
uöt32_t
 
FSMC_WaôSig«l
;

131 
uöt32_t
 
FSMC_ExãndedMode
;

134 
uöt32_t
 
FSMC_WrôeBur°
;

137 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

139 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

140 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

180 
uöt32_t
 
FSMC_B™k
;

183 
uöt32_t
 
FSMC_Waô„©uª
;

186 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

189 
uöt32_t
 
FSMC_ECC
;

192 
uöt32_t
 
FSMC_ECCPageSize
;

195 
uöt32_t
 
FSMC_TCLRSëupTime
;

199 
uöt32_t
 
FSMC_TARSëupTime
;

203 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

205 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

206 }
	tFSMC_NANDInôTy≥Def
;

214 
uöt32_t
 
FSMC_Waô„©uª
;

217 
uöt32_t
 
FSMC_TCLRSëupTime
;

221 
uöt32_t
 
FSMC_TARSëupTime
;

226 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

228 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

230 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

231 }
	tFSMC_PCCARDInôTy≥Def
;

244 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

245 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

246 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

247 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

255 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

256 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

264 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

269 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

270 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

271 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

272 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

274 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

275 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

277 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

278 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

281 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

282 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

293 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

294 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

295 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

296 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

306 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

307 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

308 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

309 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

310 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

311 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

321 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

322 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

323 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

324 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

346 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

347 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

348 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

349 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

359 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

361 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

362 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

385 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

386 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

387 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

388 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

398 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

399 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

400 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

401 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

410 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

411 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

413 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

414 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

436 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

446 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

456 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

466 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

476 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

486 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

496 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

497 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

498 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

499 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

500 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

501 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

502 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

503 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

521 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

522 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

523 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

524 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

535 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

537 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

538 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

548 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

549 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

550 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

551 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

552 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

553 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

554 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

555 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

556 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

557 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

558 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

559 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

569 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

579 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

589 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

599 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

609 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

619 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

629 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

630 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

631 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

632 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

633 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

634 ((
IT
Ë=
FSMC_IT_Levñ
) || \

635 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

644 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

645 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

646 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

647 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

648 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

649 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

650 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

651 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

653 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

679 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

680 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

681 
FSMC_PCCARDDeInô
();

682 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

683 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

684 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

685 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

686 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

687 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

688 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

693 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

695 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

696 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

697 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

699 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

46 ((
PERIPH
Ë=
GPIOB
) || \

47 ((
PERIPH
Ë=
GPIOC
) || \

48 ((
PERIPH
Ë=
GPIOD
) || \

49 ((
PERIPH
Ë=
GPIOE
) || \

50 ((
PERIPH
Ë=
GPIOF
) || \

51 ((
PERIPH
Ë=
GPIOG
))

	)

59 
GPIO_S≥ed_10MHz
 = 1,

60 
GPIO_S≥ed_2MHz
,

61 
GPIO_S≥ed_50MHz


62 }
	tGPIOS≥ed_Ty≥Def
;

63 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
) || \

64 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

	)

71 { 
GPIO_Mode_AIN
 = 0x0,

72 
GPIO_Mode_IN_FLOATING
 = 0x04,

73 
GPIO_Mode_IPD
 = 0x28,

74 
GPIO_Mode_IPU
 = 0x48,

75 
GPIO_Mode_Out_OD
 = 0x14,

76 
GPIO_Mode_Out_PP
 = 0x10,

77 
GPIO_Mode_AF_OD
 = 0x1C,

78 
GPIO_Mode_AF_PP
 = 0x18

79 }
	tGPIOMode_Ty≥Def
;

81 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
) || \

82 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

83 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

84 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

	)

92 
uöt16_t
 
GPIO_Pö
;

95 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

98 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

100 }
	tGPIO_InôTy≥Def
;

108 { 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

112 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

126 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

127 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

128 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

129 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

130 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

131 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

132 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

133 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

134 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

135 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

136 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

137 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

138 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

139 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

140 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

141 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

142 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

144 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

146 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

147 ((
PIN
Ë=
GPIO_Pö_1
) || \

148 ((
PIN
Ë=
GPIO_Pö_2
) || \

149 ((
PIN
Ë=
GPIO_Pö_3
) || \

150 ((
PIN
Ë=
GPIO_Pö_4
) || \

151 ((
PIN
Ë=
GPIO_Pö_5
) || \

152 ((
PIN
Ë=
GPIO_Pö_6
) || \

153 ((
PIN
Ë=
GPIO_Pö_7
) || \

154 ((
PIN
Ë=
GPIO_Pö_8
) || \

155 ((
PIN
Ë=
GPIO_Pö_9
) || \

156 ((
PIN
Ë=
GPIO_Pö_10
) || \

157 ((
PIN
Ë=
GPIO_Pö_11
) || \

158 ((
PIN
Ë=
GPIO_Pö_12
) || \

159 ((
PIN
Ë=
GPIO_Pö_13
) || \

160 ((
PIN
Ë=
GPIO_Pö_14
) || \

161 ((
PIN
Ë=
GPIO_Pö_15
))

	)

171 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

176 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

177 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

178 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

179 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

180 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

181 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

182 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

183 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

184 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

185 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

186 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

187 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

188 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

189 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

191 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

193 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

194 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

195 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

196 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

197 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

198 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201000Ë

	)

199 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

202 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

204 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

205 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

206 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

207 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

208 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

210 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

211 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

212 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

213 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

214 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

215 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
) || \

219 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

220 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

221 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

222 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

223 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

224 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

225 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

226 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

227 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

228 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

229 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
))

	)

248 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

249 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

250 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

251 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

252 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

253 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

254 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

255 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

256 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

257 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

258 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

259 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

	)

261 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

266 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

267 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

	)

277 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

278 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

279 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

280 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

281 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

282 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

283 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

284 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

285 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

286 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

287 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

288 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

289 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

290 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

291 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

292 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

294 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

295 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

296 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

297 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

298 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

299 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

300 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

318 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

319 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

321 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
) || \

322 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

	)

343 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

344 
GPIO_AFIODeInô
();

345 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

346 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

347 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

348 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

349 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

350 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

351 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

352 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

353 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

354 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

355 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

357 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

359 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

360 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

362 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
I2C_ClockS≥ed
;

54 
uöt16_t
 
I2C_Mode
;

57 
uöt16_t
 
I2C_DutyCy˛e
;

60 
uöt16_t
 
I2C_OwnAddªss1
;

63 
uöt16_t
 
I2C_Ack
;

66 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

68 }
	tI2C_InôTy≥Def
;

79 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

80 ((
PERIPH
Ë=
I2C2
))

	)

85 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

86 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

87 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

88 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

89 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

99 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

100 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

101 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

102 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

111 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

112 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

113 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

114 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

123 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

124 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

125 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

126 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

135 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

136 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

137 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

138 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

147 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

148 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

149 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

150 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

151 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

152 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

153 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

154 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

155 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

156 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

157 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

173 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

174 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

175 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

176 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

185 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

186 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

187 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

188 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

197 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

198 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

199 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

200 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

209 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

210 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

211 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

212 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

213 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

214 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

215 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

216 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

217 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

218 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

219 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

220 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

221 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

222 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

224 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

226 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

227 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

228 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

229 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

230 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

231 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

232 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

245 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

246 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

247 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

248 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

249 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

250 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

251 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

257 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

258 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

259 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

260 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

261 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

262 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

263 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

264 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

265 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

266 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

267 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

268 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

269 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

270 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

272 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

274 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

275 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

276 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

277 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

278 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

279 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

280 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

281 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

282 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

283 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

284 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

306 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

334 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

335 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

337 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

370 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

374 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

376 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

411 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

412 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

415 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

416 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

419 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

450 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

452 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

456 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

457 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

459 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

463 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

464 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

465 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

466 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

467 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

468 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

469 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

470 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

471 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

472 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

473 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

474 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

475 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

476 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

481 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

482 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

491 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

500 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

521 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

522 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

523 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

524 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

525 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

526 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

527 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

528 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

531 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

532 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

533 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

534 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

535 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

536 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

537 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

538 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

540 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

542 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

544 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

631 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

637 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

643 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

649 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

650 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

651 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

653 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

58 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

59 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

60 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

91 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

92 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

93 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

94 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

115 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

116 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

117 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

118 
IWDG_RñﬂdCou¡î
();

119 
IWDG_E«bÀ
();

120 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

122 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

58 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

59 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

60 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

61 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

62 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

63 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

64 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

65 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

66 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

	)

77 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

78 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

79 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

80 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

89 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

90 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

91 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

101 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

102 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

103 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

104 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

105 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

	)

107 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

128 
PWR_DeInô
();

129 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

130 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

132 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

133 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

134 
PWR_E¡îSTANDBYMode
();

135 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

136 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

138 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SYSCLK_Fªquícy
;

48 
uöt32_t
 
HCLK_Fªquícy
;

49 
uöt32_t
 
PCLK1_Fªquícy
;

50 
uöt32_t
 
PCLK2_Fªquícy
;

51 
uöt32_t
 
ADCCLK_Fªquícy
;

52 }
	tRCC_ClocksTy≥Def
;

66 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

67 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

68 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

69 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

70 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

80 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

82 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_CL
)

83 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

84 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

85 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

86 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

	)

89 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

91 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

	)

101 #i‚de‡
STM32F10X_CL


102 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

104 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

105 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

106 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

107 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

108 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

109 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

110 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

111 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

112 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

113 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

114 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

115 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

116 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

117 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
) || \

118 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

119 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

120 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

121 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

122 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

123 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

124 ((
MUL
Ë=
RCC_PLLMul_16
))

	)

127 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

128 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

129 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

130 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

131 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

132 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

133 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

135 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

136 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

137 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

138 ((
MUL
Ë=
RCC_PLLMul_6_5
))

	)

147 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

148 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

149 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

150 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

151 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

152 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

153 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

154 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

155 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

156 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

157 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

158 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

159 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

160 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

161 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

162 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

163 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

165 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
) || \

166 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

	)

182 #ifde‡
STM32F10X_CL


184 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

185 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

187 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
) || \

188 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

	)

189 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

191 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

199 #ifde‡
STM32F10X_CL


204 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

205 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

206 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

207 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

208 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

209 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

210 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

211 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

212 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

213 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

214 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

215 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

216 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

217 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

218 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

219 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

221 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
) || \

222 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

	)

238 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

239 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

240 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

241 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

242 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

243 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

244 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

245 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

246 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

248 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
) || \

249 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_20
))

	)

262 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

263 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

264 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

265 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

266 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

267 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

268 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

269 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

270 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

272 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
) || \

273 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_20
))

	)

288 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

289 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

290 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

291 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

292 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

302 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

303 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

304 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

305 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

306 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

307 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

308 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

309 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

310 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

311 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

312 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

324 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

325 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

326 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

327 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

328 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

329 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

330 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

340 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

341 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

342 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

343 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

344 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

345 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

347 #i‚de‡
STM32F10X_CL


348 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

349 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

350 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

351 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

	)

352 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

354 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

355 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

356 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

357 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

358 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

359 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

360 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

	)

361 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

369 #i‚de‡
STM32F10X_CL


374 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

375 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

377 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
) || \

378 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

	)

386 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

389 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
) || \

390 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

	)

397 #ifde‡
STM32F10X_CL


401 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

402 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

404 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
) || \

405 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

	)

413 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

414 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

416 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
) || \

417 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

	)

428 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

429 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

430 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

431 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

432 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
) || \

433 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

	)

442 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

443 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

444 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

445 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

446 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

455 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

456 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

457 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

458 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

459 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

	)

469 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

470 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

471 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

472 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

473 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

475 #i‚de‡
STM32F10X_CL


476 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

477 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

478 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

480 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

481 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

485 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

486 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

496 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

497 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

498 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

499 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

500 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

501 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

502 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

503 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

504 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

505 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

506 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

507 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

508 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

509 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

510 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

511 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

512 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

513 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

514 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

515 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

516 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

518 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

527 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

528 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

529 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

530 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

531 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

532 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

533 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

534 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

535 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

536 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

537 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

538 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

539 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

540 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

541 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

542 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

543 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

544 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

545 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

546 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

547 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

548 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

549 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

550 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

551 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

553 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

563 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

564 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

565 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

566 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

567 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

569 #i‚de‡
STM32F10X_CL


570 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

571 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

572 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

	)

574 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

575 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

576 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

577 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

579 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

580 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

581 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

582 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

	)

594 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

595 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

596 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

597 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

598 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

599 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

600 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

601 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

602 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

603 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

604 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

606 #i‚de‡
STM32F10X_CL


607 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

608 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

610 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

612 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

614 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

615 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

616 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

617 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

620 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

622 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

625 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

646 
RCC_DeInô
();

647 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

648 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

649 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

650 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

651 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

652 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

654 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

655 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

658 #ifde‡ 
STM32F10X_CL


659 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

660 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

661 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

662 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

663 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

666 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

667 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

668 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

669 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

670 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

673 #i‚de‡
STM32F10X_CL


674 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

676 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

679 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

681 #ifde‡
STM32F10X_CL


682 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

683 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

686 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

687 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

688 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

689 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

691 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

695 #ifde‡
STM32F10X_CL


696 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

699 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

704 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

705 
RCC_CÀ¨Fœg
();

706 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

707 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

709 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

58 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

59 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

60 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

61 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
) || \

62 ((
IT
Ë=
RTC_IT_SEC
))

	)

71 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

72 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

73 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

74 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

75 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

76 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

77 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
) || \

78 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

79 ((
FLAG
Ë=
RTC_FLAG_SEC
))

	)

80 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

102 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

103 
RTC_E¡îC⁄figMode
();

104 
RTC_ExôC⁄figMode
();

105 
uöt32_t
 
RTC_GëCou¡î
();

106 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

107 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

108 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

109 
uöt32_t
 
RTC_GëDividî
();

110 
RTC_WaôF‹La°Task
();

111 
RTC_WaôF‹Synchro
();

112 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

113 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

114 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

115 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

117 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SDIO_ClockEdge
;

50 
uöt32_t
 
SDIO_ClockBy∑ss
;

54 
uöt32_t
 
SDIO_ClockPowîSave
;

58 
uöt32_t
 
SDIO_BusWide
;

61 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

64 
uöt8_t
 
SDIO_ClockDiv
;

67 } 
	tSDIO_InôTy≥Def
;

71 
uöt32_t
 
SDIO_Argumít
;

76 
uöt32_t
 
SDIO_CmdIndex
;

78 
uöt32_t
 
SDIO_Re•⁄£
;

81 
uöt32_t
 
SDIO_Waô
;

84 
uöt32_t
 
SDIO_CPSM
;

87 } 
	tSDIO_CmdInôTy≥Def
;

91 
uöt32_t
 
SDIO_D©aTimeOut
;

93 
uöt32_t
 
SDIO_D©aLígth
;

95 
uöt32_t
 
SDIO_D©aBlockSize
;

98 
uöt32_t
 
SDIO_Tøns„rDú
;

102 
uöt32_t
 
SDIO_Tøns„rMode
;

105 
uöt32_t
 
SDIO_DPSM
;

108 } 
	tSDIO_D©aInôTy≥Def
;

122 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

123 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

124 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

125 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

134 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

135 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

136 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

137 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

146 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

147 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

148 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

149 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

158 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

159 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

160 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

161 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

162 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

172 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

174 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

175 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

184 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

185 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

186 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

196 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

197 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

198 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

199 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

200 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

201 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

202 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

203 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

204 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

205 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

206 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

207 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

208 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

209 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

210 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

211 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

212 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

213 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

214 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

215 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

216 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

217 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

218 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

219 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

220 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

229 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

238 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

239 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

240 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

241 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

242 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

252 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

253 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

254 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

255 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

256 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

265 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

266 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

267 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

276 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

277 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

278 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

279 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

280 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

281 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

290 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

299 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

300 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

301 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

302 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

303 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

304 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

305 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

306 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

307 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

308 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

309 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

310 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

311 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

312 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

313 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

314 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

337 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

338 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

339 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

340 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

349 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

350 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

351 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

352 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

361 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

363 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

372 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

373 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

374 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

375 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

376 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

377 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

378 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

379 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

380 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

381 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

382 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

383 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

384 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

385 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

386 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

387 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

388 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

389 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

390 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

391 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

392 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

393 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

394 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

395 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

396 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

397 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

421 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

423 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

424 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

426 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

428 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

429 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

430 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

431 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

432 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

433 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXACT
) || \

436 ((
IT
Ë=
SDIO_IT_RXACT
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

444 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

446 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

448 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

458 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

459 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

460 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

461 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

482 
SDIO_DeInô
();

483 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

484 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

487 
uöt32_t
 
SDIO_GëPowîSèã
();

488 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

491 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

492 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

493 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

494 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
uöt32_t
 
SDIO_GëD©aCou¡î
();

497 
uöt32_t
 
SDIO_RódD©a
();

498 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

499 
uöt32_t
 
SDIO_GëFIFOCou¡
();

500 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

503 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

509 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

510 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

511 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

513 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
SPI_Dúe˘i⁄
;

54 
uöt16_t
 
SPI_Mode
;

57 
uöt16_t
 
SPI_D©aSize
;

60 
uöt16_t
 
SPI_CPOL
;

63 
uöt16_t
 
SPI_CPHA
;

66 
uöt16_t
 
SPI_NSS
;

70 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

76 
uöt16_t
 
SPI_Fú°Bô
;

79 
uöt16_t
 
SPI_CRCPﬁynomül
;

80 }
	tSPI_InôTy≥Def
;

89 
uöt16_t
 
I2S_Mode
;

92 
uöt16_t
 
I2S_Sènd¨d
;

95 
uöt16_t
 
I2S_D©aF‹m©
;

98 
uöt16_t
 
I2S_MCLKOuçut
;

101 
uöt32_t
 
I2S_AudioFªq
;

104 
uöt16_t
 
I2S_CPOL
;

106 }
	tI2S_InôTy≥Def
;

116 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

117 ((
PERIPH
Ë=
SPI2
) || \

118 ((
PERIPH
Ë=
SPI3
))

	)

120 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
))

	)

127 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

128 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

129 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

131 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

132 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

143 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

144 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

145 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

146 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

155 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

156 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

158 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

167 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

168 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

169 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

170 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

179 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

181 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

182 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

191 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

192 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

193 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

194 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

203 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

205 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

206 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

207 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

208 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

209 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

210 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

211 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

212 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

227 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

229 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

230 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

239 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

240 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

241 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

242 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

243 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

244 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

245 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îRx
Ë)

	)

255 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

256 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

257 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

258 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

259 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

260 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

261 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

273 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

274 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

275 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

276 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

277 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

278 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

289 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

290 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

291 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

292 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

301 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

302 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

303 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

304 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

305 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

306 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

307 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

308 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

309 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

310 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_96k
) || \

311 ((
FREQ
Ë=
I2S_AudioFªq_48k
) || \

312 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

313 ((
FREQ
Ë=
I2S_AudioFªq_32k
) || \

314 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

316 ((
FREQ
Ë=
I2S_AudioFªq_11k
) || \

317 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

318 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

327 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

328 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

329 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

330 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

339 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

340 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

341 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

350 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

351 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

352 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

353 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

362 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

363 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

364 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

373 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

374 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

375 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

376 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

385 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

386 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

387 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

388 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

389 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

390 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

391 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

392 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

393 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

394 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

395 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

396 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
) || \

397 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

398 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

	)

407 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

408 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

409 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

410 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

411 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

412 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

413 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

414 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

415 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

416 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

417 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

418 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

419 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

	)

428 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

449 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

450 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

451 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

452 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

453 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

454 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

458 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

459 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

460 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

461 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

463 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

466 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

467 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

468 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

469 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

470 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

471 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

473 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

52 
uöt16_t
 
TIM_PªsˇÀr
;

55 
uöt16_t
 
TIM_Cou¡îMode
;

58 
uöt16_t
 
TIM_Pîiod
;

62 
uöt16_t
 
TIM_ClockDivisi⁄
;

65 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

73 } 
	tTIM_TimeBa£InôTy≥Def
;

81 
uöt16_t
 
TIM_OCMode
;

84 
uöt16_t
 
TIM_OuçutSèã
;

87 
uöt16_t
 
TIM_OuçutNSèã
;

91 
uöt16_t
 
TIM_Pul£
;

94 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

97 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

101 
uöt16_t
 
TIM_OCIdÀSèã
;

105 
uöt16_t
 
TIM_OCNIdÀSèã
;

108 } 
	tTIM_OCInôTy≥Def
;

117 
uöt16_t
 
TIM_Ch™√l
;

120 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

123 
uöt16_t
 
TIM_ICSñe˘i⁄
;

126 
uöt16_t
 
TIM_ICPªsˇÀr
;

129 
uöt16_t
 
TIM_ICFûãr
;

131 } 
	tTIM_ICInôTy≥Def
;

141 
uöt16_t
 
TIM_OSSRSèã
;

144 
uöt16_t
 
TIM_OSSISèã
;

147 
uöt16_t
 
TIM_LOCKLevñ
;

150 
uöt16_t
 
TIM_DódTime
;

154 
uöt16_t
 
TIM_Bªak
;

157 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

160 
uöt16_t
 
TIM_Autom©icOuçut
;

162 } 
	tTIM_BDTRInôTy≥Def
;

168 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

169 ((
PERIPH
Ë=
TIM2
) || \

170 ((
PERIPH
Ë=
TIM3
) || \

171 ((
PERIPH
Ë=
TIM4
) || \

172 ((
PERIPH
Ë=
TIM5
) || \

173 ((
PERIPH
Ë=
TIM6
) || \

174 ((
PERIPH
Ë=
TIM7
) || \

175 ((
PERIPH
Ë=
TIM8
) || \

176 ((
PERIPH
Ë=
TIM9
) || \

177 ((
PERIPH
Ë=
TIM10
)|| \

178 ((
PERIPH
Ë=
TIM11
)|| \

179 ((
PERIPH
Ë=
TIM12
)|| \

180 ((
PERIPH
Ë=
TIM13
)|| \

181 ((
PERIPH
Ë=
TIM14
)|| \

182 ((
PERIPH
Ë=
TIM15
)|| \

183 ((
PERIPH
Ë=
TIM16
)|| \

184 ((
PERIPH
Ë=
TIM17
))

	)

187 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

188 ((
PERIPH
Ë=
TIM8
))

	)

191 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

192 ((
PERIPH
Ë=
TIM8
) || \

193 ((
PERIPH
Ë=
TIM15
)|| \

194 ((
PERIPH
Ë=
TIM16
)|| \

195 ((
PERIPH
Ë=
TIM17
))

	)

198 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

199 ((
PERIPH
Ë=
TIM2
) || \

200 ((
PERIPH
Ë=
TIM3
) || \

201 ((
PERIPH
Ë=
TIM4
) || \

202 ((
PERIPH
Ë=
TIM5
) || \

203 ((
PERIPH
Ë=
TIM8
))

	)

206 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

207 ((
PERIPH
Ë=
TIM2
) || \

208 ((
PERIPH
Ë=
TIM3
) || \

209 ((
PERIPH
Ë=
TIM4
) || \

210 ((
PERIPH
Ë=
TIM5
) || \

211 ((
PERIPH
Ë=
TIM8
) || \

212 ((
PERIPH
Ë=
TIM15
)|| \

213 ((
PERIPH
Ë=
TIM16
)|| \

214 ((
PERIPH
Ë=
TIM17
))

	)

217 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

218 ((
PERIPH
Ë=
TIM2
) || \

219 ((
PERIPH
Ë=
TIM3
) || \

220 ((
PERIPH
Ë=
TIM4
) || \

221 ((
PERIPH
Ë=
TIM5
) || \

222 ((
PERIPH
Ë=
TIM8
) || \

223 ((
PERIPH
Ë=
TIM15
))

	)

226 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

227 ((
PERIPH
Ë=
TIM2
) || \

228 ((
PERIPH
Ë=
TIM3
) || \

229 ((
PERIPH
Ë=
TIM4
) || \

230 ((
PERIPH
Ë=
TIM5
) || \

231 ((
PERIPH
Ë=
TIM8
) || \

232 ((
PERIPH
Ë=
TIM9
) || \

233 ((
PERIPH
Ë=
TIM12
)|| \

234 ((
PERIPH
Ë=
TIM15
))

	)

237 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

238 ((
PERIPH
Ë=
TIM2
) || \

239 ((
PERIPH
Ë=
TIM3
) || \

240 ((
PERIPH
Ë=
TIM4
) || \

241 ((
PERIPH
Ë=
TIM5
) || \

242 ((
PERIPH
Ë=
TIM6
) || \

243 ((
PERIPH
Ë=
TIM7
) || \

244 ((
PERIPH
Ë=
TIM8
) || \

245 ((
PERIPH
Ë=
TIM9
) || \

246 ((
PERIPH
Ë=
TIM12
)|| \

247 ((
PERIPH
Ë=
TIM15
))

	)

250 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

251 ((
PERIPH
Ë=
TIM2
) || \

252 ((
PERIPH
Ë=
TIM3
) || \

253 ((
PERIPH
Ë=
TIM4
) || \

254 ((
PERIPH
Ë=
TIM5
) || \

255 ((
PERIPH
Ë=
TIM8
) || \

256 ((
PERIPH
Ë=
TIM9
) || \

257 ((
PERIPH
Ë=
TIM10
)|| \

258 ((
PERIPH
Ë=
TIM11
)|| \

259 ((
PERIPH
Ë=
TIM12
)|| \

260 ((
PERIPH
Ë=
TIM13
)|| \

261 ((
PERIPH
Ë=
TIM14
)|| \

262 ((
PERIPH
Ë=
TIM15
)|| \

263 ((
PERIPH
Ë=
TIM16
)|| \

264 ((
PERIPH
Ë=
TIM17
))

	)

267 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

268 ((
PERIPH
Ë=
TIM2
) || \

269 ((
PERIPH
Ë=
TIM3
) || \

270 ((
PERIPH
Ë=
TIM4
) || \

271 ((
PERIPH
Ë=
TIM5
) || \

272 ((
PERIPH
Ë=
TIM6
) || \

273 ((
PERIPH
Ë=
TIM7
) || \

274 ((
PERIPH
Ë=
TIM8
) || \

275 ((
PERIPH
Ë=
TIM15
)|| \

276 ((
PERIPH
Ë=
TIM16
)|| \

277 ((
PERIPH
Ë=
TIM17
))

	)

287 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

288 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

289 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

290 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

291 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

292 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

293 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

294 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

295 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

297 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

298 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

299 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

300 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

301 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

303 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

304 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

305 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

315 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

316 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

318 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

327 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

329 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

330 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

331 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

332 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

335 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

336 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

337 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

338 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

348 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

349 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

350 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

351 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

352 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

362 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

363 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

364 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

367 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

368 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

380 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

381 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

382 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

383 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

392 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

393 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

394 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

395 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

404 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

405 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

406 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

407 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

416 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

417 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

418 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

419 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

428 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

429 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

430 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

431 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

440 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

441 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

442 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

443 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

452 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

453 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

454 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

455 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

464 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

465 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

466 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

467 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

476 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

477 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

478 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

479 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

488 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

489 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

490 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

491 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

492 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

493 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

504 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

505 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

506 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

507 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

516 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

517 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

518 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

519 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

528 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

529 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

530 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

531 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

540 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

541 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

542 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

543 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

552 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

553 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

554 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

555 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

	)

564 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

566 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

568 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

569 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

570 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

571 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

580 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

581 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

582 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

583 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

584 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

585 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

586 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

587 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

596 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

597 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

598 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

599 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

600 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

601 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

602 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

603 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

604 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

606 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

607 ((
IT
Ë=
TIM_IT_CC1
) || \

608 ((
IT
Ë=
TIM_IT_CC2
) || \

609 ((
IT
Ë=
TIM_IT_CC3
) || \

610 ((
IT
Ë=
TIM_IT_CC4
) || \

611 ((
IT
Ë=
TIM_IT_COM
) || \

612 ((
IT
Ë=
TIM_IT_Triggî
) || \

613 ((
IT
Ë=
TIM_IT_Bªak
))

	)

622 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

623 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

624 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

625 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

626 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

627 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

628 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

629 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

630 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

631 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

632 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

633 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

634 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

635 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

636 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

637 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

638 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

639 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

640 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

641 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

642 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

643 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

644 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

645 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

646 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

648 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

649 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

651 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

652 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

653 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

656 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

657 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

658 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_DCR
))

	)

668 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

669 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

670 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

671 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

672 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

673 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

674 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

675 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

676 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

677 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

678 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

679 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

680 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

681 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

682 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

683 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

684 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

685 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

686 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
) || \

687 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

688 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

689 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

690 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

691 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

	)

712 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

713 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

714 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

715 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

716 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

717 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

718 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

719 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

729 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

730 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

731 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

732 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

733 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

734 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

735 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

736 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

745 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

746 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

747 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

748 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

749 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

750 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

751 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

752 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

753 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

754 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

755 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

756 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

757 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

758 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

759 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

760 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

761 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

762 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

763 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

764 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

773 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

774 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

775 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

776 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
) || \

777 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

778 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

	)

786 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

787 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

788 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

789 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

798 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

799 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

800 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

801 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

810 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

811 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

812 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

813 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

822 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

823 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

824 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

825 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

826 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

827 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

837 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

838 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

839 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

840 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

841 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

842 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

843 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

844 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

845 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

855 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

858 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

859 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

860 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

869 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

870 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

871 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

872 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

881 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

882 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

883 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

884 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

894 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

895 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

896 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

897 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

906 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

907 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

908 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

909 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

910 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

911 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

912 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

913 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

914 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

915 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

916 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

917 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

918 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

919 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

930 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

931 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

932 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

933 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

934 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

935 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

936 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

937 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

946 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

947 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

948 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

949 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

958 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

959 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

960 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

961 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

962 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

963 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

964 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

965 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

966 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

967 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

968 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

969 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

970 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

971 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

972 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

973 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

974 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

975 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

976 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

977 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

980 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

981 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

984 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

993 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1002 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1023 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1024 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1025 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1026 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1027 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1028 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1029 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1030 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1031 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1032 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1033 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1034 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1035 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1036 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1037 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1039 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1040 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1041 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1042 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1043 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1044 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1045 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1046 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1047 
uöt16_t
 
ExtTRGFûãr
);

1048 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1049 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1050 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1051 
uöt16_t
 
ExtTRGFûãr
);

1052 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1053 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1054 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1055 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1056 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1057 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1058 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1059 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1060 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1061 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1062 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1063 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1064 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1065 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1066 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1067 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1068 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1069 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1070 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1071 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1072 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1073 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1074 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1075 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1076 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1077 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1078 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1079 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1080 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1081 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1082 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1083 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1084 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1085 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1086 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1087 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1088 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1089 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1090 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1091 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1092 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1093 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1094 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1095 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1096 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1097 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1098 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1099 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1100 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1101 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1102 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1103 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1104 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1105 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1106 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1107 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1108 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1109 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1110 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1111 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1112 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1113 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1114 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1116 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

106 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

107 ((
PERIPH
Ë=
USART2
) || \

108 ((
PERIPH
Ë=
USART3
) || \

109 ((
PERIPH
Ë=
UART4
) || \

110 ((
PERIPH
Ë=
UART5
))

	)

112 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

113 ((
PERIPH
Ë=
USART2
) || \

114 ((
PERIPH
Ë=
USART3
))

	)

116 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
) || \

119 ((
PERIPH
Ë=
UART4
))

	)

124 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

125 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

127 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

128 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

137 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

138 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

139 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

140 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

141 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

142 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

153 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

154 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

155 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

156 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

157 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

167 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

168 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

169 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

177 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

181 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

182 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

183 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

193 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

194 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

195 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

196 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

205 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

206 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

207 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

217 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

218 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

219 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

229 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

230 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

231 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

232 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

241 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

242 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

243 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

244 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

245 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

246 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

247 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

248 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

249 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

250 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

251 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

252 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

253 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

254 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

255 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

256 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

257 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

258 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

259 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

260 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

261 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

262 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

271 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

272 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

273 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

283 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

284 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

285 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

286 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

295 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

296 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

297 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

298 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

299 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

308 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

309 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

310 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

311 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

320 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

321 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

322 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

323 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

324 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

325 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

326 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

327 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

328 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

329 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

330 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

331 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

332 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

333 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

334 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

336 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

337 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
) &&\

338 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

339 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

	)

340 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

341 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

342 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

364 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

365 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

366 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

368 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

370 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

373 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

374 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

375 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

376 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

378 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

379 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

381 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

382 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

383 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

388 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

389 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

390 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

392 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

394 #ifde‡
__˝lu•lus


	@FWlib/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

58 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

59 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

60 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

61 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

62 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

65 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

66 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

87 
WWDG_DeInô
();

88 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

89 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

90 
WWDG_E«bÀIT
();

91 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

92 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

93 
FœgSètus
 
WWDG_GëFœgSètus
();

94 
WWDG_CÀ¨Fœg
();

96 #ifde‡
__˝lu•lus


	@uCOS-II/Ports/os_cpu.h

25 #i‚de‡ 
OS_CPU_H


26 
	#OS_CPU_H


	)

29 #ifde‡ 
OS_CPU_GLOBALS


30 
	#OS_CPU_EXT


	)

32 
	#OS_CPU_EXT
 

	)

42 
	tBOOLEAN
;

43 
	tINT8U
;

44 sig√d 
	tINT8S
;

45 
	tINT16U
;

46 sig√d 
	tINT16S
;

47 
	tINT32U
;

48 sig√d 
	tINT32S
;

49 
	tFP32
;

50 
	tFP64
;

52 
	tOS_STK
;

53 
	tOS_CPU_SR
;

81 
	#OS_CRITICAL_METHOD
 3

	)

84 #i‡
OS_CRITICAL_METHOD
 == 3

85 
	#OS_ENTER_CRITICAL
(Ë{
˝u_§
 = 
	`OS_CPU_SR_Save
();}

	)

86 
	#OS_EXIT_CRITICAL
(Ë{
	`OS_CPU_SR_Re°‹e
(
˝u_§
);}

	)

104 
	#OS_STK_GROWTH
 1

	)

106 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

120 #i‡
OS_CRITICAL_METHOD
 == 3

121 
OS_CPU_SR
 
OS_CPU_SR_Save
();

122 
OS_CPU_SR_Re°‹e
(
OS_CPU_SR
 
˝u_§
);

125 
OSCtxSw
();

126 
OSI¡CtxSw
();

127 
OSSèπHighRdy
();

129 
OSPídSV
();

	@uCOS-II/Ports/os_cpu_c.c

25 
	#OS_CPU_GLOBALS


	)

27 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

35 #i‡
OS_TMR_EN
 > 0

36 
INT16U
 
	gOSTmrCå
;

51 #i‡
OS_CPU_HOOKS_EN
 > 0 && 
OS_VERSION
 > 203

52 
	$OSInôHookBegö
 ()

54 #i‡
OS_TMR_EN
 > 0

55 
OSTmrCå
 = 0;

57 
	}
}

72 #i‡
OS_CPU_HOOKS_EN
 > 0 && 
OS_VERSION
 > 203

73 
	$OSInôHookEnd
 ()

75 
	}
}

89 #i‡
OS_CPU_HOOKS_EN
 > 0

90 
	$OSTaskCª©eHook
 (
OS_TCB
 *
±cb
)

92 #i‡
OS_APP_HOOKS_EN
 > 0

93 
	`Aµ_TaskCª©eHook
(
±cb
);

95 ()
±cb
;

97 
	}
}

112 #i‡
OS_CPU_HOOKS_EN
 > 0

113 
	$OSTaskDñHook
 (
OS_TCB
 *
±cb
)

115 #i‡
OS_APP_HOOKS_EN
 > 0

116 
	`Aµ_TaskDñHook
(
±cb
);

118 ()
±cb
;

120 
	}
}

135 #i‡
OS_CPU_HOOKS_EN
 > 0 && 
OS_VERSION
 >= 251

136 
	$OSTaskIdÀHook
 ()

138 #i‡
OS_APP_HOOKS_EN
 > 0

139 
	`Aµ_TaskIdÀHook
();

141 
	}
}

155 #i‡
OS_CPU_HOOKS_EN
 > 0

156 
	$OSTaskSètHook
 ()

158 #i‡
OS_APP_HOOKS_EN
 > 0

159 
	`Aµ_TaskSètHook
();

161 
	}
}

193 
OS_STK
 *
OSTaskStkInô
 ((*
èsk
)(*
p_¨g
), *p_¨g, OS_STK *
±os
, 
INT16U
 
›t
)

195 
OS_STK
 *
°k
;

198 ()
›t
;

199 
°k
 = 
±os
;

202 *(
°k
Ë(
INT32U
)0x01000000L;

203 *(--
°k
Ë(
INT32U
)
èsk
;

204 *(--
°k
Ë(
INT32U
)0xFFFFFFFEL;

205 *(--
°k
Ë(
INT32U
)0x12121212L;

206 *(--
°k
Ë(
INT32U
)0x03030303L;

207 *(--
°k
Ë(
INT32U
)0x02020202L;

208 *(--
°k
Ë(
INT32U
)0x01010101L;

209 *(--
°k
Ë(
INT32U
)
p_¨g
;

212 *(--
°k
Ë(
INT32U
)0x11111111L;

213 *(--
°k
Ë(
INT32U
)0x10101010L;

214 *(--
°k
Ë(
INT32U
)0x09090909L;

215 *(--
°k
Ë(
INT32U
)0x08080808L;

216 *(--
°k
Ë(
INT32U
)0x07070707L;

217 *(--
°k
Ë(
INT32U
)0x06060606L;

218 *(--
°k
Ë(
INT32U
)0x05050505L;

219 *(--
°k
Ë(
INT32U
)0x04040404L;

221  (
°k
);

222 
	}
}

239 #i‡(
OS_CPU_HOOKS_EN
 > 0Ë&& (
OS_TASK_SW_HOOK_EN
 > 0)

240 
	$OSTaskSwHook
 ()

242 #i‡
OS_APP_HOOKS_EN
 > 0

243 
	`Aµ_TaskSwHook
();

245 
	}
}

259 #i‡
OS_CPU_HOOKS_EN
 > 0 && 
OS_VERSION
 > 203

260 
	$OSTCBInôHook
 (
OS_TCB
 *
±cb
)

262 #i‡
OS_APP_HOOKS_EN
 > 0

263 
	`Aµ_TCBInôHook
(
±cb
);

265 ()
±cb
;

267 
	}
}

282 #i‡(
OS_CPU_HOOKS_EN
 > 0Ë&& (
OS_TIME_TICK_HOOK_EN
 > 0)

283 
	$OSTimeTickHook
 ()

285 #i‡
OS_APP_HOOKS_EN
 > 0

289 #i‡
OS_TMR_EN
 > 0

290 
OSTmrCå
++;

291 i‡(
OSTmrCå
 >(
OS_TICKS_PER_SEC
 / 
OS_TMR_CFG_TICKS_PER_SEC
)) {

292 
OSTmrCå
 = 0;

293 
	`OSTmrSig«l
();

296 
	}
}

	@uCOS-II/Ports/os_dbg.c

26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

28 
	#OS_COMPILER_OPT


	)

36 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSDebugEn
 = 
OS_DEBUG_EN
;

38 #i‡
OS_DEBUG_EN
 > 0

40 
OS_COMPILER_OPT
 
INT32U
 c⁄° 
	gOSEndü¬essTe°
 = 0x12345678L;

42 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítMax
 = 
OS_MAX_EVENTS
;

43 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítNameSize
 = 
OS_EVENT_NAME_SIZE
;

44 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítEn
 = 
OS_EVENT_EN
;

45 #i‡(
OS_EVENT_EN
 > 0Ë&& (
OS_MAX_EVENTS
 > 0)

46 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítSize
 = (
OS_EVENT
);

47 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítTblSize
 = (
OSEvítTbl
);

49 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítSize
 = 0;

50 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSEvítTblSize
 = 0;

53 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgEn
 = 
OS_FLAG_EN
;

54 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

55 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgGΩSize
 = (
OS_FLAG_GRP
);

56 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgNodeSize
 = (
OS_FLAG_NODE
);

57 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgWidth
 = (
OS_FLAGS
);

59 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgGΩSize
 = 0;

60 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgNodeSize
 = 0;

61 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgWidth
 = 0;

63 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgMax
 = 
OS_MAX_FLAGS
;

64 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSFœgNameSize
 = 
OS_FLAG_NAME_SIZE
;

66 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSLowe°Prio
 = 
OS_LOWEST_PRIO
;

68 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMboxEn
 = 
OS_MBOX_EN
;

70 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemEn
 = 
OS_MEM_EN
;

71 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemMax
 = 
OS_MAX_MEM_PART
;

72 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemNameSize
 = 
OS_MEM_NAME_SIZE
;

73 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

74 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemSize
 = (
OS_MEM
);

75 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemTblSize
 = (
OSMemTbl
);

77 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemSize
 = 0;

78 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMemTblSize
 = 0;

80 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSMuãxEn
 = 
OS_MUTEX_EN
;

82 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSPåSize
 = (*);

84 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSQEn
 = 
OS_Q_EN
;

85 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSQMax
 = 
OS_MAX_QS
;

86 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

87 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSQSize
 = (
OS_Q
);

89 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSQSize
 = 0;

92 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSRdyTblSize
 = 
OS_RDY_TBL_SIZE
;

94 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSSemEn
 = 
OS_SEM_EN
;

96 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSStkWidth
 = (
OS_STK
);

98 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskCª©eEn
 = 
OS_TASK_CREATE_EN
;

99 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskCª©eExtEn
 = 
OS_TASK_CREATE_EXT_EN
;

100 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskDñEn
 = 
OS_TASK_DEL_EN
;

101 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskIdÀStkSize
 = 
OS_TASK_IDLE_STK_SIZE
;

102 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskProfûeEn
 = 
OS_TASK_PROFILE_EN
;

103 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskMax
 = 
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
;

104 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskNameSize
 = 
OS_TASK_NAME_SIZE
;

105 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskSètEn
 = 
OS_TASK_STAT_EN
;

106 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskSètStkSize
 = 
OS_TASK_STAT_STK_SIZE
;

107 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskSètStkChkEn
 = 
OS_TASK_STAT_STK_CHK_EN
;

108 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTaskSwHookEn
 = 
OS_TASK_SW_HOOK_EN
;

110 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTCBPrioTblMax
 = 
OS_LOWEST_PRIO
 + 1;

111 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTCBSize
 = (
OS_TCB
);

112 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTicksPîSec
 = 
OS_TICKS_PER_SEC
;

113 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSTimeTickHookEn
 = 
OS_TIME_TICK_HOOK_EN
;

114 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSVîsi⁄Nbr
 = 
OS_VERSION
;

125 #i‡
OS_DEBUG_EN
 > 0

127 
OS_COMPILER_OPT
 
INT16U
 c⁄° 
	gOSD©aSize
 = (
OSCtxSwCå
)

128 #i‡(
OS_EVENT_EN
 > 0Ë&& (
OS_MAX_EVENTS
 > 0)

129 + (
OSEvítFªeLi°
)

130 + (
OSEvítTbl
)

132 #i‡(
OS_VERSION
 >251Ë&& (
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

133 + (
OSFœgTbl
)

134 + (
OSFœgFªeLi°
)

136 #i‡
OS_TASK_STAT_EN
 > 0

137 + (
OSCPUUßge
)

138 + (
OSIdÀCåMax
)

139 + (
OSIdÀCåRun
)

140 + (
OSSètRdy
)

141 + (
OSTaskSètStk
)

143 #i‡
OS_TICK_STEP_EN
 > 0

144 + (
OSTickSãpSèã
)

146 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

147 + (
OSMemFªeLi°
)

148 + (
OSMemTbl
)

150 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

151 + (
OSQFªeLi°
)

152 + (
OSQTbl
)

154 #i‡
OS_TIME_GET_SET_EN
 > 0

155 + (
OSTime
)

157 + (
OSI¡Ne°ög
)

158 + (
OSLockNe°ög
)

159 + (
OSPrioCur
)

160 + (
OSPrioHighRdy
)

161 + (
OSRdyGΩ
)

162 + (
OSRdyTbl
)

163 + (
OSRu¬ög
)

164 + (
OSTaskCå
)

165 + (
OSIdÀCå
)

166 + (
OSTaskIdÀStk
)

167 + (
OSTCBCur
)

168 + (
OSTCBFªeLi°
)

169 + (
OSTCBHighRdy
)

170 + (
OSTCBLi°
)

171 + (
OSTCBPrioTbl
)

172 + (
OSTCBTbl
);

195 #i‡
OS_VERSION
 >270 && 
OS_DEBUG_EN
 > 0

196 
	$OSDebugInô
 ()

198 *
±emp
;

201 
±emp
 = (*)&
OSDebugEn
;

203 
±emp
 = (*)&
OSEndü¬essTe°
;

205 
±emp
 = (*)&
OSEvítMax
;

206 
±emp
 = (*)&
OSEvítNameSize
;

207 
±emp
 = (*)&
OSEvítEn
;

208 
±emp
 = (*)&
OSEvítSize
;

209 
±emp
 = (*)&
OSEvítTblSize
;

211 
±emp
 = (*)&
OSFœgEn
;

212 
±emp
 = (*)&
OSFœgGΩSize
;

213 
±emp
 = (*)&
OSFœgNodeSize
;

214 
±emp
 = (*)&
OSFœgWidth
;

215 
±emp
 = (*)&
OSFœgMax
;

216 
±emp
 = (*)&
OSFœgNameSize
;

218 
±emp
 = (*)&
OSLowe°Prio
;

220 
±emp
 = (*)&
OSMboxEn
;

222 
±emp
 = (*)&
OSMemEn
;

223 
±emp
 = (*)&
OSMemMax
;

224 
±emp
 = (*)&
OSMemNameSize
;

225 
±emp
 = (*)&
OSMemSize
;

226 
±emp
 = (*)&
OSMemTblSize
;

228 
±emp
 = (*)&
OSMuãxEn
;

230 
±emp
 = (*)&
OSPåSize
;

232 
±emp
 = (*)&
OSQEn
;

233 
±emp
 = (*)&
OSQMax
;

234 
±emp
 = (*)&
OSQSize
;

236 
±emp
 = (*)&
OSRdyTblSize
;

238 
±emp
 = (*)&
OSSemEn
;

240 
±emp
 = (*)&
OSStkWidth
;

242 
±emp
 = (*)&
OSTaskCª©eEn
;

243 
±emp
 = (*)&
OSTaskCª©eExtEn
;

244 
±emp
 = (*)&
OSTaskDñEn
;

245 
±emp
 = (*)&
OSTaskIdÀStkSize
;

246 
±emp
 = (*)&
OSTaskProfûeEn
;

247 
±emp
 = (*)&
OSTaskMax
;

248 
±emp
 = (*)&
OSTaskNameSize
;

249 
±emp
 = (*)&
OSTaskSètEn
;

250 
±emp
 = (*)&
OSTaskSètStkSize
;

251 
±emp
 = (*)&
OSTaskSètStkChkEn
;

252 
±emp
 = (*)&
OSTaskSwHookEn
;

254 
±emp
 = (*)&
OSTCBPrioTblMax
;

255 
±emp
 = (*)&
OSTCBSize
;

257 
±emp
 = (*)&
OSTicksPîSec
;

258 
±emp
 = (*)&
OSTimeTickHookEn
;

260 
±emp
 = (*)&
OSVîsi⁄Nbr
;

262 
±emp
 = (*)&
OSD©aSize
;

264 
±emp
 =Ötemp;

265 
	}
}

	@uCOS-II/Source/os_core.c

24 #i‚de‡ 
OS_MASTER_FILE


25 
	#OS_GLOBALS


	)

27 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

39 
INT8U
 c⁄° 
	gOSUnM≠Tbl
[256] = {

65 
OS_InôEvítLi°
();

67 
OS_InôMisc
();

69 
OS_InôRdyLi°
();

71 
OS_InôTaskIdÀ
();

73 #i‡
OS_TASK_STAT_EN
 > 0

74 
OS_InôTaskSèt
();

77 
OS_InôTCBLi°
();

79 
OS_SchedNew
();

108 #i‡
OS_EVENT_EN
 && (
OS_EVENT_NAME_SIZE
 > 1)

109 
INT8U
 
	$OSEvítNameGë
 (
OS_EVENT
 *
≥vít
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

111 
INT8U
 
Àn
;

112 #i‡
OS_CRITICAL_METHOD
 == 3

113 
OS_CPU_SR
 
˝u_§
 = 0;

118 #i‡
OS_ARG_CHK_EN
 > 0

119 i‡(
≥º
 =(
INT8U
 *)0) {

122 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

123 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

126 i‡(
≤ame
 =(
INT8U
 *)0) {

127 *
≥º
 = 
OS_ERR_PNAME_NULL
;

131 i‡(
OSI¡Ne°ög
 > 0) {

132 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

135 
≥vít
->
OSEvítTy≥
) {

136 
OS_EVENT_TYPE_SEM
:

137 
OS_EVENT_TYPE_MUTEX
:

138 
OS_EVENT_TYPE_MBOX
:

139 
OS_EVENT_TYPE_Q
:

143 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

146 
	`OS_ENTER_CRITICAL
();

147 
Àn
 = 
	`OS_SåC›y
(
≤ame
, 
≥vít
->
OSEvítName
);

148 
	`OS_EXIT_CRITICAL
();

149 *
≥º
 = 
OS_ERR_NONE
;

150  (
Àn
);

151 
	}
}

182 #i‡
OS_EVENT_EN
 && (
OS_EVENT_NAME_SIZE
 > 1)

183 
	$OSEvítNameSë
 (
OS_EVENT
 *
≥vít
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

185 
INT8U
 
Àn
;

186 #i‡
OS_CRITICAL_METHOD
 == 3

187 
OS_CPU_SR
 
˝u_§
 = 0;

192 #i‡
OS_ARG_CHK_EN
 > 0

193 i‡(
≥º
 =(
INT8U
 *)0) {

196 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

197 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

200 i‡(
≤ame
 =(
INT8U
 *)0) {

201 *
≥º
 = 
OS_ERR_PNAME_NULL
;

205 i‡(
OSI¡Ne°ög
 > 0) {

206 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

209 
≥vít
->
OSEvítTy≥
) {

210 
OS_EVENT_TYPE_SEM
:

211 
OS_EVENT_TYPE_MUTEX
:

212 
OS_EVENT_TYPE_MBOX
:

213 
OS_EVENT_TYPE_Q
:

217 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

220 
	`OS_ENTER_CRITICAL
();

221 
Àn
 = 
	`OS_SåLí
(
≤ame
);

222 i‡(
Àn
 > (
OS_EVENT_NAME_SIZE
 - 1)) {

223 
	`OS_EXIT_CRITICAL
();

224 *
≥º
 = 
OS_ERR_EVENT_NAME_TOO_LONG
;

227 ()
	`OS_SåC›y
(
≥vít
->
OSEvítName
, 
≤ame
);

228 
	`OS_EXIT_CRITICAL
();

229 *
≥º
 = 
OS_ERR_NONE
;

230 
	}
}

247 
	$OSInô
 ()

249 
	`OSInôHookBegö
();

251 
	`OS_InôMisc
();

253 
	`OS_InôRdyLi°
();

255 
	`OS_InôTCBLi°
();

257 
	`OS_InôEvítLi°
();

259 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

260 
	`OS_FœgInô
();

263 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

264 
	`OS_MemInô
();

267 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

268 
	`OS_QInô
();

271 
	`OS_InôTaskIdÀ
();

272 #i‡
OS_TASK_STAT_EN
 > 0

273 
	`OS_InôTaskSèt
();

276 #i‡
OS_TMR_EN
 > 0

277 
	`OSTmr_Inô
();

280 
	`OSInôHookEnd
();

282 #i‡
OS_DEBUG_EN
 > 0

283 
	`OSDebugInô
();

285 
	}
}

312 
	$OSI¡E¡î
()

314 if(
OSRu¬ög
==
OS_TRUE
)

316 if(
OSI¡Ne°ög
<255u)

318 
OSI¡Ne°ög
++;

321 
	}
}

342 
	$OSI¡Exô
 ()

344 #i‡
OS_CRITICAL_METHOD
 == 3

345 
OS_CPU_SR
 
˝u_§
 = 0;

348 if(
OSRu¬ög
==
OS_TRUE
)

350 
	`OS_ENTER_CRITICAL
();

351 if(
OSI¡Ne°ög
>0)

353 
OSI¡Ne°ög
--;

355 if(
OSI¡Ne°ög
==0)

357 if(
OSLockNe°ög
==0)

359 
	`OS_SchedNew
();

360 if(
OSPrioHighRdy
!=
OSPrioCur
)

362 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

363 #i‡
OS_TASK_PROFILE_EN
 > 0

364 
OSTCBHighRdy
->
OSTCBCtxSwCå
++;

366 
OSCtxSwCå
++;

367 
	`OSI¡CtxSw
();

371 
	`OS_EXIT_CRITICAL
();

373 
	}
}

391 #i‡
OS_SCHED_LOCK_EN
 > 0

392 
	$OSSchedLock
 ()

394 #i‡
OS_CRITICAL_METHOD
 == 3

395 
OS_CPU_SR
 
˝u_§
 = 0;

400 i‡(
OSRu¬ög
 =
OS_TRUE
) {

401 
	`OS_ENTER_CRITICAL
();

402 i‡(
OSI¡Ne°ög
 == 0) {

403 i‡(
OSLockNe°ög
 < 255u) {

404 
OSLockNe°ög
++;

407 
	`OS_EXIT_CRITICAL
();

409 
	}
}

428 #i‡
OS_SCHED_LOCK_EN
 > 0

429 
	$OSSchedU∆ock
 ()

431 #i‡
OS_CRITICAL_METHOD
 == 3

432 
OS_CPU_SR
 
˝u_§
 = 0;

437 i‡(
OSRu¬ög
 =
OS_TRUE
) {

438 
	`OS_ENTER_CRITICAL
();

439 i‡(
OSLockNe°ög
 > 0) {

440 
OSLockNe°ög
--;

441 i‡(
OSLockNe°ög
 == 0) {

442 i‡(
OSI¡Ne°ög
 == 0) {

443 
	`OS_EXIT_CRITICAL
();

444 
	`OS_Sched
();

446 
	`OS_EXIT_CRITICAL
();

449 
	`OS_EXIT_CRITICAL
();

452 
	`OS_EXIT_CRITICAL
();

455 
	}
}

479 
	$OSSèπ
 ()

481 i‡(
OSRu¬ög
 =
OS_FALSE
) {

482 
	`OS_SchedNew
();

483 
OSPrioCur
 = 
OSPrioHighRdy
;

484 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

485 
OSTCBCur
 = 
OSTCBHighRdy
;

486 
	`OSSèπHighRdy
();

488 
	}
}

510 #i‡
OS_TASK_STAT_EN
 > 0

511 
	$OSSètInô
 ()

513 #i‡
OS_CRITICAL_METHOD
 == 3

514 
OS_CPU_SR
 
˝u_§
 = 0;

519 
	`OSTimeDly
(2);

520 
	`OS_ENTER_CRITICAL
();

521 
OSIdÀCå
 = 0L;

522 
	`OS_EXIT_CRITICAL
();

523 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 10);

524 
	`OS_ENTER_CRITICAL
();

525 
OSIdÀCåMax
 = 
OSIdÀCå
;

526 
OSSètRdy
 = 
OS_TRUE
;

527 
	`OS_EXIT_CRITICAL
();

528 
	}
}

545 
	$OSTimeTick
 ()

547 
OS_TCB
 *
±cb
;

548 #i‡
OS_TICK_STEP_EN
 > 0

549 
BOOLEAN
 
°ï
;

552 #i‡
OS_CRITICAL_METHOD
 == 3

553 
OS_CPU_SR
 
˝u_§
 = 0;

558 #i‡
OS_TIME_TICK_HOOK_EN
 > 0

559 
	`OSTimeTickHook
();

562 #i‡
OS_TIME_GET_SET_EN
 > 0

563 
	`OS_ENTER_CRITICAL
();

564 
OSTime
++;

565 
	`OS_EXIT_CRITICAL
();

568 if(
OSRu¬ög
==
OS_TRUE
)

570 #i‡
OS_TICK_STEP_EN
 > 0

571 
OSTickSãpSèã
)

573 
OS_TICK_STEP_DIS
:

574 
°ï
 = 
OS_TRUE
;

577 
OS_TICK_STEP_WAIT
:

578 
°ï
 = 
OS_FALSE
;

581 
OS_TICK_STEP_ONCE
:

582 
°ï
 = 
OS_TRUE
;

583 
OSTickSãpSèã
 = 
OS_TICK_STEP_WAIT
;

587 
°ï
 = 
OS_TRUE
;

588 
OSTickSãpSèã
 = 
OS_TICK_STEP_DIS
;

591 if(
°ï
==
OS_FALSE
)

597 
±cb
 = 
OSTCBLi°
;

598 
±cb
->
OSTCBPrio
!=
OS_TASK_IDLE_PRIO
)

600 
	`OS_ENTER_CRITICAL
();

601 if(
±cb
->
OSTCBDly
!=0)

603 if(--
±cb
->
OSTCBDly
==0)

606 if((
±cb
->
OSTCBSèt
&
OS_STAT_PEND_ANY
)!=
OS_STAT_RDY
)

608 
±cb
->
OSTCBSèt
&=~(
INT8U
)
OS_STAT_PEND_ANY
;

609 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_TO
;

613 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

616 if((
±cb
->
OSTCBSèt
&
OS_STAT_SUSPEND
)==
OS_STAT_RDY
)

618 
OSRdyGΩ
|
±cb
->
OSTCBBôY
;

619 
OSRdyTbl
[
±cb
->
OSTCBY
]|ıtcb->
OSTCBBôX
;

623 
±cb
 =Ötcb->
OSTCBNext
;

624 
	`OS_EXIT_CRITICAL
();

627 
	}
}

644 
INT16U
 
	$OSVîsi⁄
 ()

646  (
OS_VERSION
);

647 
	}
}

662 #i‡
OS_TASK_DEL_EN
 > 0

663 
	$OS_Dummy
 ()

665 
	}
}

696 #i‡
OS_EVENT_EN


697 
INT8U
 
	$OS_EvítTaskRdy
 (
OS_EVENT
 *
≥vít
, *
pmsg
, 
INT8U
 
msk
, INT8U 
≥nd_°©
)

699 
OS_TCB
 *
±cb
;

700 
INT8U
 
x
;

701 
INT8U
 
y
;

702 
INT8U
 
¥io
;

703 #i‡
OS_LOWEST_PRIO
 <= 63

704 
INT8U
 
bôx
;

705 
INT8U
 
bôy
;

707 
INT16U
 
bôx
;

708 
INT16U
 
bôy
;

709 
INT16U
 *
±bl
;

713 #i‡
OS_LOWEST_PRIO
 <= 63

714 
y
 = 
OSUnM≠Tbl
[
≥vít
->
OSEvítGΩ
];

715 
bôy
 = (
INT8U
)(1 << 
y
);

716 
x
 = 
OSUnM≠Tbl
[
≥vít
->
OSEvítTbl
[
y
]];

717 
bôx
 = (
INT8U
)(1 << 
x
);

718 
¥io
 = (
INT8U
)((
y
 << 3Ë+ 
x
);

720 i‡((
≥vít
->
OSEvítGΩ
 & 0xFF) != 0) {

721 
y
 = 
OSUnM≠Tbl
[
≥vít
->
OSEvítGΩ
 & 0xFF];

723 
y
 = 
OSUnM≠Tbl
[(
≥vít
->
OSEvítGΩ
 >> 8) & 0xFF] + 8;

725 
bôy
 = (
INT16U
)(1 << 
y
);

726 
±bl
 = &
≥vít
->
OSEvítTbl
[
y
];

727 i‡((*
±bl
 & 0xFF) != 0) {

728 
x
 = 
OSUnM≠Tbl
[*
±bl
 & 0xFF];

730 
x
 = 
OSUnM≠Tbl
[(*
±bl
 >> 8) & 0xFF] + 8;

732 
bôx
 = (
INT16U
)(1 << 
x
);

733 
¥io
 = (
INT8U
)((
y
 << 4Ë+ 
x
);

736 
≥vít
->
OSEvítTbl
[
y
] &~
bôx
;

737 i‡(
≥vít
->
OSEvítTbl
[
y
] == 0) {

738 
≥vít
->
OSEvítGΩ
 &~
bôy
;

740 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

741 
±cb
->
OSTCBDly
 = 0;

742 
±cb
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

743 #i‡((
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)Ë|| (
OS_MBOX_EN
 > 0)

744 
±cb
->
OSTCBMsg
 = 
pmsg
;

746 
pmsg
 =Ömsg;

748 
±cb
->
OSTCBSètPíd
 = 
≥nd_°©
;

749 
±cb
->
OSTCBSèt
 &~
msk
;

750 i‡(
±cb
->
OSTCBSèt
 =
OS_STAT_RDY
) {

751 
OSRdyGΩ
 |
bôy
;

752 
OSRdyTbl
[
y
] |
bôx
;

754  (
¥io
);

755 
	}
}

772 #i‡
OS_EVENT_EN


773 
	$OS_EvítTaskWaô
 (
OS_EVENT
 *
≥vít
)

775 
INT8U
 
y
;

778 
OSTCBCur
->
OSTCBEvítPå
 = 
≥vít
;

779 
y
 = 
OSTCBCur
->
OSTCBY
;

780 
OSRdyTbl
[
y
] &~
OSTCBCur
->
OSTCBBôX
;

781 i‡(
OSRdyTbl
[
y
] == 0) {

782 
OSRdyGΩ
 &~
OSTCBCur
->
OSTCBBôY
;

784 
≥vít
->
OSEvítTbl
[
OSTCBCur
->
OSTCBY
] |OSTCBCur->
OSTCBBôX
;

785 
≥vít
->
OSEvítGΩ
 |
OSTCBCur
->
OSTCBBôY
;

786 
	}
}

803 #i‡
OS_EVENT_EN


804 
	$OS_EvítTOAb‹t
 (
OS_EVENT
 *
≥vít
)

806 
INT8U
 
y
;

809 
y
 = 
OSTCBCur
->
OSTCBY
;

810 
≥vít
->
OSEvítTbl
[
y
] &~
OSTCBCur
->
OSTCBBôX
;

811 i‡(
≥vít
->
OSEvítTbl
[
y
] == 0x00) {

812 
≥vít
->
OSEvítGΩ
 &~
OSTCBCur
->
OSTCBBôY
;

814 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

815 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

816 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

817 
	}
}

833 #i‡
OS_EVENT_EN


834 
	$OS_EvítWaôLi°Inô
 (
OS_EVENT
 *
≥vít
)

836 #i‡
OS_LOWEST_PRIO
 <= 63

837 
INT8U
 *
±bl
;

839 
INT16U
 *
±bl
;

841 
INT8U
 
i
;

844 
≥vít
->
OSEvítGΩ
 = 0;

845 
±bl
 = &
≥vít
->
OSEvítTbl
[0];

847 
i
 = 0; i < 
OS_EVENT_TBL_SIZE
; i++) {

848 *
±bl
++ = 0;

850 
	}
}

866 
	$OS_InôEvítLi°
 ()

868 #i‡
OS_EVENT_EN
 && (
OS_MAX_EVENTS
 > 0)

869 #i‡(
OS_MAX_EVENTS
 > 1)

870 
INT16U
 
i
;

871 
OS_EVENT
 *
≥vít1
;

872 
OS_EVENT
 *
≥vít2
;

875 
	`OS_MemCÃ
((
INT8U
 *)&
OSEvítTbl
[0], (OSEventTbl));

876 
≥vít1
 = &
OSEvítTbl
[0];

877 
≥vít2
 = &
OSEvítTbl
[1];

878 
i
 = 0; i < (
OS_MAX_EVENTS
 - 1); i++) {

879 
≥vít1
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

880 
≥vít1
->
OSEvítPå
 = 
≥vít2
;

881 #i‡
OS_EVENT_NAME_SIZE
 > 1

882 
≥vít1
->
OSEvítName
[0] = '?';

883 
≥vít1
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

885 
≥vít1
++;

886 
≥vít2
++;

888 
≥vít1
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

889 
≥vít1
->
OSEvítPå
 = (
OS_EVENT
 *)0;

890 #i‡
OS_EVENT_NAME_SIZE
 > 1

891 
≥vít1
->
OSEvítName
[0] = '?';

892 
≥vít1
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

894 
OSEvítFªeLi°
 = &
OSEvítTbl
[0];

896 
OSEvítFªeLi°
 = &
OSEvítTbl
[0];

897 
OSEvítFªeLi°
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

898 
OSEvítFªeLi°
->
OSEvítPå
 = (
OS_EVENT
 *)0;

899 #i‡
OS_EVENT_NAME_SIZE
 > 1

900 
OSEvítFªeLi°
->
OSEvítName
[0] = '?';

901 
OSEvítFªeLi°
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

905 
	}
}

920 
	$OS_InôMisc
 ()

922 #i‡
OS_TIME_GET_SET_EN
 > 0

923 
OSTime
 = 0L;

926 
OSI¡Ne°ög
 = 0;

927 
OSLockNe°ög
 = 0;

929 
OSTaskCå
 = 0;

931 
OSRu¬ög
 = 
OS_FALSE
;

933 
OSCtxSwCå
 = 0;

934 
OSIdÀCå
 = 0L;

936 #i‡
OS_TASK_STAT_EN
 > 0

937 
OSIdÀCåRun
 = 0L;

938 
OSIdÀCåMax
 = 0L;

939 
OSSètRdy
 = 
OS_FALSE
;

941 
	}
}

956 
	$OS_InôRdyLi°
 ()

958 
INT8U
 
i
;

959 #i‡
OS_LOWEST_PRIO
 <= 63

960 
INT8U
 *
¥dytbl
;

962 
INT16U
 *
¥dytbl
;

966 
OSRdyGΩ
 = 0;

967 
¥dytbl
 = &
OSRdyTbl
[0];

968 
i
 = 0; i < 
OS_RDY_TBL_SIZE
; i++) {

969 *
¥dytbl
++ = 0;

972 
OSPrioCur
 = 0;

973 
OSPrioHighRdy
 = 0;

975 
OSTCBHighRdy
 = (
OS_TCB
 *)0;

976 
OSTCBCur
 = (
OS_TCB
 *)0;

977 
	}
}

993 
	$OS_InôTaskIdÀ
 ()

995 #i‡
OS_TASK_NAME_SIZE
 > 7

996 
INT8U
 
îr
;

1000 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1001 #i‡
OS_STK_GROWTH
 == 1

1002 ()
	`OSTaskCª©eExt
(
OS_TaskIdÀ
,

1004 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1],

1005 
OS_TASK_IDLE_PRIO
,

1006 
OS_TASK_IDLE_ID
,

1007 &
OSTaskIdÀStk
[0],

1008 
OS_TASK_IDLE_STK_SIZE
,

1010 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1012 ()
	`OSTaskCª©eExt
(
OS_TaskIdÀ
,

1014 &
OSTaskIdÀStk
[0],

1015 
OS_TASK_IDLE_PRIO
,

1016 
OS_TASK_IDLE_ID
,

1017 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1],

1018 
OS_TASK_IDLE_STK_SIZE
,

1020 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1023 #i‡
OS_STK_GROWTH
 == 1

1024 ()
	`OSTaskCª©e
(
OS_TaskIdÀ
,

1026 &
OSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
 - 1],

1027 
OS_TASK_IDLE_PRIO
);

1029 ()
	`OSTaskCª©e
(
OS_TaskIdÀ
,

1031 &
OSTaskIdÀStk
[0],

1032 
OS_TASK_IDLE_PRIO
);

1036 #i‡
OS_TASK_NAME_SIZE
 > 14

1037 
	`OSTaskNameSë
(
OS_TASK_IDLE_PRIO
, (
INT8U
 *)"uC/OS-II IdÀ", &
îr
);

1039 #i‡
OS_TASK_NAME_SIZE
 > 7

1040 
	`OSTaskNameSë
(
OS_TASK_IDLE_PRIO
, (
INT8U
 *)"OS-IdÀ", &
îr
);

1043 
	}
}

1058 #i‡
OS_TASK_STAT_EN
 > 0

1059 
	$OS_InôTaskSèt
 ()

1061 #i‡
OS_TASK_NAME_SIZE
 > 7

1062 
INT8U
 
îr
;

1066 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1067 #i‡
OS_STK_GROWTH
 == 1

1068 ()
	`OSTaskCª©eExt
(
OS_TaskSèt
,

1070 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1],

1071 
OS_TASK_STAT_PRIO
,

1072 
OS_TASK_STAT_ID
,

1073 &
OSTaskSètStk
[0],

1074 
OS_TASK_STAT_STK_SIZE
,

1076 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1078 ()
	`OSTaskCª©eExt
(
OS_TaskSèt
,

1080 &
OSTaskSètStk
[0],

1081 
OS_TASK_STAT_PRIO
,

1082 
OS_TASK_STAT_ID
,

1083 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1],

1084 
OS_TASK_STAT_STK_SIZE
,

1086 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

1089 #i‡
OS_STK_GROWTH
 == 1

1090 ()
	`OSTaskCª©e
(
OS_TaskSèt
,

1092 &
OSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
 - 1],

1093 
OS_TASK_STAT_PRIO
);

1095 ()
	`OSTaskCª©e
(
OS_TaskSèt
,

1097 &
OSTaskSètStk
[0],

1098 
OS_TASK_STAT_PRIO
);

1102 #i‡
OS_TASK_NAME_SIZE
 > 14

1103 
	`OSTaskNameSë
(
OS_TASK_STAT_PRIO
, (
INT8U
 *)"uC/OS-II Sèt", &
îr
);

1105 #i‡
OS_TASK_NAME_SIZE
 > 7

1106 
	`OSTaskNameSë
(
OS_TASK_STAT_PRIO
, (
INT8U
 *)"OS-Sèt", &
îr
);

1109 
	}
}

1125 
	$OS_InôTCBLi°
 ()

1127 
INT8U
 
i
;

1128 
OS_TCB
 *
±cb1
;

1129 
OS_TCB
 *
±cb2
;

1132 
	`OS_MemCÃ
((
INT8U
 *)&
OSTCBTbl
[0], (OSTCBTbl));

1133 
	`OS_MemCÃ
((
INT8U
 *)&
OSTCBPrioTbl
[0], (OSTCBPrioTbl));

1134 
±cb1
 = &
OSTCBTbl
[0];

1135 
±cb2
 = &
OSTCBTbl
[1];

1136 
i
 = 0; i < (
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
 - 1); i++) {

1137 
±cb1
->
OSTCBNext
 = 
±cb2
;

1138 #i‡
OS_TASK_NAME_SIZE
 > 1

1139 
±cb1
->
OSTCBTaskName
[0] = '?';

1140 
±cb1
->
OSTCBTaskName
[1] = 
OS_ASCII_NUL
;

1142 
±cb1
++;

1143 
±cb2
++;

1145 
±cb1
->
OSTCBNext
 = (
OS_TCB
 *)0;

1146 #i‡
OS_TASK_NAME_SIZE
 > 1

1147 
±cb1
->
OSTCBTaskName
[0] = '?';

1148 
±cb1
->
OSTCBTaskName
[1] = 
OS_ASCII_NUL
;

1150 
OSTCBLi°
 = (
OS_TCB
 *)0;

1151 
OSTCBFªeLi°
 = &
OSTCBTbl
[0];

1152 
	}
}

1174 
	$OS_MemCÃ
 (
INT8U
 *
pde°
, 
INT16U
 
size
)

1176 
size
 > 0) {

1177 *
pde°
++ = (
INT8U
)0;

1178 
size
--;

1180 
	}
}

1206 
	$OS_MemC›y
 (
INT8U
 *
pde°
, INT8U *
p§c
, 
INT16U
 
size
)

1208 
size
 > 0) {

1209 *
pde°
++ = *
p§c
++;

1210 
size
--;

1212 
	}
}

1231 
	$OS_Sched
()

1233 #i‡
OS_CRITICAL_METHOD
 == 3

1234 
OS_CPU_SR
 
˝u_§
 = 0;

1239 
	`OS_ENTER_CRITICAL
();

1240 if(
OSI¡Ne°ög
==0)

1242 if(
OSLockNe°ög
==0)

1244 
	`OS_SchedNew
();

1245 if(
OSPrioHighRdy
!=
OSPrioCur
)

1247 
OSTCBHighRdy
 = 
OSTCBPrioTbl
[
OSPrioHighRdy
];

1248 #i‡
OS_TASK_PROFILE_EN
 > 0

1249 
OSTCBHighRdy
->
OSTCBCtxSwCå
++;

1251 
OSCtxSwCå
++;

1252 
	`OS_TASK_SW
();

1256 
	`OS_EXIT_CRITICAL
();

1257 
	}
}

1276 
	$OS_SchedNew
 ()

1278 #i‡
OS_LOWEST_PRIO
 <= 63

1279 
INT8U
 
y
;

1281 
y
 = 
OSUnM≠Tbl
[
OSRdyGΩ
];

1282 
OSPrioHighRdy
 = (
INT8U
)((
y
<<3)+
OSUnM≠Tbl
[
OSRdyTbl
[y]]);

1284 
INT8U
 
y
;

1285 
INT16U
 *
±bl
;

1287 if((
OSRdyGΩ
&0xFF)!=0)

1289 
y
 = 
OSUnM≠Tbl
[
OSRdyGΩ
&0xFF];

1293 
y
 = 
OSUnM≠Tbl
[(
OSRdyGΩ
>>8)&0xFF]+8;

1295 
±bl
 = &
OSRdyTbl
[
y
];

1296 if((*
±bl
&0xFF)!=0)

1298 
OSPrioHighRdy
 = (
INT8U
)((
y
<<4)+
OSUnM≠Tbl
[(*
±bl
&0xFF)]);

1302 
OSPrioHighRdy
 = (
INT8U
)((
y
<<4)+
OSUnM≠Tbl
[(*
±bl
>>8)&0xFF]+8);

1305 
	}
}

1327 #i‡(
OS_EVENT_NAME_SIZE
 > 1Ë|| (
OS_FLAG_NAME_SIZE
 > 1Ë|| (
OS_MEM_NAME_SIZE
 > 1Ë|| (
OS_TASK_NAME_SIZE
 > 1Ë|| (
OS_TMR_CFG_NAME_SIZE
 > 1)

1328 
INT8U
 
	$OS_SåC›y
 (
INT8U
 *
pde°
, INT8U *
p§c
)

1330 
INT8U
 
Àn
;

1333 
Àn
 = 0;

1334 *
p§c
 !
OS_ASCII_NUL
) {

1335 *
pde°
++ = *
p§c
++;

1336 
Àn
++;

1338 *
pde°
 = 
OS_ASCII_NUL
;

1339  (
Àn
);

1340 
	}
}

1359 #i‡(
OS_EVENT_NAME_SIZE
 > 1Ë|| (
OS_FLAG_NAME_SIZE
 > 1Ë|| (
OS_MEM_NAME_SIZE
 > 1Ë|| (
OS_TASK_NAME_SIZE
 > 1Ë|| (
OS_TMR_CFG_NAME_SIZE
 > 1)

1360 
INT8U
 
	$OS_SåLí
 (
INT8U
 *
p§c
)

1362 
INT8U
 
Àn
;

1365 
Àn
 = 0;

1366 *
p§c
 !
OS_ASCII_NUL
) {

1367 
p§c
++;

1368 
Àn
++;

1370  (
Àn
);

1371 
	}
}

1395 
	$OS_TaskIdÀ
 (*
p_¨g
)

1397 #i‡
OS_CRITICAL_METHOD
 == 3

1398 
OS_CPU_SR
 
˝u_§
 = 0;

1401 ()
p_¨g
;

1404 
	`OS_ENTER_CRITICAL
();

1405 
OSIdÀCå
++;

1406 
	`OS_EXIT_CRITICAL
();

1407 
	`OSTaskIdÀHook
();

1409 
	}
}

1435 #i‡
OS_TASK_STAT_EN
 > 0

1436 
	$OS_TaskSèt
 (*
p_¨g
)

1438 
INT32U
 
run
;

1439 
INT32U
 
max
;

1440 
INT8S
 
ußge
;

1441 #i‡
OS_CRITICAL_METHOD
 == 3

1442 
OS_CPU_SR
 
˝u_§
 = 0;

1447 
p_¨g
 =Ö_arg;

1448 
OSSètRdy
 =
OS_FALSE
) {

1449 
	`OSTimeDly
(2 * 
OS_TICKS_PER_SEC
 / 10);

1451 
max
 = 
OSIdÀCåMax
 / 100L;

1453 
	`OS_ENTER_CRITICAL
();

1454 
OSIdÀCåRun
 = 
OSIdÀCå
;

1455 
run
 = 
OSIdÀCå
;

1456 
OSIdÀCå
 = 0L;

1457 
	`OS_EXIT_CRITICAL
();

1458 i‡(
max
 > 0L) {

1459 
ußge
 = (
INT8S
)(100L - 
run
 / 
max
);

1460 i‡(
ußge
 >= 0) {

1461 
OSCPUUßge
 = 
ußge
;

1463 
OSCPUUßge
 = 0;

1466 
OSCPUUßge
 = 0;

1467 
max
 = 
OSIdÀCåMax
 / 100L;

1469 
	`OSTaskSètHook
();

1470 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0Ë&& (
OS_TASK_CREATE_EXT_EN
 > 0)

1471 
	`OS_TaskSètStkChk
();

1473 
	`OSTimeDly
(
OS_TICKS_PER_SEC
 / 10);

1475 
	}
}

1490 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0Ë&& (
OS_TASK_CREATE_EXT_EN
 > 0)

1491 
	$OS_TaskSètStkChk
 ()

1493 
OS_TCB
 *
±cb
;

1494 
OS_STK_DATA
 
°k_d©a
;

1495 
INT8U
 
îr
;

1496 
INT8U
 
¥io
;

1499 
¥io
 = 0;Öriÿ<
OS_TASK_IDLE_PRIO
;Örio++) {

1500 
îr
 = 
	`OSTaskStkChk
(
¥io
, &
°k_d©a
);

1501 i‡(
îr
 =
OS_ERR_NONE
) {

1502 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1503 i‡(
±cb
 !(
OS_TCB
 *)0) {

1504 i‡(
±cb
 !
OS_TCB_RESERVED
) {

1505 #i‡
OS_TASK_PROFILE_EN
 > 0

1506 #i‡
OS_STK_GROWTH
 == 1

1507 
±cb
->
OSTCBStkBa£
 =Ötcb->
OSTCBStkBŸtom
 +Ötcb->
OSTCBStkSize
;

1509 
±cb
->
OSTCBStkBa£
 =Ötcb->
OSTCBStkBŸtom
 -Ötcb->
OSTCBStkSize
;

1511 
±cb
->
OSTCBStkU£d
 = 
°k_d©a
.
OSU£d
;

1517 
	}
}

1563 
INT8U
 
	$OS_TCBInô
 (
INT8U
 
¥io
, 
OS_STK
 *
±os
, OS_STK *
pbos
, 
INT16U
 
id
, 
INT32U
 
°k_size
, *
≥xt
, INT16U 
›t
)

1565 
OS_TCB
 *
±cb
;

1566 #i‡
OS_CRITICAL_METHOD
 == 3

1567 
OS_CPU_SR
 
˝u_§
 = 0;

1572 
	`OS_ENTER_CRITICAL
();

1573 
±cb
 = 
OSTCBFªeLi°
;

1574 i‡(
±cb
 !(
OS_TCB
 *)0) {

1575 
OSTCBFªeLi°
 = 
±cb
->
OSTCBNext
;

1576 
	`OS_EXIT_CRITICAL
();

1577 
±cb
->
OSTCBStkPå
 = 
±os
;

1578 
±cb
->
OSTCBPrio
 = 
¥io
;

1579 
±cb
->
OSTCBSèt
 = 
OS_STAT_RDY
;

1580 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

1581 
±cb
->
OSTCBDly
 = 0;

1583 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1584 
±cb
->
OSTCBExtPå
 = 
≥xt
;

1585 
±cb
->
OSTCBStkSize
 = 
°k_size
;

1586 
±cb
->
OSTCBStkBŸtom
 = 
pbos
;

1587 
±cb
->
OSTCBO±
 = 
›t
;

1588 
±cb
->
OSTCBId
 = 
id
;

1590 
≥xt
 =Öext;

1591 
°k_size
 = stk_size;

1592 
pbos
 =Öbos;

1593 
›t
 = opt;

1594 
id
 = id;

1597 #i‡
OS_TASK_DEL_EN
 > 0

1598 
±cb
->
OSTCBDñReq
 = 
OS_ERR_NONE
;

1601 #i‡
OS_LOWEST_PRIO
 <= 63

1602 
±cb
->
OSTCBY
 = (
INT8U
)(
¥io
 >> 3);

1603 
±cb
->
OSTCBBôY
 = (
INT8U
)(1 <<Ötcb->
OSTCBY
);

1604 
±cb
->
OSTCBX
 = (
INT8U
)(
¥io
 & 0x07);

1605 
±cb
->
OSTCBBôX
 = (
INT8U
)(1 <<Ötcb->
OSTCBX
);

1607 
±cb
->
OSTCBY
 = (
INT8U
)((
¥io
 >> 4) & 0xFF);

1608 
±cb
->
OSTCBBôY
 = (
INT16U
)(1 <<Ötcb->
OSTCBY
);

1609 
±cb
->
OSTCBX
 = (
INT8U
)(
¥io
 & 0x0F);

1610 
±cb
->
OSTCBBôX
 = (
INT16U
)(1 <<Ötcb->
OSTCBX
);

1613 #i‡
OS_EVENT_EN


1614 
±cb
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

1617 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0Ë&& (
OS_TASK_DEL_EN
 > 0)

1618 
±cb
->
OSTCBFœgNode
 = (
OS_FLAG_NODE
 *)0;

1621 #i‡(
OS_MBOX_EN
 > 0Ë|| ((
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0))

1622 
±cb
->
OSTCBMsg
 = (*)0;

1625 #i‡
OS_TASK_PROFILE_EN
 > 0

1626 
±cb
->
OSTCBCtxSwCå
 = 0L;

1627 
±cb
->
OSTCBCy˛esSèπ
 = 0L;

1628 
±cb
->
OSTCBCy˛esTŸ
 = 0L;

1629 
±cb
->
OSTCBStkBa£
 = (
OS_STK
 *)0;

1630 
±cb
->
OSTCBStkU£d
 = 0L;

1633 #i‡
OS_TASK_NAME_SIZE
 > 1

1634 
±cb
->
OSTCBTaskName
[0] = '?';

1635 
±cb
->
OSTCBTaskName
[1] = 
OS_ASCII_NUL
;

1638 
	`OSTCBInôHook
(
±cb
);

1640 
	`OSTaskCª©eHook
(
±cb
);

1642 
	`OS_ENTER_CRITICAL
();

1643 
OSTCBPrioTbl
[
¥io
] = 
±cb
;

1644 
±cb
->
OSTCBNext
 = 
OSTCBLi°
;

1645 
±cb
->
OSTCBPªv
 = (
OS_TCB
 *)0;

1646 i‡(
OSTCBLi°
 !(
OS_TCB
 *)0) {

1647 
OSTCBLi°
->
OSTCBPªv
 = 
±cb
;

1649 
OSTCBLi°
 = 
±cb
;

1650 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

1651 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

1652 
OSTaskCå
++;

1653 
	`OS_EXIT_CRITICAL
();

1654  (
OS_ERR_NONE
);

1656 
	`OS_EXIT_CRITICAL
();

1657  (
OS_ERR_TASK_NO_MORE_TCB
);

1658 
	}
}

	@uCOS-II/Source/os_flag.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

29 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

36 
OS_FœgBlock
(
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags
, 
INT8U
 
waô_ty≥
, 
INT16U
 
timeout
);

37 
BOOLEAN
 
OS_FœgTaskRdy
(
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags_rdy
);

92 #i‡
OS_FLAG_ACCEPT_EN
 > 0

93 
OS_FLAGS
 
	$OSFœgAc˚±
 (
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAGS
 
Êags
, 
INT8U
 
waô_ty≥
, INT8U *
≥º
)

95 
OS_FLAGS
 
Êags_rdy
;

96 
INT8U
 
ªsu…
;

97 
BOOLEAN
 
c⁄sume
;

98 #i‡
OS_CRITICAL_METHOD
 == 3

99 
OS_CPU_SR
 
˝u_§
 = 0;

104 #i‡
OS_ARG_CHK_EN
 > 0

105 i‡(
≥º
 =(
INT8U
 *)0) {

106  ((
OS_FLAGS
)0);

108 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

109 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

110  ((
OS_FLAGS
)0);

113 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

114 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

115  ((
OS_FLAGS
)0);

117 
ªsu…
 = (
INT8U
)(
waô_ty≥
 & 
OS_FLAG_CONSUME
);

118 i‡(
ªsu…
 !(
INT8U
)0) {

119 
waô_ty≥
 &~
OS_FLAG_CONSUME
;

120 
c⁄sume
 = 
OS_TRUE
;

122 
c⁄sume
 = 
OS_FALSE
;

125 *
≥º
 = 
OS_ERR_NONE
;

126 
	`OS_ENTER_CRITICAL
();

127 
waô_ty≥
) {

128 
OS_FLAG_WAIT_SET_ALL
:

129 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

130 i‡(
Êags_rdy
 =
Êags
) {

131 i‡(
c⁄sume
 =
OS_TRUE
) {

132 
pgΩ
->
OSFœgFœgs
 &~
Êags_rdy
;

135 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

137 
	`OS_EXIT_CRITICAL
();

140 
OS_FLAG_WAIT_SET_ANY
:

141 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

142 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

143 i‡(
c⁄sume
 =
OS_TRUE
) {

144 
pgΩ
->
OSFœgFœgs
 &~
Êags_rdy
;

147 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

149 
	`OS_EXIT_CRITICAL
();

152 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0

153 
OS_FLAG_WAIT_CLR_ALL
:

154 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
Êags
);

155 i‡(
Êags_rdy
 =
Êags
) {

156 i‡(
c⁄sume
 =
OS_TRUE
) {

157 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

160 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

162 
	`OS_EXIT_CRITICAL
();

165 
OS_FLAG_WAIT_CLR_ANY
:

166 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
Êags
);

167 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

168 i‡(
c⁄sume
 =
OS_TRUE
) {

169 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

172 *
≥º
 = 
OS_ERR_FLAG_NOT_RDY
;

174 
	`OS_EXIT_CRITICAL
();

179 
	`OS_EXIT_CRITICAL
();

180 
Êags_rdy
 = (
OS_FLAGS
)0;

181 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

184  (
Êags_rdy
);

185 
	}
}

209 
OS_FLAG_GRP
 *
	$OSFœgCª©e
 (
OS_FLAGS
 
Êags
, 
INT8U
 *
≥º
)

211 
OS_FLAG_GRP
 *
pgΩ
;

212 #i‡
OS_CRITICAL_METHOD
 == 3

213 
OS_CPU_SR
 
˝u_§
 = 0;

218 #i‡
OS_ARG_CHK_EN
 > 0

219 i‡(
≥º
 =(
INT8U
 *)0) {

220  ((
OS_FLAG_GRP
 *)0);

223 i‡(
OSI¡Ne°ög
 > 0) {

224 *
≥º
 = 
OS_ERR_CREATE_ISR
;

225  ((
OS_FLAG_GRP
 *)0);

227 
	`OS_ENTER_CRITICAL
();

228 
pgΩ
 = 
OSFœgFªeLi°
;

229 i‡(
pgΩ
 !(
OS_FLAG_GRP
 *)0) {

231 
OSFœgFªeLi°
 = (
OS_FLAG_GRP
 *)OSFœgFªeLi°->
OSFœgWaôLi°
;

232 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_FLAG
;

233 
pgΩ
->
OSFœgFœgs
 = 
Êags
;

234 
pgΩ
->
OSFœgWaôLi°
 = (*)0;

235 #i‡
OS_FLAG_NAME_SIZE
 > 1

236 
pgΩ
->
OSFœgName
[0] = '?';

237 
pgΩ
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

239 
	`OS_EXIT_CRITICAL
();

240 *
≥º
 = 
OS_ERR_NONE
;

242 
	`OS_EXIT_CRITICAL
();

243 *
≥º
 = 
OS_ERR_FLAG_GRP_DEPLETED
;

245  (
pgΩ
);

246 
	}
}

285 #i‡
OS_FLAG_DEL_EN
 > 0

286 
OS_FLAG_GRP
 *
	$OSFœgDñ
 (
OS_FLAG_GRP
 *
pgΩ
, 
INT8U
 
›t
, INT8U *
≥º
)

288 
BOOLEAN
 
èsks_waôög
;

289 
OS_FLAG_NODE
 *
≤ode
;

290 
OS_FLAG_GRP
 *
pgΩ_ªtu∫
;

291 #i‡
OS_CRITICAL_METHOD
 == 3

292 
OS_CPU_SR
 
˝u_§
 = 0;

297 #i‡
OS_ARG_CHK_EN
 > 0

298 i‡(
≥º
 =(
INT8U
 *)0) {

299  (
pgΩ
);

301 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

302 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

303  (
pgΩ
);

306 i‡(
OSI¡Ne°ög
 > 0) {

307 *
≥º
 = 
OS_ERR_DEL_ISR
;

308  (
pgΩ
);

310 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

311 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

312  (
pgΩ
);

314 
	`OS_ENTER_CRITICAL
();

315 i‡(
pgΩ
->
OSFœgWaôLi°
 != (*)0) {

316 
èsks_waôög
 = 
OS_TRUE
;

318 
èsks_waôög
 = 
OS_FALSE
;

320 
›t
) {

321 
OS_DEL_NO_PEND
:

322 i‡(
èsks_waôög
 =
OS_FALSE
) {

323 #i‡
OS_FLAG_NAME_SIZE
 > 1

324 
pgΩ
->
OSFœgName
[0] = '?';

325 
pgΩ
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

327 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

328 
pgΩ
->
OSFœgWaôLi°
 = (*)
OSFœgFªeLi°
;

329 
pgΩ
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

330 
OSFœgFªeLi°
 = 
pgΩ
;

331 
	`OS_EXIT_CRITICAL
();

332 *
≥º
 = 
OS_ERR_NONE
;

333 
pgΩ_ªtu∫
 = (
OS_FLAG_GRP
 *)0;

335 
	`OS_EXIT_CRITICAL
();

336 *
≥º
 = 
OS_ERR_TASK_WAITING
;

337 
pgΩ_ªtu∫
 = 
pgΩ
;

341 
OS_DEL_ALWAYS
:

342 
≤ode
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

343 
≤ode
 !(
OS_FLAG_NODE
 *)0) {

344 ()
	`OS_FœgTaskRdy
(
≤ode
, (
OS_FLAGS
)0);

345 
≤ode
 = (
OS_FLAG_NODE
 *Ìnode->
OSFœgNodeNext
;

347 #i‡
OS_FLAG_NAME_SIZE
 > 1

348 
pgΩ
->
OSFœgName
[0] = '?';

349 
pgΩ
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

351 
pgΩ
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

352 
pgΩ
->
OSFœgWaôLi°
 = (*)
OSFœgFªeLi°
;

353 
pgΩ
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

354 
OSFœgFªeLi°
 = 
pgΩ
;

355 
	`OS_EXIT_CRITICAL
();

356 i‡(
èsks_waôög
 =
OS_TRUE
) {

357 
	`OS_Sched
();

359 *
≥º
 = 
OS_ERR_NONE
;

360 
pgΩ_ªtu∫
 = (
OS_FLAG_GRP
 *)0;

364 
	`OS_EXIT_CRITICAL
();

365 *
≥º
 = 
OS_ERR_INVALID_OPT
;

366 
pgΩ_ªtu∫
 = 
pgΩ
;

369  (
pgΩ_ªtu∫
);

370 
	}
}

396 #i‡
OS_FLAG_NAME_SIZE
 > 1

397 
INT8U
 
	$OSFœgNameGë
 (
OS_FLAG_GRP
 *
pgΩ
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

399 
INT8U
 
Àn
;

400 #i‡
OS_CRITICAL_METHOD
 == 3

401 
OS_CPU_SR
 
˝u_§
 = 0;

406 #i‡
OS_ARG_CHK_EN
 > 0

407 i‡(
≥º
 =(
INT8U
 *)0) {

410 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

411 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

414 i‡(
≤ame
 =(
INT8U
 *)0) {

415 *
≥º
 = 
OS_ERR_PNAME_NULL
;

419 i‡(
OSI¡Ne°ög
 > 0) {

420 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

423 
	`OS_ENTER_CRITICAL
();

424 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

425 
	`OS_EXIT_CRITICAL
();

426 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

429 
Àn
 = 
	`OS_SåC›y
(
≤ame
, 
pgΩ
->
OSFœgName
);

430 
	`OS_EXIT_CRITICAL
();

431 *
≥º
 = 
OS_ERR_NONE
;

432  (
Àn
);

433 
	}
}

460 #i‡
OS_FLAG_NAME_SIZE
 > 1

461 
	$OSFœgNameSë
 (
OS_FLAG_GRP
 *
pgΩ
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

463 
INT8U
 
Àn
;

464 #i‡
OS_CRITICAL_METHOD
 == 3

465 
OS_CPU_SR
 
˝u_§
 = 0;

470 #i‡
OS_ARG_CHK_EN
 > 0

471 i‡(
≥º
 =(
INT8U
 *)0) {

474 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

475 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

478 i‡(
≤ame
 =(
INT8U
 *)0) {

479 *
≥º
 = 
OS_ERR_PNAME_NULL
;

483 i‡(
OSI¡Ne°ög
 > 0) {

484 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

487 
	`OS_ENTER_CRITICAL
();

488 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

489 
	`OS_EXIT_CRITICAL
();

490 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

493 
Àn
 = 
	`OS_SåLí
(
≤ame
);

494 i‡(
Àn
 > (
OS_FLAG_NAME_SIZE
 - 1)) {

495 
	`OS_EXIT_CRITICAL
();

496 *
≥º
 = 
OS_ERR_FLAG_NAME_TOO_LONG
;

499 ()
	`OS_SåC›y
(
pgΩ
->
OSFœgName
, 
≤ame
);

500 
	`OS_EXIT_CRITICAL
();

501 *
≥º
 = 
OS_ERR_NONE
;

503 
	}
}

561 
OS_FLAGS
 
	$OSFœgPíd
 (
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAGS
 
Êags
, 
INT8U
 
waô_ty≥
, 
INT16U
 
timeout
, INT8U *
≥º
)

563 
OS_FLAG_NODE
 
node
;

564 
OS_FLAGS
 
Êags_rdy
;

565 
INT8U
 
ªsu…
;

566 
INT8U
 
≥nd_°©
;

567 
BOOLEAN
 
c⁄sume
;

568 #i‡
OS_CRITICAL_METHOD
 == 3

569 
OS_CPU_SR
 
˝u_§
 = 0;

574 #i‡
OS_ARG_CHK_EN
 > 0

575 i‡(
≥º
 =(
INT8U
 *)0) {

576  ((
OS_FLAGS
)0);

578 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

579 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

580  ((
OS_FLAGS
)0);

583 i‡(
OSI¡Ne°ög
 > 0) {

584 *
≥º
 = 
OS_ERR_PEND_ISR
;

585  ((
OS_FLAGS
)0);

587 i‡(
OSLockNe°ög
 > 0) {

588 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

589  ((
OS_FLAGS
)0);

591 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

592 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

593  ((
OS_FLAGS
)0);

595 
ªsu…
 = (
INT8U
)(
waô_ty≥
 & 
OS_FLAG_CONSUME
);

596 i‡(
ªsu…
 !(
INT8U
)0) {

597 
waô_ty≥
 &~(
INT8U
)
OS_FLAG_CONSUME
;

598 
c⁄sume
 = 
OS_TRUE
;

600 
c⁄sume
 = 
OS_FALSE
;

603 
	`OS_ENTER_CRITICAL
();

604 
waô_ty≥
) {

605 
OS_FLAG_WAIT_SET_ALL
:

606 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

607 i‡(
Êags_rdy
 =
Êags
) {

608 i‡(
c⁄sume
 =
OS_TRUE
) {

609 
pgΩ
->
OSFœgFœgs
 &~
Êags_rdy
;

611 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

612 
	`OS_EXIT_CRITICAL
();

613 *
≥º
 = 
OS_ERR_NONE
;

614  (
Êags_rdy
);

616 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

617 
	`OS_EXIT_CRITICAL
();

621 
OS_FLAG_WAIT_SET_ANY
:

622 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
Êags
);

623 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

624 i‡(
c⁄sume
 =
OS_TRUE
) {

625 
pgΩ
->
OSFœgFœgs
 &~
Êags_rdy
;

627 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

628 
	`OS_EXIT_CRITICAL
();

629 *
≥º
 = 
OS_ERR_NONE
;

630  (
Êags_rdy
);

632 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

633 
	`OS_EXIT_CRITICAL
();

637 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0

638 
OS_FLAG_WAIT_CLR_ALL
:

639 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
Êags
);

640 i‡(
Êags_rdy
 =
Êags
) {

641 i‡(
c⁄sume
 =
OS_TRUE
) {

642 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

644 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

645 
	`OS_EXIT_CRITICAL
();

646 *
≥º
 = 
OS_ERR_NONE
;

647  (
Êags_rdy
);

649 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

650 
	`OS_EXIT_CRITICAL
();

654 
OS_FLAG_WAIT_CLR_ANY
:

655 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
Êags
);

656 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

657 i‡(
c⁄sume
 =
OS_TRUE
) {

658 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

660 
OSTCBCur
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

661 
	`OS_EXIT_CRITICAL
();

662 *
≥º
 = 
OS_ERR_NONE
;

663  (
Êags_rdy
);

665 
	`OS_FœgBlock
(
pgΩ
, &
node
, 
Êags
, 
waô_ty≥
, 
timeout
);

666 
	`OS_EXIT_CRITICAL
();

672 
	`OS_EXIT_CRITICAL
();

673 
Êags_rdy
 = (
OS_FLAGS
)0;

674 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

675  (
Êags_rdy
);

678 
	`OS_Sched
();

679 
	`OS_ENTER_CRITICAL
();

680 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

681 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

682 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

683 
	`OS_FœgU∆ök
(&
node
);

684 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

685 
	`OS_EXIT_CRITICAL
();

686 
Êags_rdy
 = (
OS_FLAGS
)0;

687 
≥nd_°©
) {

688 
OS_STAT_PEND_TO
:

690 *
≥º
 = 
OS_ERR_TIMEOUT
;

693 
OS_STAT_PEND_ABORT
:

694 *
≥º
 = 
OS_ERR_PEND_ABORT
;

697  (
Êags_rdy
);

699 
Êags_rdy
 = 
OSTCBCur
->
OSTCBFœgsRdy
;

700 i‡(
c⁄sume
 =
OS_TRUE
) {

701 
waô_ty≥
) {

702 
OS_FLAG_WAIT_SET_ALL
:

703 
OS_FLAG_WAIT_SET_ANY
:

704 
pgΩ
->
OSFœgFœgs
 &~
Êags_rdy
;

707 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0

708 
OS_FLAG_WAIT_CLR_ALL
:

709 
OS_FLAG_WAIT_CLR_ANY
:

710 
pgΩ
->
OSFœgFœgs
 |
Êags_rdy
;

714 
	`OS_EXIT_CRITICAL
();

715 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

716  ((
OS_FLAGS
)0);

719 
	`OS_EXIT_CRITICAL
();

720 *
≥º
 = 
OS_ERR_NONE
;

721  (
Êags_rdy
);

722 
	}
}

739 
OS_FLAGS
 
	$OSFœgPídGëFœgsRdy
 ()

741 
OS_FLAGS
 
Êags
;

742 #i‡
OS_CRITICAL_METHOD
 == 3

743 
OS_CPU_SR
 
˝u_§
 = 0;

748 
	`OS_ENTER_CRITICAL
();

749 
Êags
 = 
OSTCBCur
->
OSTCBFœgsRdy
;

750 
	`OS_EXIT_CRITICAL
();

751  (
Êags
);

752 
	}
}

796 
OS_FLAGS
 
	$OSFœgPo°
 (
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAGS
 
Êags
, 
INT8U
 
›t
, INT8U *
≥º
)

798 
OS_FLAG_NODE
 *
≤ode
;

799 
BOOLEAN
 
sched
;

800 
OS_FLAGS
 
Êags_cur
;

801 
OS_FLAGS
 
Êags_rdy
;

802 
BOOLEAN
 
rdy
;

803 #i‡
OS_CRITICAL_METHOD
 == 3

804 
OS_CPU_SR
 
˝u_§
 = 0;

809 #i‡
OS_ARG_CHK_EN
 > 0

810 i‡(
≥º
 =(
INT8U
 *)0) {

811  ((
OS_FLAGS
)0);

813 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

814 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

815  ((
OS_FLAGS
)0);

818 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

819 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

820  ((
OS_FLAGS
)0);

823 
	`OS_ENTER_CRITICAL
();

824 
›t
) {

825 
OS_FLAG_CLR
:

826 
pgΩ
->
OSFœgFœgs
 &~
Êags
;

829 
OS_FLAG_SET
:

830 
pgΩ
->
OSFœgFœgs
 |
Êags
;

834 
	`OS_EXIT_CRITICAL
();

835 *
≥º
 = 
OS_ERR_FLAG_INVALID_OPT
;

836  ((
OS_FLAGS
)0);

838 
sched
 = 
OS_FALSE
;

839 
≤ode
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

840 
≤ode
 !(
OS_FLAG_NODE
 *)0) {

841 
≤ode
->
OSFœgNodeWaôTy≥
) {

842 
OS_FLAG_WAIT_SET_ALL
:

843 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

844 i‡(
Êags_rdy
 =
≤ode
->
OSFœgNodeFœgs
) {

845 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

846 i‡(
rdy
 =
OS_TRUE
) {

847 
sched
 = 
OS_TRUE
;

852 
OS_FLAG_WAIT_SET_ANY
:

853 
Êags_rdy
 = (
OS_FLAGS
)(
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

854 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

855 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

856 i‡(
rdy
 =
OS_TRUE
) {

857 
sched
 = 
OS_TRUE
;

862 #i‡
OS_FLAG_WAIT_CLR_EN
 > 0

863 
OS_FLAG_WAIT_CLR_ALL
:

864 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

865 i‡(
Êags_rdy
 =
≤ode
->
OSFœgNodeFœgs
) {

866 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

867 i‡(
rdy
 =
OS_TRUE
) {

868 
sched
 = 
OS_TRUE
;

873 
OS_FLAG_WAIT_CLR_ANY
:

874 
Êags_rdy
 = (
OS_FLAGS
)(~
pgΩ
->
OSFœgFœgs
 & 
≤ode
->
OSFœgNodeFœgs
);

875 i‡(
Êags_rdy
 !(
OS_FLAGS
)0) {

876 
rdy
 = 
	`OS_FœgTaskRdy
(
≤ode
, 
Êags_rdy
);

877 i‡(
rdy
 =
OS_TRUE
) {

878 
sched
 = 
OS_TRUE
;

884 
	`OS_EXIT_CRITICAL
();

885 *
≥º
 = 
OS_ERR_FLAG_WAIT_TYPE
;

886  ((
OS_FLAGS
)0);

888 
≤ode
 = (
OS_FLAG_NODE
 *Ìnode->
OSFœgNodeNext
;

890 
	`OS_EXIT_CRITICAL
();

891 i‡(
sched
 =
OS_TRUE
) {

892 
	`OS_Sched
();

894 
	`OS_ENTER_CRITICAL
();

895 
Êags_cur
 = 
pgΩ
->
OSFœgFœgs
;

896 
	`OS_EXIT_CRITICAL
();

897 *
≥º
 = 
OS_ERR_NONE
;

898  (
Êags_cur
);

899 
	}
}

920 #i‡
OS_FLAG_QUERY_EN
 > 0

921 
OS_FLAGS
 
	$OSFœgQuîy
 (
OS_FLAG_GRP
 *
pgΩ
, 
INT8U
 *
≥º
)

923 
OS_FLAGS
 
Êags
;

924 #i‡
OS_CRITICAL_METHOD
 == 3

925 
OS_CPU_SR
 
˝u_§
 = 0;

930 #i‡
OS_ARG_CHK_EN
 > 0

931 i‡(
≥º
 =(
INT8U
 *)0) {

932  ((
OS_FLAGS
)0);

934 i‡(
pgΩ
 =(
OS_FLAG_GRP
 *)0) {

935 *
≥º
 = 
OS_ERR_FLAG_INVALID_PGRP
;

936  ((
OS_FLAGS
)0);

939 i‡(
pgΩ
->
OSFœgTy≥
 !
OS_EVENT_TYPE_FLAG
) {

940 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

941  ((
OS_FLAGS
)0);

943 
	`OS_ENTER_CRITICAL
();

944 
Êags
 = 
pgΩ
->
OSFœgFœgs
;

945 
	`OS_EXIT_CRITICAL
();

946 *
≥º
 = 
OS_ERR_NONE
;

947  (
Êags
);

948 
	}
}

989 
	$OS_FœgBlock
 (
OS_FLAG_GRP
 *
pgΩ
, 
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags
, 
INT8U
 
waô_ty≥
, 
INT16U
 
timeout
)

991 
OS_FLAG_NODE
 *
≤ode_√xt
;

992 
INT8U
 
y
;

995 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_FLAG
;

996 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

997 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

998 #i‡
OS_TASK_DEL_EN
 > 0

999 
OSTCBCur
->
OSTCBFœgNode
 = 
≤ode
;

1001 
≤ode
->
OSFœgNodeFœgs
 = 
Êags
;

1002 
≤ode
->
OSFœgNodeWaôTy≥
 = 
waô_ty≥
;

1003 
≤ode
->
OSFœgNodeTCB
 = (*)
OSTCBCur
;

1004 
≤ode
->
OSFœgNodeNext
 = 
pgΩ
->
OSFœgWaôLi°
;

1005 
≤ode
->
OSFœgNodePªv
 = (*)0;

1006 
≤ode
->
OSFœgNodeFœgGΩ
 = (*)
pgΩ
;

1007 
≤ode_√xt
 = (
OS_FLAG_NODE
 *)
pgΩ
->
OSFœgWaôLi°
;

1008 i‡(
≤ode_√xt
 != (*)0) {

1009 
≤ode_√xt
->
OSFœgNodePªv
 = 
≤ode
;

1011 
pgΩ
->
OSFœgWaôLi°
 = (*)
≤ode
;

1013 
y
 = 
OSTCBCur
->
OSTCBY
;

1014 
OSRdyTbl
[
y
] &~
OSTCBCur
->
OSTCBBôX
;

1015 i‡(
OSRdyTbl
[
y
] == 0x00) {

1016 
OSRdyGΩ
 &~
OSTCBCur
->
OSTCBBôY
;

1018 
	}
}

1036 
	$OS_FœgInô
 ()

1038 #i‡
OS_MAX_FLAGS
 == 1

1039 
OSFœgFªeLi°
 = (
OS_FLAG_GRP
 *)&
OSFœgTbl
[0];

1040 
OSFœgFªeLi°
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1041 
OSFœgFªeLi°
->
OSFœgWaôLi°
 = (*)0;

1042 
OSFœgFªeLi°
->
OSFœgFœgs
 = (
OS_FLAGS
)0;

1043 #i‡
OS_FLAG_NAME_SIZE
 > 1

1044 
OSFœgFªeLi°
->
OSFœgName
[0] = '?';

1045 
OSFœgFªeLi°
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

1049 #i‡
OS_MAX_FLAGS
 >= 2

1050 
INT16U
 
i
;

1051 
OS_FLAG_GRP
 *
pgΩ1
;

1052 
OS_FLAG_GRP
 *
pgΩ2
;

1055 
	`OS_MemCÃ
((
INT8U
 *)&
OSFœgTbl
[0], (OSFlagTbl));

1056 
pgΩ1
 = &
OSFœgTbl
[0];

1057 
pgΩ2
 = &
OSFœgTbl
[1];

1058 
i
 = 0; i < (
OS_MAX_FLAGS
 - 1); i++) {

1059 
pgΩ1
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1060 
pgΩ1
->
OSFœgWaôLi°
 = (*)
pgΩ2
;

1061 #i‡
OS_FLAG_NAME_SIZE
 > 1

1062 
pgΩ1
->
OSFœgName
[0] = '?';

1063 
pgΩ1
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

1065 
pgΩ1
++;

1066 
pgΩ2
++;

1068 
pgΩ1
->
OSFœgTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

1069 
pgΩ1
->
OSFœgWaôLi°
 = (*)0;

1070 #i‡
OS_FLAG_NAME_SIZE
 > 1

1071 
pgΩ1
->
OSFœgName
[0] = '?';

1072 
pgΩ1
->
OSFœgName
[1] = 
OS_ASCII_NUL
;

1074 
OSFœgFªeLi°
 = &
OSFœgTbl
[0];

1076 
	}
}

1102 
BOOLEAN
 
	$OS_FœgTaskRdy
 (
OS_FLAG_NODE
 *
≤ode
, 
OS_FLAGS
 
Êags_rdy
)

1104 
OS_TCB
 *
±cb
;

1105 
BOOLEAN
 
sched
;

1108 
±cb
 = (
OS_TCB
 *)
≤ode
->
OSFœgNodeTCB
;

1109 
±cb
->
OSTCBDly
 = 0;

1110 
±cb
->
OSTCBFœgsRdy
 = 
Êags_rdy
;

1111 
±cb
->
OSTCBSèt
 &~(
INT8U
)
OS_STAT_FLAG
;

1112 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

1113 i‡(
±cb
->
OSTCBSèt
 =
OS_STAT_RDY
) {

1114 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

1115 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

1116 
sched
 = 
OS_TRUE
;

1118 
sched
 = 
OS_FALSE
;

1120 
	`OS_FœgU∆ök
(
≤ode
);

1121  (
sched
);

1122 
	}
}

1146 
	$OS_FœgU∆ök
 (
OS_FLAG_NODE
 *
≤ode
)

1148 #i‡
OS_TASK_DEL_EN
 > 0

1149 
OS_TCB
 *
±cb
;

1151 
OS_FLAG_GRP
 *
pgΩ
;

1152 
OS_FLAG_NODE
 *
≤ode_¥ev
;

1153 
OS_FLAG_NODE
 *
≤ode_√xt
;

1156 
≤ode_¥ev
 = (
OS_FLAG_NODE
 *)
≤ode
->
OSFœgNodePªv
;

1157 
≤ode_√xt
 = (
OS_FLAG_NODE
 *)
≤ode
->
OSFœgNodeNext
;

1158 i‡(
≤ode_¥ev
 =(
OS_FLAG_NODE
 *)0) {

1159 
pgΩ
 = (
OS_FLAG_GRP
 *)
≤ode
->
OSFœgNodeFœgGΩ
;

1160 
pgΩ
->
OSFœgWaôLi°
 = (*)
≤ode_√xt
;

1161 i‡(
≤ode_√xt
 !(
OS_FLAG_NODE
 *)0) {

1162 
≤ode_√xt
->
OSFœgNodePªv
 = (
OS_FLAG_NODE
 *)0;

1165 
≤ode_¥ev
->
OSFœgNodeNext
 = 
≤ode_√xt
;

1166 i‡(
≤ode_√xt
 !(
OS_FLAG_NODE
 *)0) {

1167 
≤ode_√xt
->
OSFœgNodePªv
 = 
≤ode_¥ev
;

1170 #i‡
OS_TASK_DEL_EN
 > 0

1171 
±cb
 = (
OS_TCB
 *)
≤ode
->
OSFœgNodeTCB
;

1172 
±cb
->
OSTCBFœgNode
 = (
OS_FLAG_NODE
 *)0;

1174 
	}
}

	@uCOS-II/Source/os_mbox.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

29 #i‡
OS_MBOX_EN
 > 0

47 #i‡
OS_MBOX_ACCEPT_EN
 > 0

48 *
	$OSMboxAc˚±
 (
OS_EVENT
 *
≥vít
)

50 *
pmsg
;

51 #i‡
OS_CRITICAL_METHOD
 == 3

52 
OS_CPU_SR
 
˝u_§
 = 0;

57 #i‡
OS_ARG_CHK_EN
 > 0

58 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

62 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

65 
	`OS_ENTER_CRITICAL
();

66 
pmsg
 = 
≥vít
->
OSEvítPå
;

67 
≥vít
->
OSEvítPå
 = (*)0;

68 
	`OS_EXIT_CRITICAL
();

69  (
pmsg
);

70 
	}
}

89 
OS_EVENT
 *
	$OSMboxCª©e
 (*
pmsg
)

91 
OS_EVENT
 *
≥vít
;

92 #i‡
OS_CRITICAL_METHOD
 == 3

93 
OS_CPU_SR
 
˝u_§
 = 0;

98 i‡(
OSI¡Ne°ög
 > 0) {

99  ((
OS_EVENT
 *)0);

101 
	`OS_ENTER_CRITICAL
();

102 
≥vít
 = 
OSEvítFªeLi°
;

103 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

104 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

106 
	`OS_EXIT_CRITICAL
();

107 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

108 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_MBOX
;

109 
≥vít
->
OSEvítC¡
 = 0;

110 
≥vít
->
OSEvítPå
 = 
pmsg
;

111 #i‡
OS_EVENT_NAME_SIZE
 > 1

112 
≥vít
->
OSEvítName
[0] = '?';

113 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

115 
	`OS_EvítWaôLi°Inô
(
≥vít
);

117  (
≥vít
);

118 
	}
}

156 #i‡
OS_MBOX_DEL_EN
 > 0

157 
OS_EVENT
 *
	$OSMboxDñ
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

159 
BOOLEAN
 
èsks_waôög
;

160 
OS_EVENT
 *
≥vít_ªtu∫
;

161 #i‡
OS_CRITICAL_METHOD
 == 3

162 
OS_CPU_SR
 
˝u_§
 = 0;

167 #i‡
OS_ARG_CHK_EN
 > 0

168 i‡(
≥º
 =(
INT8U
 *)0) {

169  (
≥vít
);

171 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

172 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

173  (
≥vít
);

176 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

177 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

178  (
≥vít
);

180 i‡(
OSI¡Ne°ög
 > 0) {

181 *
≥º
 = 
OS_ERR_DEL_ISR
;

182  (
≥vít
);

184 
	`OS_ENTER_CRITICAL
();

185 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

186 
èsks_waôög
 = 
OS_TRUE
;

188 
èsks_waôög
 = 
OS_FALSE
;

190 
›t
) {

191 
OS_DEL_NO_PEND
:

192 i‡(
èsks_waôög
 =
OS_FALSE
) {

193 #i‡
OS_EVENT_NAME_SIZE
 > 1

194 
≥vít
->
OSEvítName
[0] = '?';

195 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

197 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

198 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

199 
≥vít
->
OSEvítC¡
 = 0;

200 
OSEvítFªeLi°
 = 
≥vít
;

201 
	`OS_EXIT_CRITICAL
();

202 *
≥º
 = 
OS_ERR_NONE
;

203 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

205 
	`OS_EXIT_CRITICAL
();

206 *
≥º
 = 
OS_ERR_TASK_WAITING
;

207 
≥vít_ªtu∫
 = 
≥vít
;

211 
OS_DEL_ALWAYS
:

212 
≥vít
->
OSEvítGΩ
 != 0) {

213 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

215 #i‡
OS_EVENT_NAME_SIZE
 > 1

216 
≥vít
->
OSEvítName
[0] = '?';

217 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

219 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

220 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

221 
≥vít
->
OSEvítC¡
 = 0;

222 
OSEvítFªeLi°
 = 
≥vít
;

223 
	`OS_EXIT_CRITICAL
();

224 i‡(
èsks_waôög
 =
OS_TRUE
) {

225 
	`OS_Sched
();

227 *
≥º
 = 
OS_ERR_NONE
;

228 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

232 
	`OS_EXIT_CRITICAL
();

233 *
≥º
 = 
OS_ERR_INVALID_OPT
;

234 
≥vít_ªtu∫
 = 
≥vít
;

237  (
≥vít_ªtu∫
);

238 
	}
}

275 *
	$OSMboxPíd
 (
OS_EVENT
 *
≥vít
, 
INT16U
 
timeout
, 
INT8U
 *
≥º
)

277 *
pmsg
;

278 
INT8U
 
≥nd_°©
;

279 #i‡
OS_CRITICAL_METHOD
 == 3

280 
OS_CPU_SR
 
˝u_§
 = 0;

285 #i‡
OS_ARG_CHK_EN
 > 0

286 i‡(
≥º
 =(
INT8U
 *)0) {

289 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

290 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

294 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

295 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

298 i‡(
OSI¡Ne°ög
 > 0) {

299 *
≥º
 = 
OS_ERR_PEND_ISR
;

302 i‡(
OSLockNe°ög
 > 0) {

303 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

306 
	`OS_ENTER_CRITICAL
();

307 
pmsg
 = 
≥vít
->
OSEvítPå
;

308 i‡(
pmsg
 != (*)0) {

309 
≥vít
->
OSEvítPå
 = (*)0;

310 
	`OS_EXIT_CRITICAL
();

311 *
≥º
 = 
OS_ERR_NONE
;

312  (
pmsg
);

314 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_MBOX
;

315 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

316 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

317 
	`OS_EvítTaskWaô
(
≥vít
);

318 
	`OS_EXIT_CRITICAL
();

319 
	`OS_Sched
();

320 
	`OS_ENTER_CRITICAL
();

321 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

322 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

323 
	`OS_EvítTOAb‹t
(
≥vít
);

324 
	`OS_EXIT_CRITICAL
();

325 
≥nd_°©
) {

326 
OS_STAT_PEND_TO
:

328 *
≥º
 = 
OS_ERR_TIMEOUT
;

331 
OS_STAT_PEND_ABORT
:

332 *
≥º
 = 
OS_ERR_PEND_ABORT
;

337 
pmsg
 = 
OSTCBCur
->
OSTCBMsg
;

338 
OSTCBCur
->
OSTCBMsg
 = (*)0;

339 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

340 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

341 
	`OS_EXIT_CRITICAL
();

342 *
≥º
 = 
OS_ERR_NONE
;

343  (
pmsg
);

344 
	}
}

378 #i‡
OS_MBOX_PEND_ABORT_EN
 > 0

379 
INT8U
 
	$OSMboxPídAb‹t
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

381 
INT8U
 
nbr_èsks
;

382 #i‡
OS_CRITICAL_METHOD
 == 3

383 
OS_CPU_SR
 
˝u_§
 = 0;

388 #i‡
OS_ARG_CHK_EN
 > 0

389 i‡(
≥º
 =(
INT8U
 *)0) {

392 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

393 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

397 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

398 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

401 
	`OS_ENTER_CRITICAL
();

402 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

403 
nbr_èsks
 = 0;

404 
›t
) {

405 
OS_PEND_OPT_BROADCAST
:

406 
≥vít
->
OSEvítGΩ
 != 0) {

407 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_ABORT
);

408 
nbr_èsks
++;

412 
OS_PEND_OPT_NONE
:

414 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MBOX
, 
OS_STAT_PEND_ABORT
);

415 
nbr_èsks
++;

418 
	`OS_EXIT_CRITICAL
();

419 
	`OS_Sched
();

420 *
≥º
 = 
OS_ERR_PEND_ABORT
;

421  (
nbr_èsks
);

423 
	`OS_EXIT_CRITICAL
();

424 *
≥º
 = 
OS_ERR_NONE
;

426 
	}
}

452 #i‡
OS_MBOX_POST_EN
 > 0

453 
INT8U
 
	$OSMboxPo°
 (
OS_EVENT
 *
≥vít
, *
pmsg
)

455 #i‡
OS_CRITICAL_METHOD
 == 3

456 
OS_CPU_SR
 
˝u_§
 = 0;

461 #i‡
OS_ARG_CHK_EN
 > 0

462 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

463  (
OS_ERR_PEVENT_NULL
);

465 i‡(
pmsg
 == (*)0) {

466  (
OS_ERR_POST_NULL_PTR
);

469 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

470  (
OS_ERR_EVENT_TYPE
);

472 
	`OS_ENTER_CRITICAL
();

473 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

475 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

476 
	`OS_EXIT_CRITICAL
();

477 
	`OS_Sched
();

478  (
OS_ERR_NONE
);

480 i‡(
≥vít
->
OSEvítPå
 != (*)0) {

481 
	`OS_EXIT_CRITICAL
();

482  (
OS_ERR_MBOX_FULL
);

484 
≥vít
->
OSEvítPå
 = 
pmsg
;

485 
	`OS_EXIT_CRITICAL
();

486  (
OS_ERR_NONE
);

487 
	}
}

523 #i‡
OS_MBOX_POST_OPT_EN
 > 0

524 
INT8U
 
	$OSMboxPo°O±
 (
OS_EVENT
 *
≥vít
, *
pmsg
, 
INT8U
 
›t
)

526 #i‡
OS_CRITICAL_METHOD
 == 3

527 
OS_CPU_SR
 
˝u_§
 = 0;

532 #i‡
OS_ARG_CHK_EN
 > 0

533 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

534  (
OS_ERR_PEVENT_NULL
);

536 i‡(
pmsg
 == (*)0) {

537  (
OS_ERR_POST_NULL_PTR
);

540 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

541  (
OS_ERR_EVENT_TYPE
);

543 
	`OS_ENTER_CRITICAL
();

544 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

545 i‡((
›t
 & 
OS_POST_OPT_BROADCAST
) != 0x00) {

546 
≥vít
->
OSEvítGΩ
 != 0) {

547 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

550 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_MBOX
, 
OS_STAT_PEND_OK
);

552 
	`OS_EXIT_CRITICAL
();

553 i‡((
›t
 & 
OS_POST_OPT_NO_SCHED
) == 0) {

554 
	`OS_Sched
();

556  (
OS_ERR_NONE
);

558 i‡(
≥vít
->
OSEvítPå
 != (*)0) {

559 
	`OS_EXIT_CRITICAL
();

560  (
OS_ERR_MBOX_FULL
);

562 
≥vít
->
OSEvítPå
 = 
pmsg
;

563 
	`OS_EXIT_CRITICAL
();

564  (
OS_ERR_NONE
);

565 
	}
}

587 #i‡
OS_MBOX_QUERY_EN
 > 0

588 
INT8U
 
	$OSMboxQuîy
 (
OS_EVENT
 *
≥vít
, 
OS_MBOX_DATA
 *
p_mbox_d©a
)

590 
INT8U
 
i
;

591 #i‡
OS_LOWEST_PRIO
 <= 63

592 
INT8U
 *
p§c
;

593 
INT8U
 *
pde°
;

595 
INT16U
 *
p§c
;

596 
INT16U
 *
pde°
;

598 #i‡
OS_CRITICAL_METHOD
 == 3

599 
OS_CPU_SR
 
˝u_§
 = 0;

604 #i‡
OS_ARG_CHK_EN
 > 0

605 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

606  (
OS_ERR_PEVENT_NULL
);

608 i‡(
p_mbox_d©a
 =(
OS_MBOX_DATA
 *)0) {

609  (
OS_ERR_PDATA_NULL
);

612 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MBOX
) {

613  (
OS_ERR_EVENT_TYPE
);

615 
	`OS_ENTER_CRITICAL
();

616 
p_mbox_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

617 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

618 
pde°
 = &
p_mbox_d©a
->
OSEvítTbl
[0];

619 
i
 = 0; i < 
OS_EVENT_TBL_SIZE
; i++) {

620 *
pde°
++ = *
p§c
++;

622 
p_mbox_d©a
->
OSMsg
 = 
≥vít
->
OSEvítPå
;

623 
	`OS_EXIT_CRITICAL
();

624  (
OS_ERR_NONE
);

625 
	}
}

	@uCOS-II/Source/os_mem.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

30 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

61 
OS_MEM
 *
	$OSMemCª©e
 (*
addr
, 
INT32U
 
nblks
, INT32U 
blksize
, 
INT8U
 *
≥º
)

63 
OS_MEM
 *
pmem
;

64 
INT8U
 *
pblk
;

65 **
∂ök
;

66 
INT32U
 
i
;

67 #i‡
OS_CRITICAL_METHOD
 == 3

68 
OS_CPU_SR
 
˝u_§
 = 0;

73 #i‡
OS_ARG_CHK_EN
 > 0

74 i‡(
≥º
 =(
INT8U
 *)0) {

75  ((
OS_MEM
 *)0);

77 i‡(
addr
 == (*)0) {

78 *
≥º
 = 
OS_ERR_MEM_INVALID_ADDR
;

79  ((
OS_MEM
 *)0);

81 i‡(((
INT32U
)
addr
 & ((*) - 1)) != 0){

82 *
≥º
 = 
OS_ERR_MEM_INVALID_ADDR
;

83  ((
OS_MEM
 *)0);

85 i‡(
nblks
 < 2) {

86 *
≥º
 = 
OS_ERR_MEM_INVALID_BLKS
;

87  ((
OS_MEM
 *)0);

89 i‡(
blksize
 < (*)) {

90 *
≥º
 = 
OS_ERR_MEM_INVALID_SIZE
;

91  ((
OS_MEM
 *)0);

94 
	`OS_ENTER_CRITICAL
();

95 
pmem
 = 
OSMemFªeLi°
;

96 i‡(
OSMemFªeLi°
 !(
OS_MEM
 *)0) {

97 
OSMemFªeLi°
 = (
OS_MEM
 *)OSMemFreeList->OSMemFreeList;

99 
	`OS_EXIT_CRITICAL
();

100 i‡(
pmem
 =(
OS_MEM
 *)0) {

101 *
≥º
 = 
OS_ERR_MEM_INVALID_PART
;

102  ((
OS_MEM
 *)0);

104 
∂ök
 = (**)
addr
;

105 
pblk
 = (
INT8U
 *)((
INT32U
)
addr
 + 
blksize
);

106 
i
 = 0; i < (
nblks
 - 1); i++) {

107 *
∂ök
 = (*)
pblk
;

108 
∂ök
 = (**)
pblk
;

109 
pblk
 = (
INT8U
 *)((
INT32U
Ìblk + 
blksize
);

111 *
∂ök
 = (*)0;

112 
pmem
->
OSMemAddr
 = 
addr
;

113 
pmem
->
OSMemFªeLi°
 = 
addr
;

114 
pmem
->
OSMemNFªe
 = 
nblks
;

115 
pmem
->
OSMemNBlks
 = 
nblks
;

116 
pmem
->
OSMemBlkSize
 = 
blksize
;

117 *
≥º
 = 
OS_ERR_NONE
;

118  (
pmem
);

119 
	}
}

141 *
	$OSMemGë
 (
OS_MEM
 *
pmem
, 
INT8U
 *
≥º
)

143 *
pblk
;

144 #i‡
OS_CRITICAL_METHOD
 == 3

145 
OS_CPU_SR
 
˝u_§
 = 0;

150 #i‡
OS_ARG_CHK_EN
 > 0

151 i‡(
≥º
 =(
INT8U
 *)0) {

154 i‡(
pmem
 =(
OS_MEM
 *)0) {

155 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

159 
	`OS_ENTER_CRITICAL
();

160 i‡(
pmem
->
OSMemNFªe
 > 0) {

161 
pblk
 = 
pmem
->
OSMemFªeLi°
;

162 
pmem
->
OSMemFªeLi°
 = *(**)
pblk
;

163 
pmem
->
OSMemNFªe
--;

164 
	`OS_EXIT_CRITICAL
();

165 *
≥º
 = 
OS_ERR_NONE
;

166  (
pblk
);

168 
	`OS_EXIT_CRITICAL
();

169 *
≥º
 = 
OS_ERR_MEM_NO_FREE_BLKS
;

171 
	}
}

194 #i‡
OS_MEM_NAME_SIZE
 > 1

195 
INT8U
 
	$OSMemNameGë
 (
OS_MEM
 *
pmem
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

197 
INT8U
 
Àn
;

198 #i‡
OS_CRITICAL_METHOD
 == 3

199 
OS_CPU_SR
 
˝u_§
 = 0;

204 #i‡
OS_ARG_CHK_EN
 > 0

205 i‡(
≥º
 =(
INT8U
 *)0) {

208 i‡(
pmem
 =(
OS_MEM
 *)0) {

209 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

212 i‡(
≤ame
 =(
INT8U
 *)0) {

213 *
≥º
 = 
OS_ERR_PNAME_NULL
;

217 i‡(
OSI¡Ne°ög
 > 0) {

218 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

221 
	`OS_ENTER_CRITICAL
();

222 
Àn
 = 
	`OS_SåC›y
(
≤ame
, 
pmem
->
OSMemName
);

223 
	`OS_EXIT_CRITICAL
();

224 *
≥º
 = 
OS_ERR_NONE
;

225  (
Àn
);

226 
	}
}

252 #i‡
OS_MEM_NAME_SIZE
 > 1

253 
	$OSMemNameSë
 (
OS_MEM
 *
pmem
, 
INT8U
 *
≤ame
, INT8U *
≥º
)

255 
INT8U
 
Àn
;

256 #i‡
OS_CRITICAL_METHOD
 == 3

257 
OS_CPU_SR
 
˝u_§
 = 0;

262 #i‡
OS_ARG_CHK_EN
 > 0

263 i‡(
≥º
 =(
INT8U
 *)0) {

266 i‡(
pmem
 =(
OS_MEM
 *)0) {

267 *
≥º
 = 
OS_ERR_MEM_INVALID_PMEM
;

270 i‡(
≤ame
 =(
INT8U
 *)0) {

271 *
≥º
 = 
OS_ERR_PNAME_NULL
;

275 i‡(
OSI¡Ne°ög
 > 0) {

276 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

279 
	`OS_ENTER_CRITICAL
();

280 
Àn
 = 
	`OS_SåLí
(
≤ame
);

281 i‡(
Àn
 > (
OS_MEM_NAME_SIZE
 - 1)) {

282 
	`OS_EXIT_CRITICAL
();

283 *
≥º
 = 
OS_ERR_MEM_NAME_TOO_LONG
;

286 ()
	`OS_SåC›y
(
pmem
->
OSMemName
, 
≤ame
);

287 
	`OS_EXIT_CRITICAL
();

288 *
≥º
 = 
OS_ERR_NONE
;

289 
	}
}

311 
INT8U
 
	$OSMemPut
 (
OS_MEM
 *
pmem
, *
pblk
)

313 #i‡
OS_CRITICAL_METHOD
 == 3

314 
OS_CPU_SR
 
˝u_§
 = 0;

319 #i‡
OS_ARG_CHK_EN
 > 0

320 i‡(
pmem
 =(
OS_MEM
 *)0) {

321  (
OS_ERR_MEM_INVALID_PMEM
);

323 i‡(
pblk
 == (*)0) {

324  (
OS_ERR_MEM_INVALID_PBLK
);

327 
	`OS_ENTER_CRITICAL
();

328 i‡(
pmem
->
OSMemNFªe
 >pmem->
OSMemNBlks
) {

329 
	`OS_EXIT_CRITICAL
();

330  (
OS_ERR_MEM_FULL
);

332 *(**)
pblk
 = 
pmem
->
OSMemFªeLi°
;

333 
pmem
->
OSMemFªeLi°
 = 
pblk
;

334 
pmem
->
OSMemNFªe
++;

335 
	`OS_EXIT_CRITICAL
();

336  (
OS_ERR_NONE
);

337 
	}
}

357 #i‡
OS_MEM_QUERY_EN
 > 0

358 
INT8U
 
	$OSMemQuîy
 (
OS_MEM
 *
pmem
, 
OS_MEM_DATA
 *
p_mem_d©a
)

360 #i‡
OS_CRITICAL_METHOD
 == 3

361 
OS_CPU_SR
 
˝u_§
 = 0;

366 #i‡
OS_ARG_CHK_EN
 > 0

367 i‡(
pmem
 =(
OS_MEM
 *)0) {

368  (
OS_ERR_MEM_INVALID_PMEM
);

370 i‡(
p_mem_d©a
 =(
OS_MEM_DATA
 *)0) {

371  (
OS_ERR_MEM_INVALID_PDATA
);

374 
	`OS_ENTER_CRITICAL
();

375 
p_mem_d©a
->
OSAddr
 = 
pmem
->
OSMemAddr
;

376 
p_mem_d©a
->
OSFªeLi°
 = 
pmem
->
OSMemFªeLi°
;

377 
p_mem_d©a
->
OSBlkSize
 = 
pmem
->
OSMemBlkSize
;

378 
p_mem_d©a
->
OSNBlks
 = 
pmem
->
OSMemNBlks
;

379 
p_mem_d©a
->
OSNFªe
 = 
pmem
->
OSMemNFªe
;

380 
	`OS_EXIT_CRITICAL
();

381 
p_mem_d©a
->
OSNU£d
 =Ö_mem_d©a->
OSNBlks
 -Ö_mem_d©a->
OSNFªe
;

382  (
OS_ERR_NONE
);

383 
	}
}

401 
	$OS_MemInô
 ()

403 #i‡
OS_MAX_MEM_PART
 == 1

404 
	`OS_MemCÃ
((
INT8U
 *)&
OSMemTbl
[0], (OSMemTbl));

405 
OSMemFªeLi°
 = (
OS_MEM
 *)&
OSMemTbl
[0];

406 #i‡
OS_MEM_NAME_SIZE
 > 1

407 
OSMemFªeLi°
->
OSMemName
[0] = '?';

408 
OSMemFªeLi°
->
OSMemName
[1] = 
OS_ASCII_NUL
;

412 #i‡
OS_MAX_MEM_PART
 >= 2

413 
OS_MEM
 *
pmem
;

414 
INT16U
 
i
;

417 
	`OS_MemCÃ
((
INT8U
 *)&
OSMemTbl
[0], (OSMemTbl));

418 
pmem
 = &
OSMemTbl
[0];

419 
i
 = 0; i < (
OS_MAX_MEM_PART
 - 1); i++) {

420 
pmem
->
OSMemFªeLi°
 = (*)&
OSMemTbl
[
i
+1];

421 #i‡
OS_MEM_NAME_SIZE
 > 1

422 
pmem
->
OSMemName
[0] = '?';

423 
pmem
->
OSMemName
[1] = 
OS_ASCII_NUL
;

425 
pmem
++;

427 
pmem
->
OSMemFªeLi°
 = (*)0;

428 #i‡
OS_MEM_NAME_SIZE
 > 1

429 
pmem
->
OSMemName
[0] = '?';

430 
pmem
->
OSMemName
[1] = 
OS_ASCII_NUL
;

433 
OSMemFªeLi°
 = &
OSMemTbl
[0];

435 
	}
}

	@uCOS-II/Source/os_mutex.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

30 #i‡
OS_MUTEX_EN
 > 0

37 
	#OS_MUTEX_KEEP_LOWER_8
 (
INT16U
)0x00FFu

	)

38 
	#OS_MUTEX_KEEP_UPPER_8
 (
INT16U
)0xFF00u

	)

40 
	#OS_MUTEX_AVAILABLE
 (
INT16U
)0x00FFu

	)

48 
OSMuãx_RdyAtPrio
(
OS_TCB
 *
±cb
, 
INT8U
 
¥io
);

84 #i‡
OS_MUTEX_ACCEPT_EN
 > 0

85 
BOOLEAN
 
	$OSMuãxAc˚±
 (
OS_EVENT
 *
≥vít
, 
INT8U
 *
≥º
)

87 
INT8U
 
pù
;

88 #i‡
OS_CRITICAL_METHOD
 == 3

89 
OS_CPU_SR
 
˝u_§
 = 0;

94 #i‡
OS_ARG_CHK_EN
 > 0

95 i‡(
≥º
 =(
INT8U
 *)0) {

96  (
OS_FALSE
);

98 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

99 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

100  (
OS_FALSE
);

103 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

104 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

105  (
OS_FALSE
);

107 i‡(
OSI¡Ne°ög
 > 0) {

108 *
≥º
 = 
OS_ERR_PEND_ISR
;

109  (
OS_FALSE
);

111 
	`OS_ENTER_CRITICAL
();

112 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

113 i‡((
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
Ë=
OS_MUTEX_AVAILABLE
) {

114 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

115 
≥vít
->
OSEvítC¡
 |
OSTCBCur
->
OSTCBPrio
;

116 
≥vít
->
OSEvítPå
 = (*)
OSTCBCur
;

117 i‡(
OSTCBCur
->
OSTCBPrio
 <
pù
) {

118 
	`OS_EXIT_CRITICAL
();

119 *
≥º
 = 
OS_ERR_PIP_LOWER
;

121 
	`OS_EXIT_CRITICAL
();

122 *
≥º
 = 
OS_ERR_NONE
;

124  (
OS_TRUE
);

126 
	`OS_EXIT_CRITICAL
();

127 *
≥º
 = 
OS_ERR_NONE
;

128  (
OS_FALSE
);

129 
	}
}

167 
OS_EVENT
 *
	$OSMuãxCª©e
 (
INT8U
 
¥io
, INT8U *
≥º
)

169 
OS_EVENT
 *
≥vít
;

170 #i‡
OS_CRITICAL_METHOD
 == 3

171 
OS_CPU_SR
 
˝u_§
 = 0;

176 #i‡
OS_ARG_CHK_EN
 > 0

177 i‡(
≥º
 =(
INT8U
 *)0) {

178  ((
OS_EVENT
 *)0);

180 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

181 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

182  ((
OS_EVENT
 *)0);

185 i‡(
OSI¡Ne°ög
 > 0) {

186 *
≥º
 = 
OS_ERR_CREATE_ISR
;

187  ((
OS_EVENT
 *)0);

189 
	`OS_ENTER_CRITICAL
();

190 i‡(
OSTCBPrioTbl
[
¥io
] !(
OS_TCB
 *)0) {

191 
	`OS_EXIT_CRITICAL
();

192 *
≥º
 = 
OS_ERR_PRIO_EXIST
;

193  ((
OS_EVENT
 *)0);

195 
OSTCBPrioTbl
[
¥io
] = 
OS_TCB_RESERVED
;

196 
≥vít
 = 
OSEvítFªeLi°
;

197 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

198 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

199 
	`OS_EXIT_CRITICAL
();

200 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

201  (
≥vít
);

203 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

204 
	`OS_EXIT_CRITICAL
();

205 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_MUTEX
;

206 
≥vít
->
OSEvítC¡
 = (
INT16U
)((INT16U)
¥io
 << 8Ë| 
OS_MUTEX_AVAILABLE
;

207 
≥vít
->
OSEvítPå
 = (*)0;

208 #i‡
OS_EVENT_NAME_SIZE
 > 1

209 
≥vít
->
OSEvítName
[0] = '?';

210 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

212 
	`OS_EvítWaôLi°Inô
(
≥vít
);

213 *
≥º
 = 
OS_ERR_NONE
;

214  (
≥vít
);

215 
	}
}

258 #i‡
OS_MUTEX_DEL_EN


259 
OS_EVENT
 *
	$OSMuãxDñ
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

261 
BOOLEAN
 
èsks_waôög
;

262 
OS_EVENT
 *
≥vít_ªtu∫
;

263 
INT8U
 
pù
;

264 
INT8U
 
¥io
;

265 
OS_TCB
 *
±cb
;

266 #i‡
OS_CRITICAL_METHOD
 == 3

267 
OS_CPU_SR
 
˝u_§
 = 0;

272 #i‡
OS_ARG_CHK_EN
 > 0

273 i‡(
≥º
 =(
INT8U
 *)0) {

274  (
≥vít
);

276 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

277 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

278  (
≥vít
);

281 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

282 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

283  (
≥vít
);

285 i‡(
OSI¡Ne°ög
 > 0) {

286 *
≥º
 = 
OS_ERR_DEL_ISR
;

287  (
≥vít
);

289 
	`OS_ENTER_CRITICAL
();

290 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

291 
èsks_waôög
 = 
OS_TRUE
;

293 
èsks_waôög
 = 
OS_FALSE
;

295 
›t
) {

296 
OS_DEL_NO_PEND
:

297 i‡(
èsks_waôög
 =
OS_FALSE
) {

298 #i‡
OS_EVENT_NAME_SIZE
 > 1

299 
≥vít
->
OSEvítName
[0] = '?';

300 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

302 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

303 
OSTCBPrioTbl
[
pù
] = (
OS_TCB
 *)0;

304 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

305 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

306 
≥vít
->
OSEvítC¡
 = 0;

307 
OSEvítFªeLi°
 = 
≥vít
;

308 
	`OS_EXIT_CRITICAL
();

309 *
≥º
 = 
OS_ERR_NONE
;

310 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

312 
	`OS_EXIT_CRITICAL
();

313 *
≥º
 = 
OS_ERR_TASK_WAITING
;

314 
≥vít_ªtu∫
 = 
≥vít
;

318 
OS_DEL_ALWAYS
:

319 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

320 
¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

321 
±cb
 = (
OS_TCB
 *)
≥vít
->
OSEvítPå
;

322 i‡(
±cb
 !(
OS_TCB
 *)0) {

323 i‡(
±cb
->
OSTCBPrio
 =
pù
) {

324 
	`OSMuãx_RdyAtPrio
(
±cb
, 
¥io
);

327 
≥vít
->
OSEvítGΩ
 != 0) {

328 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MUTEX
, 
OS_STAT_PEND_OK
);

330 #i‡
OS_EVENT_NAME_SIZE
 > 1

331 
≥vít
->
OSEvítName
[0] = '?';

332 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

334 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

335 
OSTCBPrioTbl
[
pù
] = (
OS_TCB
 *)0;

336 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

337 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

338 
≥vít
->
OSEvítC¡
 = 0;

339 
OSEvítFªeLi°
 = 
≥vít
;

340 
	`OS_EXIT_CRITICAL
();

341 i‡(
èsks_waôög
 =
OS_TRUE
) {

342 
	`OS_Sched
();

344 *
≥º
 = 
OS_ERR_NONE
;

345 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

349 
	`OS_EXIT_CRITICAL
();

350 *
≥º
 = 
OS_ERR_INVALID_OPT
;

351 
≥vít_ªtu∫
 = 
≥vít
;

354  (
≥vít_ªtu∫
);

355 
	}
}

398 
	$OSMuãxPíd
 (
OS_EVENT
 *
≥vít
, 
INT16U
 
timeout
, 
INT8U
 *
≥º
)

400 
INT8U
 
pù
;

401 
INT8U
 
m¥io
;

402 
BOOLEAN
 
rdy
;

403 
OS_TCB
 *
±cb
;

404 
OS_EVENT
 *
≥vít2
;

405 
INT8U
 
y
;

406 
INT8U
 
≥nd_°©
;

407 #i‡
OS_CRITICAL_METHOD
 == 3

408 
OS_CPU_SR
 
˝u_§
 = 0;

413 #i‡
OS_ARG_CHK_EN
 > 0

414 i‡(
≥º
 =(
INT8U
 *)0) {

417 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

418 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

422 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

423 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

426 i‡(
OSI¡Ne°ög
 > 0) {

427 *
≥º
 = 
OS_ERR_PEND_ISR
;

430 i‡(
OSLockNe°ög
 > 0) {

431 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

434 
	`OS_ENTER_CRITICAL
();

435 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

437 i‡((
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
Ë=
OS_MUTEX_AVAILABLE
) {

438 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

439 
≥vít
->
OSEvítC¡
 |
OSTCBCur
->
OSTCBPrio
;

440 
≥vít
->
OSEvítPå
 = (*)
OSTCBCur
;

441 i‡(
OSTCBCur
->
OSTCBPrio
 <
pù
) {

442 
	`OS_EXIT_CRITICAL
();

443 *
≥º
 = 
OS_ERR_PIP_LOWER
;

445 
	`OS_EXIT_CRITICAL
();

446 *
≥º
 = 
OS_ERR_NONE
;

450 
m¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

451 
±cb
 = (
OS_TCB
 *)(
≥vít
->
OSEvítPå
);

452 i‡(
±cb
->
OSTCBPrio
 > 
pù
) {

453 i‡(
m¥io
 > 
OSTCBCur
->
OSTCBPrio
) {

454 
y
 = 
±cb
->
OSTCBY
;

455 i‡((
OSRdyTbl
[
y
] & 
±cb
->
OSTCBBôX
) != 0) {

456 
OSRdyTbl
[
y
] &~
±cb
->
OSTCBBôX
;

457 i‡(
OSRdyTbl
[
y
] == 0) {

458 
OSRdyGΩ
 &~
±cb
->
OSTCBBôY
;

460 
rdy
 = 
OS_TRUE
;

462 
≥vít2
 = 
±cb
->
OSTCBEvítPå
;

463 i‡(
≥vít2
 !(
OS_EVENT
 *)0) {

464 i‡((
≥vít2
->
OSEvítTbl
[
±cb
->
OSTCBY
] &~±cb->
OSTCBBôX
) == 0) {

465 
≥vít2
->
OSEvítGΩ
 &~
±cb
->
OSTCBBôY
;

468 
rdy
 = 
OS_FALSE
;

470 
±cb
->
OSTCBPrio
 = 
pù
;

471 #i‡
OS_LOWEST_PRIO
 <= 63

472 
±cb
->
OSTCBY
 = (
INT8U
)–±cb->
OSTCBPrio
 >> 3);

473 
±cb
->
OSTCBX
 = (
INT8U
)–±cb->
OSTCBPrio
 & 0x07);

474 
±cb
->
OSTCBBôY
 = (
INT8U
)(1 <<Ötcb->
OSTCBY
);

475 
±cb
->
OSTCBBôX
 = (
INT8U
)(1 <<Ötcb->
OSTCBX
);

477 
±cb
->
OSTCBY
 = (
INT8U
)(’tcb->
OSTCBPrio
 >> 4) & 0xFF);

478 
±cb
->
OSTCBX
 = (
INT8U
)–±cb->
OSTCBPrio
 & 0x0F);

479 
±cb
->
OSTCBBôY
 = (
INT16U
)(1 <<Ötcb->
OSTCBY
);

480 
±cb
->
OSTCBBôX
 = (
INT16U
)(1 <<Ötcb->
OSTCBX
);

482 i‡(
rdy
 =
OS_TRUE
) {

483 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

484 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

486 
≥vít2
 = 
±cb
->
OSTCBEvítPå
;

487 i‡(
≥vít2
 !(
OS_EVENT
 *)0) {

488 
≥vít2
->
OSEvítGΩ
 |
±cb
->
OSTCBBôY
;

489 
≥vít2
->
OSEvítTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

492 
OSTCBPrioTbl
[
pù
] = 
±cb
;

495 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_MUTEX
;

496 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

497 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

498 
	`OS_EvítTaskWaô
(
≥vít
);

499 
	`OS_EXIT_CRITICAL
();

500 
	`OS_Sched
();

501 
	`OS_ENTER_CRITICAL
();

502 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

503 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

504 
	`OS_EvítTOAb‹t
(
≥vít
);

505 
	`OS_EXIT_CRITICAL
();

506 
≥nd_°©
) {

507 
OS_STAT_PEND_TO
:

509 *
≥º
 = 
OS_ERR_TIMEOUT
;

512 
OS_STAT_PEND_ABORT
:

513 *
≥º
 = 
OS_ERR_PEND_ABORT
;

518 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

519 
	`OS_EXIT_CRITICAL
();

520 *
≥º
 = 
OS_ERR_NONE
;

521 
	}
}

547 
INT8U
 
	$OSMuãxPo°
 (
OS_EVENT
 *
≥vít
)

549 
INT8U
 
pù
;

550 
INT8U
 
¥io
;

551 #i‡
OS_CRITICAL_METHOD
 == 3

552 
OS_CPU_SR
 
˝u_§
 = 0;

557 i‡(
OSI¡Ne°ög
 > 0) {

558  (
OS_ERR_POST_ISR
);

560 #i‡
OS_ARG_CHK_EN
 > 0

561 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

562  (
OS_ERR_PEVENT_NULL
);

565 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

566  (
OS_ERR_EVENT_TYPE
);

568 
	`OS_ENTER_CRITICAL
();

569 
pù
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

570 
¥io
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

571 i‡(
OSTCBCur
 !(
OS_TCB
 *)
≥vít
->
OSEvítPå
) {

572 
	`OS_EXIT_CRITICAL
();

573  (
OS_ERR_NOT_MUTEX_OWNER
);

575 i‡(
OSTCBCur
->
OSTCBPrio
 =
pù
) {

576 
	`OSMuãx_RdyAtPrio
(
OSTCBCur
, 
¥io
);

578 
OSTCBPrioTbl
[
pù
] = 
OS_TCB_RESERVED
;

579 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

581 
¥io
 = 
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_MUTEX
, 
OS_STAT_PEND_OK
);

582 
≥vít
->
OSEvítC¡
 &
OS_MUTEX_KEEP_UPPER_8
;

583 
≥vít
->
OSEvítC¡
 |
¥io
;

584 
≥vít
->
OSEvítPå
 = 
OSTCBPrioTbl
[
¥io
];

585 i‡(
¥io
 <
pù
) {

586 
	`OS_EXIT_CRITICAL
();

587 
	`OS_Sched
();

588  (
OS_ERR_PIP_LOWER
);

590 
	`OS_EXIT_CRITICAL
();

591 
	`OS_Sched
();

592  (
OS_ERR_NONE
);

595 
≥vít
->
OSEvítC¡
 |
OS_MUTEX_AVAILABLE
;

596 
≥vít
->
OSEvítPå
 = (*)0;

597 
	`OS_EXIT_CRITICAL
();

598  (
OS_ERR_NONE
);

599 
	}
}

619 #i‡
OS_MUTEX_QUERY_EN
 > 0

620 
INT8U
 
	$OSMuãxQuîy
 (
OS_EVENT
 *
≥vít
, 
OS_MUTEX_DATA
 *
p_muãx_d©a
)

622 
INT8U
 
i
;

623 #i‡
OS_LOWEST_PRIO
 <= 63

624 
INT8U
 *
p§c
;

625 
INT8U
 *
pde°
;

627 
INT16U
 *
p§c
;

628 
INT16U
 *
pde°
;

630 #i‡
OS_CRITICAL_METHOD
 == 3

631 
OS_CPU_SR
 
˝u_§
 = 0;

636 i‡(
OSI¡Ne°ög
 > 0) {

637  (
OS_ERR_QUERY_ISR
);

639 #i‡
OS_ARG_CHK_EN
 > 0

640 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

641  (
OS_ERR_PEVENT_NULL
);

643 i‡(
p_muãx_d©a
 =(
OS_MUTEX_DATA
 *)0) {

644  (
OS_ERR_PDATA_NULL
);

647 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_MUTEX
) {

648  (
OS_ERR_EVENT_TYPE
);

650 
	`OS_ENTER_CRITICAL
();

651 
p_muãx_d©a
->
OSMuãxPIP
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 >> 8);

652 
p_muãx_d©a
->
OSOw√rPrio
 = (
INT8U
)(
≥vít
->
OSEvítC¡
 & 
OS_MUTEX_KEEP_LOWER_8
);

653 i‡(
p_muãx_d©a
->
OSOw√rPrio
 == 0xFF) {

654 
p_muãx_d©a
->
OSVÆue
 = 
OS_TRUE
;

656 
p_muãx_d©a
->
OSVÆue
 = 
OS_FALSE
;

658 
p_muãx_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

659 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

660 
pde°
 = &
p_muãx_d©a
->
OSEvítTbl
[0];

661 
i
 = 0; i < 
OS_EVENT_TBL_SIZE
; i++) {

662 *
pde°
++ = *
p§c
++;

664 
	`OS_EXIT_CRITICAL
();

665  (
OS_ERR_NONE
);

666 
	}
}

684 
	$OSMuãx_RdyAtPrio
 (
OS_TCB
 *
±cb
, 
INT8U
 
¥io
)

686 
INT8U
 
y
;

689 
y
 = 
±cb
->
OSTCBY
;

690 
OSRdyTbl
[
y
] &~
±cb
->
OSTCBBôX
;

691 i‡(
OSRdyTbl
[
y
] == 0) {

692 
OSRdyGΩ
 &~
±cb
->
OSTCBBôY
;

694 
±cb
->
OSTCBPrio
 = 
¥io
;

695 #i‡
OS_LOWEST_PRIO
 <= 63

696 
±cb
->
OSTCBY
 = (
INT8U
)((
¥io
 >> (INT8U)3) & (INT8U)0x07);

697 
±cb
->
OSTCBX
 = (
INT8U
Ë(
¥io
 & (INT8U)0x07);

698 
±cb
->
OSTCBBôY
 = (
INT8U
)(1 <<Ötcb->
OSTCBY
);

699 
±cb
->
OSTCBBôX
 = (
INT8U
)(1 <<Ötcb->
OSTCBX
);

701 
±cb
->
OSTCBY
 = (
INT8U
)((
¥io
 >> (INT8U)4) & (INT8U)0x0F);

702 
±cb
->
OSTCBX
 = (
INT8U
Ë(
¥io
 & (INT8U)0x0F);

703 
±cb
->
OSTCBBôY
 = (
INT16U
)(1 <<Ötcb->
OSTCBY
);

704 
±cb
->
OSTCBBôX
 = (
INT16U
)(1 <<Ötcb->
OSTCBX
);

706 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

707 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

708 
OSTCBPrioTbl
[
¥io
] = 
±cb
;

709 
	}
}

	@uCOS-II/Source/os_q.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

29 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

61 #i‡
OS_Q_ACCEPT_EN
 > 0

62 *
	$OSQAc˚±
 (
OS_EVENT
 *
≥vít
, 
INT8U
 *
≥º
)

64 *
pmsg
;

65 
OS_Q
 *
pq
;

66 #i‡
OS_CRITICAL_METHOD
 == 3

67 
OS_CPU_SR
 
˝u_§
 = 0;

72 #i‡
OS_ARG_CHK_EN
 > 0

73 i‡(
≥º
 =(
INT8U
 *)0) {

76 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

77 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

81 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

82 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

85 
	`OS_ENTER_CRITICAL
();

86 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

87 i‡(
pq
->
OSQE¡rõs
 > 0) {

88 
pmsg
 = *
pq
->
OSQOut
++;

89 
pq
->
OSQE¡rõs
--;

90 i‡(
pq
->
OSQOut
 =pq->
OSQEnd
) {

91 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

93 *
≥º
 = 
OS_ERR_NONE
;

95 *
≥º
 = 
OS_ERR_Q_EMPTY
;

96 
pmsg
 = (*)0;

98 
	`OS_EXIT_CRITICAL
();

99  (
pmsg
);

100 
	}
}

122 
OS_EVENT
 *
	$OSQCª©e
 (**
°¨t
, 
INT16U
 
size
)

124 
OS_EVENT
 *
≥vít
;

125 
OS_Q
 *
pq
;

126 #i‡
OS_CRITICAL_METHOD
 == 3

127 
OS_CPU_SR
 
˝u_§
 = 0;

132 i‡(
OSI¡Ne°ög
 > 0) {

133  ((
OS_EVENT
 *)0);

135 
	`OS_ENTER_CRITICAL
();

136 
≥vít
 = 
OSEvítFªeLi°
;

137 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

138 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

140 
	`OS_EXIT_CRITICAL
();

141 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

142 
	`OS_ENTER_CRITICAL
();

143 
pq
 = 
OSQFªeLi°
;

144 i‡(
pq
 !(
OS_Q
 *)0) {

145 
OSQFªeLi°
 = OSQFªeLi°->
OSQPå
;

146 
	`OS_EXIT_CRITICAL
();

147 
pq
->
OSQSèπ
 = 
°¨t
;

148 
pq
->
OSQEnd
 = &
°¨t
[
size
];

149 
pq
->
OSQIn
 = 
°¨t
;

150 
pq
->
OSQOut
 = 
°¨t
;

151 
pq
->
OSQSize
 = 
size
;

152 
pq
->
OSQE¡rõs
 = 0;

153 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_Q
;

154 
≥vít
->
OSEvítC¡
 = 0;

155 
≥vít
->
OSEvítPå
 = 
pq
;

156 #i‡
OS_EVENT_NAME_SIZE
 > 1

157 
≥vít
->
OSEvítName
[0] = '?';

158 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

160 
	`OS_EvítWaôLi°Inô
(
≥vít
);

162 
≥vít
->
OSEvítPå
 = (*)
OSEvítFªeLi°
;

163 
OSEvítFªeLi°
 = 
≥vít
;

164 
	`OS_EXIT_CRITICAL
();

165 
≥vít
 = (
OS_EVENT
 *)0;

168  (
≥vít
);

169 
	}
}

212 #i‡
OS_Q_DEL_EN
 > 0

213 
OS_EVENT
 *
	$OSQDñ
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

215 
BOOLEAN
 
èsks_waôög
;

216 
OS_EVENT
 *
≥vít_ªtu∫
;

217 
OS_Q
 *
pq
;

218 #i‡
OS_CRITICAL_METHOD
 == 3

219 
OS_CPU_SR
 
˝u_§
 = 0;

224 #i‡
OS_ARG_CHK_EN
 > 0

225 i‡(
≥º
 =(
INT8U
 *)0) {

226  (
≥vít
);

228 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

229 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

230  (
≥vít
);

233 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

234 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

235  (
≥vít
);

237 i‡(
OSI¡Ne°ög
 > 0) {

238 *
≥º
 = 
OS_ERR_DEL_ISR
;

239  (
≥vít
);

241 
	`OS_ENTER_CRITICAL
();

242 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

243 
èsks_waôög
 = 
OS_TRUE
;

245 
èsks_waôög
 = 
OS_FALSE
;

247 
›t
) {

248 
OS_DEL_NO_PEND
:

249 i‡(
èsks_waôög
 =
OS_FALSE
) {

250 #i‡
OS_EVENT_NAME_SIZE
 > 1

251 
≥vít
->
OSEvítName
[0] = '?';

252 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

254 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

255 
pq
->
OSQPå
 = 
OSQFªeLi°
;

256 
OSQFªeLi°
 = 
pq
;

257 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

258 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

259 
≥vít
->
OSEvítC¡
 = 0;

260 
OSEvítFªeLi°
 = 
≥vít
;

261 
	`OS_EXIT_CRITICAL
();

262 *
≥º
 = 
OS_ERR_NONE
;

263 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

265 
	`OS_EXIT_CRITICAL
();

266 *
≥º
 = 
OS_ERR_TASK_WAITING
;

267 
≥vít_ªtu∫
 = 
≥vít
;

271 
OS_DEL_ALWAYS
:

272 
≥vít
->
OSEvítGΩ
 != 0) {

273 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

275 #i‡
OS_EVENT_NAME_SIZE
 > 1

276 
≥vít
->
OSEvítName
[0] = '?';

277 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

279 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

280 
pq
->
OSQPå
 = 
OSQFªeLi°
;

281 
OSQFªeLi°
 = 
pq
;

282 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

283 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

284 
≥vít
->
OSEvítC¡
 = 0;

285 
OSEvítFªeLi°
 = 
≥vít
;

286 
	`OS_EXIT_CRITICAL
();

287 i‡(
èsks_waôög
 =
OS_TRUE
) {

288 
	`OS_Sched
();

290 *
≥º
 = 
OS_ERR_NONE
;

291 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

295 
	`OS_EXIT_CRITICAL
();

296 *
≥º
 = 
OS_ERR_INVALID_OPT
;

297 
≥vít_ªtu∫
 = 
≥vít
;

300  (
≥vít_ªtu∫
);

301 
	}
}

324 #i‡
OS_Q_FLUSH_EN
 > 0

325 
INT8U
 
	$OSQFlush
 (
OS_EVENT
 *
≥vít
)

327 
OS_Q
 *
pq
;

328 #i‡
OS_CRITICAL_METHOD
 == 3

329 
OS_CPU_SR
 
˝u_§
 = 0;

334 #i‡
OS_ARG_CHK_EN
 > 0

335 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

336  (
OS_ERR_PEVENT_NULL
);

338 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

339  (
OS_ERR_EVENT_TYPE
);

342 
	`OS_ENTER_CRITICAL
();

343 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

344 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

345 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

346 
pq
->
OSQE¡rõs
 = 0;

347 
	`OS_EXIT_CRITICAL
();

348  (
OS_ERR_NONE
);

349 
	}
}

389 *
	$OSQPíd
 (
OS_EVENT
 *
≥vít
, 
INT16U
 
timeout
, 
INT8U
 *
≥º
)

391 *
pmsg
;

392 
OS_Q
 *
pq
;

393 
INT8U
 
≥nd_°©
;

394 #i‡
OS_CRITICAL_METHOD
 == 3

395 
OS_CPU_SR
 
˝u_§
 = 0;

400 #i‡
OS_ARG_CHK_EN
 > 0

401 i‡(
≥º
 =(
INT8U
 *)0) {

404 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

405 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

408 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

409 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

413 i‡(
OSI¡Ne°ög
 > 0) {

414 *
≥º
 = 
OS_ERR_PEND_ISR
;

417 i‡(
OSLockNe°ög
 > 0) {

418 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

421 
	`OS_ENTER_CRITICAL
();

422 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

423 i‡(
pq
->
OSQE¡rõs
 > 0) {

424 
pmsg
 = *
pq
->
OSQOut
++;

425 
pq
->
OSQE¡rõs
--;

426 i‡(
pq
->
OSQOut
 =pq->
OSQEnd
) {

427 
pq
->
OSQOut
 =Öq->
OSQSèπ
;

429 
	`OS_EXIT_CRITICAL
();

430 *
≥º
 = 
OS_ERR_NONE
;

431  (
pmsg
);

433 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_Q
;

434 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

435 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

436 
	`OS_EvítTaskWaô
(
≥vít
);

437 
	`OS_EXIT_CRITICAL
();

438 
	`OS_Sched
();

439 
	`OS_ENTER_CRITICAL
();

440 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

441 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

442 
	`OS_EvítTOAb‹t
(
≥vít
);

443 
	`OS_EXIT_CRITICAL
();

444 
≥nd_°©
) {

445 
OS_STAT_PEND_TO
:

447 *
≥º
 = 
OS_ERR_TIMEOUT
;

450 
OS_STAT_PEND_ABORT
:

451 *
≥º
 = 
OS_ERR_PEND_ABORT
;

456 
pmsg
 = 
OSTCBCur
->
OSTCBMsg
;

457 
OSTCBCur
->
OSTCBMsg
 = (*)0;

458 
OSTCBCur
->
OSTCBSèt
 = 
OS_STAT_RDY
;

459 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

460 
	`OS_EXIT_CRITICAL
();

461 *
≥º
 = 
OS_ERR_NONE
;

462  (
pmsg
);

463 
	}
}

497 #i‡
OS_Q_PEND_ABORT_EN
 > 0

498 
INT8U
 
	$OSQPídAb‹t
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

500 
INT8U
 
nbr_èsks
;

501 #i‡
OS_CRITICAL_METHOD
 == 3

502 
OS_CPU_SR
 
˝u_§
 = 0;

507 #i‡
OS_ARG_CHK_EN
 > 0

508 i‡(
≥º
 =(
INT8U
 *)0) {

511 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

512 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

516 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

517 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

520 
	`OS_ENTER_CRITICAL
();

521 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

522 
nbr_èsks
 = 0;

523 
›t
) {

524 
OS_PEND_OPT_BROADCAST
:

525 
≥vít
->
OSEvítGΩ
 != 0) {

526 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_ABORT
);

527 
nbr_èsks
++;

531 
OS_PEND_OPT_NONE
:

533 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_Q
, 
OS_STAT_PEND_ABORT
);

534 
nbr_èsks
++;

537 
	`OS_EXIT_CRITICAL
();

538 
	`OS_Sched
();

539 *
≥º
 = 
OS_ERR_PEND_ABORT
;

540  (
nbr_èsks
);

542 
	`OS_EXIT_CRITICAL
();

543 *
≥º
 = 
OS_ERR_NONE
;

545 
	}
}

568 #i‡
OS_Q_POST_EN
 > 0

569 
INT8U
 
	$OSQPo°
 (
OS_EVENT
 *
≥vít
, *
pmsg
)

571 
OS_Q
 *
pq
;

572 #i‡
OS_CRITICAL_METHOD
 == 3

573 
OS_CPU_SR
 
˝u_§
 = 0;

578 #i‡
OS_ARG_CHK_EN
 > 0

579 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

580  (
OS_ERR_PEVENT_NULL
);

583 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

584  (
OS_ERR_EVENT_TYPE
);

586 
	`OS_ENTER_CRITICAL
();

587 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

589 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

590 
	`OS_EXIT_CRITICAL
();

591 
	`OS_Sched
();

592  (
OS_ERR_NONE
);

594 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

595 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

596 
	`OS_EXIT_CRITICAL
();

597  (
OS_ERR_Q_FULL
);

599 *
pq
->
OSQIn
++ = 
pmsg
;

600 
pq
->
OSQE¡rõs
++;

601 i‡(
pq
->
OSQIn
 =pq->
OSQEnd
) {

602 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

604 
	`OS_EXIT_CRITICAL
();

605  (
OS_ERR_NONE
);

606 
	}
}

630 #i‡
OS_Q_POST_FRONT_EN
 > 0

631 
INT8U
 
	$OSQPo°Fr⁄t
 (
OS_EVENT
 *
≥vít
, *
pmsg
)

633 
OS_Q
 *
pq
;

634 #i‡
OS_CRITICAL_METHOD
 == 3

635 
OS_CPU_SR
 
˝u_§
 = 0;

640 #i‡
OS_ARG_CHK_EN
 > 0

641 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

642  (
OS_ERR_PEVENT_NULL
);

645 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

646  (
OS_ERR_EVENT_TYPE
);

648 
	`OS_ENTER_CRITICAL
();

649 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

651 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

652 
	`OS_EXIT_CRITICAL
();

653 
	`OS_Sched
();

654  (
OS_ERR_NONE
);

656 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

657 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

658 
	`OS_EXIT_CRITICAL
();

659  (
OS_ERR_Q_FULL
);

661 i‡(
pq
->
OSQOut
 =pq->
OSQSèπ
) {

662 
pq
->
OSQOut
 =Öq->
OSQEnd
;

664 
pq
->
OSQOut
--;

665 *
pq
->
OSQOut
 = 
pmsg
;

666 
pq
->
OSQE¡rõs
++;

667 
	`OS_EXIT_CRITICAL
();

668  (
OS_ERR_NONE
);

669 
	}
}

701 #i‡
OS_Q_POST_OPT_EN
 > 0

702 
INT8U
 
	$OSQPo°O±
 (
OS_EVENT
 *
≥vít
, *
pmsg
, 
INT8U
 
›t
)

704 
OS_Q
 *
pq
;

705 #i‡
OS_CRITICAL_METHOD
 == 3

706 
OS_CPU_SR
 
˝u_§
 = 0;

711 #i‡
OS_ARG_CHK_EN
 > 0

712 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

713  (
OS_ERR_PEVENT_NULL
);

716 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

717  (
OS_ERR_EVENT_TYPE
);

719 
	`OS_ENTER_CRITICAL
();

720 i‡(
≥vít
->
OSEvítGΩ
 != 0x00) {

721 i‡((
›t
 & 
OS_POST_OPT_BROADCAST
) != 0x00) {

722 
≥vít
->
OSEvítGΩ
 != 0) {

723 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

726 ()
	`OS_EvítTaskRdy
(
≥vít
, 
pmsg
, 
OS_STAT_Q
, 
OS_STAT_PEND_OK
);

728 
	`OS_EXIT_CRITICAL
();

729 i‡((
›t
 & 
OS_POST_OPT_NO_SCHED
) == 0) {

730 
	`OS_Sched
();

732  (
OS_ERR_NONE
);

734 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

735 i‡(
pq
->
OSQE¡rõs
 >pq->
OSQSize
) {

736 
	`OS_EXIT_CRITICAL
();

737  (
OS_ERR_Q_FULL
);

739 i‡((
›t
 & 
OS_POST_OPT_FRONT
) != 0x00) {

740 i‡(
pq
->
OSQOut
 =pq->
OSQSèπ
) {

741 
pq
->
OSQOut
 =Öq->
OSQEnd
;

743 
pq
->
OSQOut
--;

744 *
pq
->
OSQOut
 = 
pmsg
;

746 *
pq
->
OSQIn
++ = 
pmsg
;

747 i‡(
pq
->
OSQIn
 =pq->
OSQEnd
) {

748 
pq
->
OSQIn
 =Öq->
OSQSèπ
;

751 
pq
->
OSQE¡rõs
++;

752 
	`OS_EXIT_CRITICAL
();

753  (
OS_ERR_NONE
);

754 
	}
}

775 #i‡
OS_Q_QUERY_EN
 > 0

776 
INT8U
 
	$OSQQuîy
 (
OS_EVENT
 *
≥vít
, 
OS_Q_DATA
 *
p_q_d©a
)

778 
OS_Q
 *
pq
;

779 
INT8U
 
i
;

780 #i‡
OS_LOWEST_PRIO
 <= 63

781 
INT8U
 *
p§c
;

782 
INT8U
 *
pde°
;

784 
INT16U
 *
p§c
;

785 
INT16U
 *
pde°
;

787 #i‡
OS_CRITICAL_METHOD
 == 3

788 
OS_CPU_SR
 
˝u_§
 = 0;

793 #i‡
OS_ARG_CHK_EN
 > 0

794 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

795  (
OS_ERR_PEVENT_NULL
);

797 i‡(
p_q_d©a
 =(
OS_Q_DATA
 *)0) {

798  (
OS_ERR_PDATA_NULL
);

801 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_Q
) {

802  (
OS_ERR_EVENT_TYPE
);

804 
	`OS_ENTER_CRITICAL
();

805 
p_q_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

806 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

807 
pde°
 = &
p_q_d©a
->
OSEvítTbl
[0];

808 
i
 = 0; i < 
OS_EVENT_TBL_SIZE
; i++) {

809 *
pde°
++ = *
p§c
++;

811 
pq
 = (
OS_Q
 *)
≥vít
->
OSEvítPå
;

812 i‡(
pq
->
OSQE¡rõs
 > 0) {

813 
p_q_d©a
->
OSMsg
 = *
pq
->
OSQOut
;

815 
p_q_d©a
->
OSMsg
 = (*)0;

817 
p_q_d©a
->
OSNMsgs
 = 
pq
->
OSQE¡rõs
;

818 
p_q_d©a
->
OSQSize
 = 
pq
->OSQSize;

819 
	`OS_EXIT_CRITICAL
();

820  (
OS_ERR_NONE
);

821 
	}
}

840 
	$OS_QInô
 ()

842 #i‡
OS_MAX_QS
 == 1

843 
OSQFªeLi°
 = &
OSQTbl
[0];

844 
OSQFªeLi°
->
OSQPå
 = (
OS_Q
 *)0;

847 #i‡
OS_MAX_QS
 >= 2

848 
INT16U
 
i
;

849 
OS_Q
 *
pq1
;

850 
OS_Q
 *
pq2
;

854 
	`OS_MemCÃ
((
INT8U
 *)&
OSQTbl
[0], (OSQTbl));

855 
pq1
 = &
OSQTbl
[0];

856 
pq2
 = &
OSQTbl
[1];

857 
i
 = 0; i < (
OS_MAX_QS
 - 1); i++) {

858 
pq1
->
OSQPå
 = 
pq2
;

859 
pq1
++;

860 
pq2
++;

862 
pq1
->
OSQPå
 = (
OS_Q
 *)0;

863 
OSQFªeLi°
 = &
OSQTbl
[0];

865 
	}
}

	@uCOS-II/Source/os_sem.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

29 #i‡
OS_SEM_EN
 > 0

49 #i‡
OS_SEM_ACCEPT_EN
 > 0

50 
INT16U
 
	$OSSemAc˚±
 (
OS_EVENT
 *
≥vít
)

52 
INT16U
 
˙t
;

53 #i‡
OS_CRITICAL_METHOD
 == 3

54 
OS_CPU_SR
 
˝u_§
 = 0;

59 #i‡
OS_ARG_CHK_EN
 > 0

60 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

64 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

67 
	`OS_ENTER_CRITICAL
();

68 
˙t
 = 
≥vít
->
OSEvítC¡
;

69 i‡(
˙t
 > 0) {

70 
≥vít
->
OSEvítC¡
--;

72 
	`OS_EXIT_CRITICAL
();

73  (
˙t
);

74 
	}
}

95 
OS_EVENT
 *
	$OSSemCª©e
 (
INT16U
 
˙t
)

97 
OS_EVENT
 *
≥vít
;

98 #i‡
OS_CRITICAL_METHOD
 == 3

99 
OS_CPU_SR
 
˝u_§
 = 0;

104 i‡(
OSI¡Ne°ög
 > 0) {

105  ((
OS_EVENT
 *)0);

107 
	`OS_ENTER_CRITICAL
();

108 
≥vít
 = 
OSEvítFªeLi°
;

109 i‡(
OSEvítFªeLi°
 !(
OS_EVENT
 *)0) {

110 
OSEvítFªeLi°
 = (
OS_EVENT
 *)OSEvítFªeLi°->
OSEvítPå
;

112 
	`OS_EXIT_CRITICAL
();

113 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

114 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_SEM
;

115 
≥vít
->
OSEvítC¡
 = 
˙t
;

116 
≥vít
->
OSEvítPå
 = (*)0;

117 #i‡
OS_EVENT_NAME_SIZE
 > 1

118 
≥vít
->
OSEvítName
[0] = '?';

119 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

121 
	`OS_EvítWaôLi°Inô
(
≥vít
);

123  (
≥vít
);

124 
	}
}

164 #i‡
OS_SEM_DEL_EN
 > 0

165 
OS_EVENT
 *
	$OSSemDñ
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

167 
BOOLEAN
 
èsks_waôög
;

168 
OS_EVENT
 *
≥vít_ªtu∫
;

169 #i‡
OS_CRITICAL_METHOD
 == 3

170 
OS_CPU_SR
 
˝u_§
 = 0;

175 #i‡
OS_ARG_CHK_EN
 > 0

176 i‡(
≥º
 =(
INT8U
 *)0) {

177  (
≥vít
);

179 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

180 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

181  (
≥vít
);

184 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

185 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

186  (
≥vít
);

188 i‡(
OSI¡Ne°ög
 > 0) {

189 *
≥º
 = 
OS_ERR_DEL_ISR
;

190  (
≥vít
);

192 
	`OS_ENTER_CRITICAL
();

193 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

194 
èsks_waôög
 = 
OS_TRUE
;

196 
èsks_waôög
 = 
OS_FALSE
;

198 
›t
) {

199 
OS_DEL_NO_PEND
:

200 i‡(
èsks_waôög
 =
OS_FALSE
) {

201 #i‡
OS_EVENT_NAME_SIZE
 > 1

202 
≥vít
->
OSEvítName
[0] = '?';

203 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

205 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

206 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

207 
≥vít
->
OSEvítC¡
 = 0;

208 
OSEvítFªeLi°
 = 
≥vít
;

209 
	`OS_EXIT_CRITICAL
();

210 *
≥º
 = 
OS_ERR_NONE
;

211 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

213 
	`OS_EXIT_CRITICAL
();

214 *
≥º
 = 
OS_ERR_TASK_WAITING
;

215 
≥vít_ªtu∫
 = 
≥vít
;

219 
OS_DEL_ALWAYS
:

220 
≥vít
->
OSEvítGΩ
 != 0) {

221 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_OK
);

223 #i‡
OS_EVENT_NAME_SIZE
 > 1

224 
≥vít
->
OSEvítName
[0] = '?';

225 
≥vít
->
OSEvítName
[1] = 
OS_ASCII_NUL
;

227 
≥vít
->
OSEvítTy≥
 = 
OS_EVENT_TYPE_UNUSED
;

228 
≥vít
->
OSEvítPå
 = 
OSEvítFªeLi°
;

229 
≥vít
->
OSEvítC¡
 = 0;

230 
OSEvítFªeLi°
 = 
≥vít
;

231 
	`OS_EXIT_CRITICAL
();

232 i‡(
èsks_waôög
 =
OS_TRUE
) {

233 
	`OS_Sched
();

235 *
≥º
 = 
OS_ERR_NONE
;

236 
≥vít_ªtu∫
 = (
OS_EVENT
 *)0;

240 
	`OS_EXIT_CRITICAL
();

241 *
≥º
 = 
OS_ERR_INVALID_OPT
;

242 
≥vít_ªtu∫
 = 
≥vít
;

245  (
≥vít_ªtu∫
);

246 
	}
}

282 
	$OSSemPíd
 (
OS_EVENT
 *
≥vít
, 
INT16U
 
timeout
, 
INT8U
 *
≥º
)

284 
INT8U
 
≥nd_°©
;

285 #i‡
OS_CRITICAL_METHOD
 == 3

286 
OS_CPU_SR
 
˝u_§
 = 0;

291 #i‡
OS_ARG_CHK_EN
 > 0

292 i‡(
≥º
 =(
INT8U
 *)0) {

295 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

296 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

300 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

301 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

304 i‡(
OSI¡Ne°ög
 > 0) {

305 *
≥º
 = 
OS_ERR_PEND_ISR
;

308 i‡(
OSLockNe°ög
 > 0) {

309 *
≥º
 = 
OS_ERR_PEND_LOCKED
;

312 
	`OS_ENTER_CRITICAL
();

313 i‡(
≥vít
->
OSEvítC¡
 > 0) {

314 
≥vít
->
OSEvítC¡
--;

315 
	`OS_EXIT_CRITICAL
();

316 *
≥º
 = 
OS_ERR_NONE
;

320 
OSTCBCur
->
OSTCBSèt
 |
OS_STAT_SEM
;

321 
OSTCBCur
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

322 
OSTCBCur
->
OSTCBDly
 = 
timeout
;

323 
	`OS_EvítTaskWaô
(
≥vít
);

324 
	`OS_EXIT_CRITICAL
();

325 
	`OS_Sched
();

326 
	`OS_ENTER_CRITICAL
();

327 i‡(
OSTCBCur
->
OSTCBSètPíd
 !
OS_STAT_PEND_OK
) {

328 
≥nd_°©
 = 
OSTCBCur
->
OSTCBSètPíd
;

329 
	`OS_EvítTOAb‹t
(
≥vít
);

330 
	`OS_EXIT_CRITICAL
();

331 
≥nd_°©
) {

332 
OS_STAT_PEND_TO
:

334 *
≥º
 = 
OS_ERR_TIMEOUT
;

337 
OS_STAT_PEND_ABORT
:

338 *
≥º
 = 
OS_ERR_PEND_ABORT
;

343 
OSTCBCur
->
OSTCBEvítPå
 = (
OS_EVENT
 *)0;

344 
	`OS_EXIT_CRITICAL
();

345 *
≥º
 = 
OS_ERR_NONE
;

346 
	}
}

382 #i‡
OS_SEM_PEND_ABORT_EN
 > 0

383 
INT8U
 
	$OSSemPídAb‹t
 (
OS_EVENT
 *
≥vít
, 
INT8U
 
›t
, INT8U *
≥º
)

385 
INT8U
 
nbr_èsks
;

386 #i‡
OS_CRITICAL_METHOD
 == 3

387 
OS_CPU_SR
 
˝u_§
 = 0;

392 #i‡
OS_ARG_CHK_EN
 > 0

393 i‡(
≥º
 =(
INT8U
 *)0) {

396 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

397 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

401 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

402 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

405 
	`OS_ENTER_CRITICAL
();

406 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

407 
nbr_èsks
 = 0;

408 
›t
) {

409 
OS_PEND_OPT_BROADCAST
:

410 
≥vít
->
OSEvítGΩ
 != 0) {

411 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_ABORT
);

412 
nbr_èsks
++;

416 
OS_PEND_OPT_NONE
:

418 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_ABORT
);

419 
nbr_èsks
++;

422 
	`OS_EXIT_CRITICAL
();

423 
	`OS_Sched
();

424 *
≥º
 = 
OS_ERR_PEND_ABORT
;

425  (
nbr_èsks
);

427 
	`OS_EXIT_CRITICAL
();

428 *
≥º
 = 
OS_ERR_NONE
;

430 
	}
}

452 
INT8U
 
	$OSSemPo°
 (
OS_EVENT
 *
≥vít
)

454 #i‡
OS_CRITICAL_METHOD
 == 3

455 
OS_CPU_SR
 
˝u_§
 = 0;

460 #i‡
OS_ARG_CHK_EN
 > 0

461 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

462  (
OS_ERR_PEVENT_NULL
);

465 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

466  (
OS_ERR_EVENT_TYPE
);

468 
	`OS_ENTER_CRITICAL
();

469 i‡(
≥vít
->
OSEvítGΩ
 != 0) {

471 ()
	`OS_EvítTaskRdy
(
≥vít
, (*)0, 
OS_STAT_SEM
, 
OS_STAT_PEND_OK
);

472 
	`OS_EXIT_CRITICAL
();

473 
	`OS_Sched
();

474  (
OS_ERR_NONE
);

476 i‡(
≥vít
->
OSEvítC¡
 < 65535u) {

477 
≥vít
->
OSEvítC¡
++;

478 
	`OS_EXIT_CRITICAL
();

479  (
OS_ERR_NONE
);

481 
	`OS_EXIT_CRITICAL
();

482  (
OS_ERR_SEM_OVF
);

483 
	}
}

505 #i‡
OS_SEM_QUERY_EN
 > 0

506 
INT8U
 
	$OSSemQuîy
 (
OS_EVENT
 *
≥vít
, 
OS_SEM_DATA
 *
p_£m_d©a
)

508 #i‡
OS_LOWEST_PRIO
 <= 63

509 
INT8U
 *
p§c
;

510 
INT8U
 *
pde°
;

512 
INT16U
 *
p§c
;

513 
INT16U
 *
pde°
;

515 
INT8U
 
i
;

516 #i‡
OS_CRITICAL_METHOD
 == 3

517 
OS_CPU_SR
 
˝u_§
 = 0;

522 #i‡
OS_ARG_CHK_EN
 > 0

523 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

524  (
OS_ERR_PEVENT_NULL
);

526 i‡(
p_£m_d©a
 =(
OS_SEM_DATA
 *)0) {

527  (
OS_ERR_PDATA_NULL
);

530 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

531  (
OS_ERR_EVENT_TYPE
);

533 
	`OS_ENTER_CRITICAL
();

534 
p_£m_d©a
->
OSEvítGΩ
 = 
≥vít
->OSEventGrp;

535 
p§c
 = &
≥vít
->
OSEvítTbl
[0];

536 
pde°
 = &
p_£m_d©a
->
OSEvítTbl
[0];

537 
i
 = 0; i < 
OS_EVENT_TBL_SIZE
; i++) {

538 *
pde°
++ = *
p§c
++;

540 
p_£m_d©a
->
OSC¡
 = 
≥vít
->
OSEvítC¡
;

541 
	`OS_EXIT_CRITICAL
();

542  (
OS_ERR_NONE
);

543 
	}
}

571 #i‡
OS_SEM_SET_EN
 > 0

572 
	$OSSemSë
 (
OS_EVENT
 *
≥vít
, 
INT16U
 
˙t
, 
INT8U
 *
≥º
)

574 #i‡
OS_CRITICAL_METHOD
 == 3

575 
OS_CPU_SR
 
˝u_§
 = 0;

580 #i‡
OS_ARG_CHK_EN
 > 0

581 i‡(
≥º
 =(
INT8U
 *)0) {

584 i‡(
≥vít
 =(
OS_EVENT
 *)0) {

585 *
≥º
 = 
OS_ERR_PEVENT_NULL
;

589 i‡(
≥vít
->
OSEvítTy≥
 !
OS_EVENT_TYPE_SEM
) {

590 *
≥º
 = 
OS_ERR_EVENT_TYPE
;

593 
	`OS_ENTER_CRITICAL
();

594 *
≥º
 = 
OS_ERR_NONE
;

595 i‡(
≥vít
->
OSEvítC¡
 > 0) {

596 
≥vít
->
OSEvítC¡
 = 
˙t
;

598 i‡(
≥vít
->
OSEvítGΩ
 == 0) {

599 
≥vít
->
OSEvítC¡
 = 
˙t
;

601 *
≥º
 = 
OS_ERR_TASK_WAITING
;

604 
	`OS_EXIT_CRITICAL
();

605 
	}
}

	@uCOS-II/Source/os_task.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

51 #i‡
OS_TASK_CHANGE_PRIO_EN
 > 0

52 
INT8U
 
	$OSTaskCh™gePrio
 (
INT8U
 
ﬁd¥io
, INT8U 
√w¥io
)

54 #i‡
OS_EVENT_EN


55 
OS_EVENT
 *
≥vít
;

57 
OS_TCB
 *
±cb
;

58 
INT8U
 
x
;

59 
INT8U
 
y
;

60 #i‡
OS_LOWEST_PRIO
 <= 63

61 
INT8U
 
bôx
;

62 
INT8U
 
bôy
;

64 
INT16U
 
bôx
;

65 
INT16U
 
bôy
;

67 
INT8U
 
y_ﬁd
;

68 #i‡
OS_CRITICAL_METHOD
 == 3

69 
OS_CPU_SR
 
˝u_§
 = 0;

74 #i‡
OS_ARG_CHK_EN
 > 0

75 i‡(
ﬁd¥io
 >
OS_LOWEST_PRIO
) {

76 i‡(
ﬁd¥io
 !
OS_PRIO_SELF
) {

77  (
OS_ERR_PRIO_INVALID
);

80 i‡(
√w¥io
 >
OS_LOWEST_PRIO
) {

81  (
OS_ERR_PRIO_INVALID
);

84 
	`OS_ENTER_CRITICAL
();

85 i‡(
OSTCBPrioTbl
[
√w¥io
] !(
OS_TCB
 *)0) {

86 
	`OS_EXIT_CRITICAL
();

87  (
OS_ERR_PRIO_EXIST
);

89 i‡(
ﬁd¥io
 =
OS_PRIO_SELF
) {

90 
ﬁd¥io
 = 
OSTCBCur
->
OSTCBPrio
;

92 
±cb
 = 
OSTCBPrioTbl
[
ﬁd¥io
];

93 i‡(
±cb
 =(
OS_TCB
 *)0) {

94 
	`OS_EXIT_CRITICAL
();

95  (
OS_ERR_PRIO
);

97 i‡(
±cb
 =
OS_TCB_RESERVED
) {

98 
	`OS_EXIT_CRITICAL
();

99  (
OS_ERR_TASK_NOT_EXIST
);

101 #i‡
OS_LOWEST_PRIO
 <= 63

102 
y
 = (
INT8U
)(
√w¥io
 >> 3);

103 
x
 = (
INT8U
)(
√w¥io
 & 0x07);

104 
bôy
 = (
INT8U
)(1 << 
y
);

105 
bôx
 = (
INT8U
)(1 << 
x
);

107 
y
 = (
INT8U
)((
√w¥io
 >> 4) & 0x0F);

108 
x
 = (
INT8U
)–
√w¥io
 & 0x0F);

109 
bôy
 = (
INT16U
)(1 << 
y
);

110 
bôx
 = (
INT16U
)(1 << 
x
);

113 
OSTCBPrioTbl
[
ﬁd¥io
] = (
OS_TCB
 *)0;

114 
OSTCBPrioTbl
[
√w¥io
] = 
±cb
;

115 
y_ﬁd
 = 
±cb
->
OSTCBY
;

116 i‡((
OSRdyTbl
[
y_ﬁd
] & 
±cb
->
OSTCBBôX
) != 0) {

117 
OSRdyTbl
[
y_ﬁd
] &~
±cb
->
OSTCBBôX
;

118 i‡(
OSRdyTbl
[
y_ﬁd
] == 0) {

119 
OSRdyGΩ
 &~
±cb
->
OSTCBBôY
;

121 
OSRdyGΩ
 |
bôy
;

122 
OSRdyTbl
[
y
] |
bôx
;

124 #i‡
OS_EVENT_EN


125 
≥vít
 = 
±cb
->
OSTCBEvítPå
;

126 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

127 
≥vít
->
OSEvítTbl
[
y_ﬁd
] &~
±cb
->
OSTCBBôX
;

128 i‡(
≥vít
->
OSEvítTbl
[
y_ﬁd
] == 0) {

129 
≥vít
->
OSEvítGΩ
 &~
±cb
->
OSTCBBôY
;

131 
≥vít
->
OSEvítGΩ
 |
bôy
;

132 
≥vít
->
OSEvítTbl
[
y
] |
bôx
;

135 
±cb
->
OSTCBPrio
 = 
√w¥io
;

136 
±cb
->
OSTCBY
 = 
y
;

137 
±cb
->
OSTCBX
 = 
x
;

138 
±cb
->
OSTCBBôY
 = 
bôy
;

139 
±cb
->
OSTCBBôX
 = 
bôx
;

140 
	`OS_EXIT_CRITICAL
();

141 i‡(
OSRu¬ög
 =
OS_TRUE
) {

142 
	`OS_Sched
();

144  (
OS_ERR_NONE
);

145 
	}
}

188 #i‡
OS_TASK_CREATE_EN
 > 0

189 
INT8U
 
OSTaskCª©e
((*
èsk
)(*
p_¨g
),*p_¨g,
OS_STK
 *
±os
,INT8U 
¥io
)

191 
OS_STK
 *
p•
;

192 
INT8U
 
îr
;

193 #i‡
OS_CRITICAL_METHOD
 == 3

194 
OS_CPU_SR
 
˝u_§
 = 0;

199 #i‡
OS_ARG_CHK_EN
 > 0

200 if(
¥io
 > 
OS_LOWEST_PRIO
)

202  (
OS_ERR_PRIO_INVALID
);

206 
	`OS_ENTER_CRITICAL
();

208 if(
OSI¡Ne°ög
>0)

210 
	`OS_EXIT_CRITICAL
();

211  (
OS_ERR_TASK_CREATE_ISR
);

214 if(
OSTCBPrioTbl
[
¥io
]==(
OS_TCB
 *)0)

216 
OSTCBPrioTbl
[
¥io
]=
OS_TCB_RESERVED
;

218 
	`OS_EXIT_CRITICAL
();

219 
p•
 = 
	`OSTaskStkInô
(
èsk
,
p_¨g
,
±os
,0);

220 
îr
 = 
	`OS_TCBInô
(
¥io
,
p•
,(
OS_STK
 *)0,0,0,(*)0,0);

221 if(
îr
 =
OS_ERR_NONE
)

223 if(
OSRu¬ög
==
OS_TRUE
)

225 
	`OS_Sched
();

230 
	`OS_ENTER_CRITICAL
();

231 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

232 
	`OS_EXIT_CRITICAL
();

234  (
îr
);

237 
	`OS_EXIT_CRITICAL
();

238  (
OS_ERR_PRIO_EXIST
);

239 
	}
}

312 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

313 
INT8U
 
OSTaskCª©eExt
 ((*
èsk
)(*
p_¨g
),

314 *
p_¨g
,

315 
OS_STK
 *
±os
,

316 
INT8U
 
¥io
,

317 
INT16U
 
id
,

318 
OS_STK
 *
pbos
,

319 
INT32U
 
°k_size
,

320 *
≥xt
,

321 
INT16U
 
›t
)

323 
OS_STK
 *
p•
;

324 
INT8U
 
îr
;

325 #i‡
OS_CRITICAL_METHOD
 == 3

326 
OS_CPU_SR
 
˝u_§
 = 0;

331 #i‡
OS_ARG_CHK_EN
 > 0

332 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

333  (
OS_ERR_PRIO_INVALID
);

336 
	`OS_ENTER_CRITICAL
();

337 i‡(
OSI¡Ne°ög
 > 0) {

338 
	`OS_EXIT_CRITICAL
();

339  (
OS_ERR_TASK_CREATE_ISR
);

341 i‡(
OSTCBPrioTbl
[
¥io
] =(
OS_TCB
 *)0) {

342 
OSTCBPrioTbl
[
¥io
] = 
OS_TCB_RESERVED
;

344 
	`OS_EXIT_CRITICAL
();

346 #i‡
OS_TASK_STAT_STK_CHK_EN
 > 0

347 
	`OS_TaskStkCÃ
(
pbos
, 
°k_size
, 
›t
);

350 
p•
 = 
	`OSTaskStkInô
(
èsk
, 
p_¨g
, 
±os
, 
›t
);

351 
îr
 = 
	`OS_TCBInô
(
¥io
, 
p•
, 
pbos
, 
id
, 
°k_size
, 
≥xt
, 
›t
);

352 i‡(
îr
 =
OS_ERR_NONE
) {

353 i‡(
OSRu¬ög
 =
OS_TRUE
) {

354 
	`OS_Sched
();

357 
	`OS_ENTER_CRITICAL
();

358 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

359 
	`OS_EXIT_CRITICAL
();

361  (
îr
);

363 
	`OS_EXIT_CRITICAL
();

364  (
OS_ERR_PRIO_EXIST
);

365 
	}
}

404 #i‡
OS_TASK_DEL_EN
 > 0

405 
INT8U
 
	$OSTaskDñ
 (
INT8U
 
¥io
)

407 #i‡
OS_EVENT_EN


408 
OS_EVENT
 *
≥vít
;

410 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

411 
OS_FLAG_NODE
 *
≤ode
;

413 
OS_TCB
 *
±cb
;

414 
INT8U
 
y
;

415 #i‡
OS_CRITICAL_METHOD
 == 3

416 
OS_CPU_SR
 
˝u_§
 = 0;

421 i‡(
OSI¡Ne°ög
 > 0) {

422  (
OS_ERR_TASK_DEL_ISR
);

424 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

425  (
OS_ERR_TASK_DEL_IDLE
);

427 #i‡
OS_ARG_CHK_EN
 > 0

428 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

429 i‡(
¥io
 !
OS_PRIO_SELF
) {

430  (
OS_ERR_PRIO_INVALID
);

435 
	`OS_ENTER_CRITICAL
();

436 i‡(
¥io
 =
OS_PRIO_SELF
) {

437 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

439 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

440 i‡(
±cb
 =(
OS_TCB
 *)0) {

441 
	`OS_EXIT_CRITICAL
();

442  (
OS_ERR_TASK_NOT_EXIST
);

444 i‡(
±cb
 =
OS_TCB_RESERVED
) {

445 
	`OS_EXIT_CRITICAL
();

446  (
OS_ERR_TASK_DEL
);

448 
y
 = 
±cb
->
OSTCBY
;

449 
OSRdyTbl
[
y
] &~
±cb
->
OSTCBBôX
;

450 i‡(
OSRdyTbl
[
y
] == 0) {

451 
OSRdyGΩ
 &~
±cb
->
OSTCBBôY
;

454 #i‡
OS_EVENT_EN


455 
≥vít
 = 
±cb
->
OSTCBEvítPå
;

456 i‡(
≥vít
 !(
OS_EVENT
 *)0) {

457 
≥vít
->
OSEvítTbl
[
y
] &~
±cb
->
OSTCBBôX
;

458 i‡(
≥vít
->
OSEvítTbl
[
y
] == 0) {

459 
≥vít
->
OSEvítGΩ
 &~
±cb
->
OSTCBBôY
;

464 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

465 
≤ode
 = 
±cb
->
OSTCBFœgNode
;

466 i‡(
≤ode
 !(
OS_FLAG_NODE
 *)0) {

467 
	`OS_FœgU∆ök
(
≤ode
);

471 
±cb
->
OSTCBDly
 = 0;

472 
±cb
->
OSTCBSèt
 = 
OS_STAT_RDY
;

473 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

474 i‡(
OSLockNe°ög
 < 255u) {

475 
OSLockNe°ög
++;

477 
	`OS_EXIT_CRITICAL
();

478 
	`OS_Dummy
();

479 
	`OS_ENTER_CRITICAL
();

480 i‡(
OSLockNe°ög
 > 0) {

481 
OSLockNe°ög
--;

483 
	`OSTaskDñHook
(
±cb
);

484 
OSTaskCå
--;

485 
OSTCBPrioTbl
[
¥io
] = (
OS_TCB
 *)0;

486 i‡(
±cb
->
OSTCBPªv
 =(
OS_TCB
 *)0) {

487 
±cb
->
OSTCBNext
->
OSTCBPªv
 = (
OS_TCB
 *)0;

488 
OSTCBLi°
 = 
±cb
->
OSTCBNext
;

490 
±cb
->
OSTCBPªv
->
OSTCBNext
 =Ötcb->OSTCBNext;

491 
±cb
->
OSTCBNext
->
OSTCBPªv
 =Ötcb->OSTCBPrev;

493 
±cb
->
OSTCBNext
 = 
OSTCBFªeLi°
;

494 
OSTCBFªeLi°
 = 
±cb
;

495 #i‡
OS_TASK_NAME_SIZE
 > 1

496 
±cb
->
OSTCBTaskName
[0] = '?';

497 
±cb
->
OSTCBTaskName
[1] = 
OS_ASCII_NUL
;

499 
	`OS_EXIT_CRITICAL
();

500 i‡(
OSRu¬ög
 =
OS_TRUE
) {

501 
	`OS_Sched
();

503  (
OS_ERR_NONE
);

504 
	}
}

553 #i‡
OS_TASK_DEL_EN
 > 0

554 
INT8U
 
	$OSTaskDñReq
 (
INT8U
 
¥io
)

556 
INT8U
 
°©
;

557 
OS_TCB
 *
±cb
;

558 #i‡
OS_CRITICAL_METHOD
 == 3

559 
OS_CPU_SR
 
˝u_§
 = 0;

564 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

565  (
OS_ERR_TASK_DEL_IDLE
);

567 #i‡
OS_ARG_CHK_EN
 > 0

568 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

569 i‡(
¥io
 !
OS_PRIO_SELF
) {

570  (
OS_ERR_PRIO_INVALID
);

574 i‡(
¥io
 =
OS_PRIO_SELF
) {

575 
	`OS_ENTER_CRITICAL
();

576 
°©
 = 
OSTCBCur
->
OSTCBDñReq
;

577 
	`OS_EXIT_CRITICAL
();

578  (
°©
);

580 
	`OS_ENTER_CRITICAL
();

581 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

582 i‡(
±cb
 =(
OS_TCB
 *)0) {

583 
	`OS_EXIT_CRITICAL
();

584  (
OS_ERR_TASK_NOT_EXIST
);

586 i‡(
±cb
 =
OS_TCB_RESERVED
) {

587 
	`OS_EXIT_CRITICAL
();

588  (
OS_ERR_TASK_DEL
);

590 
±cb
->
OSTCBDñReq
 = 
OS_ERR_TASK_DEL_REQ
;

591 
	`OS_EXIT_CRITICAL
();

592  (
OS_ERR_NONE
);

593 
	}
}

621 #i‡
OS_TASK_NAME_SIZE
 > 1

622 
INT8U
 
	$OSTaskNameGë
 (
INT8U
 
¥io
, INT8U *
≤ame
, INT8U *
≥º
)

624 
OS_TCB
 *
±cb
;

625 
INT8U
 
Àn
;

626 #i‡
OS_CRITICAL_METHOD
 == 3

627 
OS_CPU_SR
 
˝u_§
 = 0;

632 #i‡
OS_ARG_CHK_EN
 > 0

633 i‡(
≥º
 =(
INT8U
 *)0) {

636 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

637 i‡(
¥io
 !
OS_PRIO_SELF
) {

638 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

642 i‡(
≤ame
 =(
INT8U
 *)0) {

643 *
≥º
 = 
OS_ERR_PNAME_NULL
;

647 i‡(
OSI¡Ne°ög
 > 0) {

648 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

651 
	`OS_ENTER_CRITICAL
();

652 i‡(
¥io
 =
OS_PRIO_SELF
) {

653 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

655 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

656 i‡(
±cb
 =(
OS_TCB
 *)0) {

657 
	`OS_EXIT_CRITICAL
();

658 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

661 i‡(
±cb
 =
OS_TCB_RESERVED
) {

662 
	`OS_EXIT_CRITICAL
();

663 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

666 
Àn
 = 
	`OS_SåC›y
(
≤ame
, 
±cb
->
OSTCBTaskName
);

667 
	`OS_EXIT_CRITICAL
();

668 *
≥º
 = 
OS_ERR_NONE
;

669  (
Àn
);

670 
	}
}

700 #i‡
OS_TASK_NAME_SIZE
 > 1

701 
	$OSTaskNameSë
 (
INT8U
 
¥io
, INT8U *
≤ame
, INT8U *
≥º
)

703 
INT8U
 
Àn
;

704 
OS_TCB
 *
±cb
;

705 #i‡
OS_CRITICAL_METHOD
 == 3

706 
OS_CPU_SR
 
˝u_§
 = 0;

711 #i‡
OS_ARG_CHK_EN
 > 0

712 i‡(
≥º
 =(
INT8U
 *)0) {

715 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

716 i‡(
¥io
 !
OS_PRIO_SELF
) {

717 *
≥º
 = 
OS_ERR_PRIO_INVALID
;

721 i‡(
≤ame
 =(
INT8U
 *)0) {

722 *
≥º
 = 
OS_ERR_PNAME_NULL
;

726 i‡(
OSI¡Ne°ög
 > 0) {

727 *
≥º
 = 
OS_ERR_NAME_SET_ISR
;

730 
	`OS_ENTER_CRITICAL
();

731 i‡(
¥io
 =
OS_PRIO_SELF
) {

732 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

734 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

735 i‡(
±cb
 =(
OS_TCB
 *)0) {

736 
	`OS_EXIT_CRITICAL
();

737 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

740 i‡(
±cb
 =
OS_TCB_RESERVED
) {

741 
	`OS_EXIT_CRITICAL
();

742 *
≥º
 = 
OS_ERR_TASK_NOT_EXIST
;

745 
Àn
 = 
	`OS_SåLí
(
≤ame
);

746 i‡(
Àn
 > (
OS_TASK_NAME_SIZE
 - 1)) {

747 
	`OS_EXIT_CRITICAL
();

748 *
≥º
 = 
OS_ERR_TASK_NAME_TOO_LONG
;

751 ()
	`OS_SåC›y
(
±cb
->
OSTCBTaskName
, 
≤ame
);

752 
	`OS_EXIT_CRITICAL
();

753 *
≥º
 = 
OS_ERR_NONE
;

754 
	}
}

776 #i‡
OS_TASK_SUSPEND_EN
 > 0

777 
INT8U
 
	$OSTaskResume
 (
INT8U
 
¥io
)

779 
OS_TCB
 *
±cb
;

780 #i‡
OS_CRITICAL_METHOD
 == 3

781 
OS_CPU_SR
 
˝u_§
 = 0;

786 #i‡
OS_ARG_CHK_EN
 > 0

787 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

788  (
OS_ERR_PRIO_INVALID
);

791 
	`OS_ENTER_CRITICAL
();

792 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

793 i‡(
±cb
 =(
OS_TCB
 *)0) {

794 
	`OS_EXIT_CRITICAL
();

795  (
OS_ERR_TASK_RESUME_PRIO
);

797 i‡(
±cb
 =
OS_TCB_RESERVED
) {

798 
	`OS_EXIT_CRITICAL
();

799  (
OS_ERR_TASK_NOT_EXIST
);

801 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë!
OS_STAT_RDY
) {

802 
±cb
->
OSTCBSèt
 &~(
INT8U
)
OS_STAT_SUSPEND
;

803 i‡(
±cb
->
OSTCBSèt
 =
OS_STAT_RDY
) {

804 i‡(
±cb
->
OSTCBDly
 == 0) {

805 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

806 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

807 
	`OS_EXIT_CRITICAL
();

808 i‡(
OSRu¬ög
 =
OS_TRUE
) {

809 
	`OS_Sched
();

812 
	`OS_EXIT_CRITICAL
();

815 
	`OS_EXIT_CRITICAL
();

817  (
OS_ERR_NONE
);

819 
	`OS_EXIT_CRITICAL
();

820  (
OS_ERR_TASK_NOT_SUSPENDED
);

821 
	}
}

843 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

844 
INT8U
 
	$OSTaskStkChk
 (
INT8U
 
¥io
, 
OS_STK_DATA
 *
p_°k_d©a
)

846 
OS_TCB
 *
±cb
;

847 
OS_STK
 *
pchk
;

848 
INT32U
 
‰ì
;

849 
INT32U
 
size
;

850 #i‡
OS_CRITICAL_METHOD
 == 3

851 
OS_CPU_SR
 
˝u_§
 = 0;

856 #i‡
OS_ARG_CHK_EN
 > 0

857 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

858 i‡(
¥io
 !
OS_PRIO_SELF
) {

859  (
OS_ERR_PRIO_INVALID
);

862 i‡(
p_°k_d©a
 =(
OS_STK_DATA
 *)0) {

863  (
OS_ERR_PDATA_NULL
);

866 
p_°k_d©a
->
OSFªe
 = 0;

867 
p_°k_d©a
->
OSU£d
 = 0;

868 
	`OS_ENTER_CRITICAL
();

869 i‡(
¥io
 =
OS_PRIO_SELF
) {

870 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

872 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

873 i‡(
±cb
 =(
OS_TCB
 *)0) {

874 
	`OS_EXIT_CRITICAL
();

875  (
OS_ERR_TASK_NOT_EXIST
);

877 i‡(
±cb
 =
OS_TCB_RESERVED
) {

878 
	`OS_EXIT_CRITICAL
();

879  (
OS_ERR_TASK_NOT_EXIST
);

881 i‡((
±cb
->
OSTCBO±
 & 
OS_TASK_OPT_STK_CHK
) == 0) {

882 
	`OS_EXIT_CRITICAL
();

883  (
OS_ERR_TASK_OPT
);

885 
‰ì
 = 0;

886 
size
 = 
±cb
->
OSTCBStkSize
;

887 
pchk
 = 
±cb
->
OSTCBStkBŸtom
;

888 
	`OS_EXIT_CRITICAL
();

889 #i‡
OS_STK_GROWTH
 == 1

890 *
pchk
++ =(
OS_STK
)0) {

891 
‰ì
++;

894 *
pchk
-- =(
OS_STK
)0) {

895 
‰ì
++;

898 
p_°k_d©a
->
OSFªe
 = 
‰ì
 * (
OS_STK
);

899 
p_°k_d©a
->
OSU£d
 = (
size
 - 
‰ì
Ë* (
OS_STK
);

900  (
OS_ERR_NONE
);

901 
	}
}

927 #i‡
OS_TASK_SUSPEND_EN
 > 0

928 
INT8U
 
	$OSTaskSu•íd
(
INT8U
 
¥io
)

930 
BOOLEAN
 
£lf
;

931 
OS_TCB
 *
±cb
;

932 
INT8U
 
y
;

933 #i‡
OS_CRITICAL_METHOD
 == 3

934 
OS_CPU_SR
 
˝u_§
 = 0;

939 #i‡
OS_ARG_CHK_EN
 > 0

940 i‡(
¥io
 =
OS_TASK_IDLE_PRIO
) {

941  (
OS_ERR_TASK_SUSPEND_IDLE
);

943 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

944 i‡(
¥io
 !
OS_PRIO_SELF
) {

945  (
OS_ERR_PRIO_INVALID
);

949 
	`OS_ENTER_CRITICAL
();

950 i‡(
¥io
 =
OS_PRIO_SELF
) {

951 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

952 
£lf
 = 
OS_TRUE
;

953 } i‡(
¥io
 =
OSTCBCur
->
OSTCBPrio
) {

954 
£lf
 = 
OS_TRUE
;

956 
£lf
 = 
OS_FALSE
;

958 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

959 i‡(
±cb
 =(
OS_TCB
 *)0) {

960 
	`OS_EXIT_CRITICAL
();

961  (
OS_ERR_TASK_SUSPEND_PRIO
);

963 i‡(
±cb
 =
OS_TCB_RESERVED
) {

964 
	`OS_EXIT_CRITICAL
();

965  (
OS_ERR_TASK_NOT_EXIST
);

967 
y
 = 
±cb
->
OSTCBY
;

968 
OSRdyTbl
[
y
] &~
±cb
->
OSTCBBôX
;

969 i‡(
OSRdyTbl
[
y
] == 0) {

970 
OSRdyGΩ
 &~
±cb
->
OSTCBBôY
;

972 
±cb
->
OSTCBSèt
 |
OS_STAT_SUSPEND
;

973 
	`OS_EXIT_CRITICAL
();

974 i‡(
£lf
 =
OS_TRUE
) {

975 
	`OS_Sched
();

977  (
OS_ERR_NONE
);

978 
	}
}

1000 #i‡
OS_TASK_QUERY_EN
 > 0

1001 
INT8U
 
	$OSTaskQuîy
 (
INT8U
 
¥io
, 
OS_TCB
 *
p_èsk_d©a
)

1003 
OS_TCB
 *
±cb
;

1004 #i‡
OS_CRITICAL_METHOD
 == 3

1005 
OS_CPU_SR
 
˝u_§
 = 0;

1010 #i‡
OS_ARG_CHK_EN
 > 0

1011 i‡(
¥io
 > 
OS_LOWEST_PRIO
) {

1012 i‡(
¥io
 !
OS_PRIO_SELF
) {

1013  (
OS_ERR_PRIO_INVALID
);

1016 i‡(
p_èsk_d©a
 =(
OS_TCB
 *)0) {

1017  (
OS_ERR_PDATA_NULL
);

1020 
	`OS_ENTER_CRITICAL
();

1021 i‡(
¥io
 =
OS_PRIO_SELF
) {

1022 
¥io
 = 
OSTCBCur
->
OSTCBPrio
;

1024 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

1025 i‡(
±cb
 =(
OS_TCB
 *)0) {

1026 
	`OS_EXIT_CRITICAL
();

1027  (
OS_ERR_PRIO
);

1029 i‡(
±cb
 =
OS_TCB_RESERVED
) {

1030 
	`OS_EXIT_CRITICAL
();

1031  (
OS_ERR_TASK_NOT_EXIST
);

1034 
	`OS_MemC›y
((
INT8U
 *)
p_èsk_d©a
, (INT8U *)
±cb
, (
OS_TCB
));

1035 
	`OS_EXIT_CRITICAL
();

1036  (
OS_ERR_NONE
);

1037 
	}
}

1062 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1063 
	$OS_TaskStkCÃ
 (
OS_STK
 *
pbos
, 
INT32U
 
size
, 
INT16U
 
›t
)

1065 i‡((
›t
 & 
OS_TASK_OPT_STK_CHK
) != 0x0000) {

1066 i‡((
›t
 & 
OS_TASK_OPT_STK_CLR
) != 0x0000) {

1067 #i‡
OS_STK_GROWTH
 == 1

1068 
size
 > 0) {

1069 
size
--;

1070 *
pbos
++ = (
OS_STK
)0;

1073 
size
 > 0) {

1074 
size
--;

1075 *
pbos
-- = (
OS_STK
)0;

1080 
	}
}

	@uCOS-II/Source/os_time.c

24 #i‚de‡ 
OS_MASTER_FILE


26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

45 
	$OSTimeDly
 (
INT16U
 
ticks
)

47 
INT8U
 
y
;

48 #i‡
OS_CRITICAL_METHOD
 == 3

49 
OS_CPU_SR
 
˝u_§
 = 0;

54 i‡(
OSI¡Ne°ög
 > 0) {

57 i‡(
ticks
 > 0) {

58 
	`OS_ENTER_CRITICAL
();

59 
y
 = 
OSTCBCur
->
OSTCBY
;

60 
OSRdyTbl
[
y
] &~
OSTCBCur
->
OSTCBBôX
;

61 i‡(
OSRdyTbl
[
y
] == 0) {

62 
OSRdyGΩ
 &~
OSTCBCur
->
OSTCBBôY
;

64 
OSTCBCur
->
OSTCBDly
 = 
ticks
;

65 
	`OS_EXIT_CRITICAL
();

66 
	`OS_Sched
();

68 
	}
}

96 #i‡
OS_TIME_DLY_HMSM_EN
 > 0

97 
INT8U
 
	$OSTimeDlyHMSM
 (
INT8U
 
hours
, INT8U 
möuãs
, INT8U 
£c⁄ds
, 
INT16U
 
ms
)

99 
INT32U
 
ticks
;

100 
INT16U
 
lo›s
;

103 i‡(
OSI¡Ne°ög
 > 0) {

104  (
OS_ERR_TIME_DLY_ISR
);

106 #i‡
OS_ARG_CHK_EN
 > 0

107 i‡(
hours
 == 0) {

108 i‡(
möuãs
 == 0) {

109 i‡(
£c⁄ds
 == 0) {

110 i‡(
ms
 == 0) {

111  (
OS_ERR_TIME_ZERO_DLY
);

116 i‡(
möuãs
 > 59) {

117  (
OS_ERR_TIME_INVALID_MINUTES
);

119 i‡(
£c⁄ds
 > 59) {

120  (
OS_ERR_TIME_INVALID_SECONDS
);

122 i‡(
ms
 > 999) {

123  (
OS_ERR_TIME_INVALID_MS
);

128 
ticks
 = ((
INT32U
)
hours
 * 3600L + (INT32U)
möuãs
 * 60L + (INT32U)
£c⁄ds
Ë* 
OS_TICKS_PER_SEC


129 + 
OS_TICKS_PER_SEC
 * ((
INT32U
)
ms
 + 500L / OS_TICKS_PER_SEC) / 1000L;

130 
lo›s
 = (
INT16U
)(
ticks
 >> 16);

131 
ticks
 =Åicks & 0xFFFFL;

132 
	`OSTimeDly
((
INT16U
)
ticks
);

133 
lo›s
 > 0) {

134 
	`OSTimeDly
((
INT16U
)32768u);

135 
	`OSTimeDly
((
INT16U
)32768u);

136 
lo›s
--;

138  (
OS_ERR_NONE
);

139 
	}
}

167 #i‡
OS_TIME_DLY_RESUME_EN
 > 0

168 
INT8U
 
	$OSTimeDlyResume
 (
INT8U
 
¥io
)

170 
OS_TCB
 *
±cb
;

171 #i‡
OS_CRITICAL_METHOD
 == 3

172 
OS_CPU_SR
 
˝u_§
 = 0;

177 i‡(
¥io
 >
OS_LOWEST_PRIO
) {

178  (
OS_ERR_PRIO_INVALID
);

180 
	`OS_ENTER_CRITICAL
();

181 
±cb
 = 
OSTCBPrioTbl
[
¥io
];

182 i‡(
±cb
 =(
OS_TCB
 *)0) {

183 
	`OS_EXIT_CRITICAL
();

184  (
OS_ERR_TASK_NOT_EXIST
);

186 i‡(
±cb
 =
OS_TCB_RESERVED
) {

187 
	`OS_EXIT_CRITICAL
();

188  (
OS_ERR_TASK_NOT_EXIST
);

190 i‡(
±cb
->
OSTCBDly
 == 0) {

191 
	`OS_EXIT_CRITICAL
();

192  (
OS_ERR_TIME_NOT_DLY
);

195 
±cb
->
OSTCBDly
 = 0;

196 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_PEND_ANY
Ë!
OS_STAT_RDY
) {

197 
±cb
->
OSTCBSèt
 &~
OS_STAT_PEND_ANY
;

198 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_TO
;

200 
±cb
->
OSTCBSètPíd
 = 
OS_STAT_PEND_OK
;

202 i‡((
±cb
->
OSTCBSèt
 & 
OS_STAT_SUSPEND
Ë=
OS_STAT_RDY
) {

203 
OSRdyGΩ
 |
±cb
->
OSTCBBôY
;

204 
OSRdyTbl
[
±cb
->
OSTCBY
] |±cb->
OSTCBBôX
;

205 
	`OS_EXIT_CRITICAL
();

206 
	`OS_Sched
();

208 
	`OS_EXIT_CRITICAL
();

210  (
OS_ERR_NONE
);

211 
	}
}

227 #i‡
OS_TIME_GET_SET_EN
 > 0

228 
INT32U
 
	$OSTimeGë
 ()

230 
INT32U
 
ticks
;

231 #i‡
OS_CRITICAL_METHOD
 == 3

232 
OS_CPU_SR
 
˝u_§
 = 0;

237 
	`OS_ENTER_CRITICAL
();

238 
ticks
 = 
OSTime
;

239 
	`OS_EXIT_CRITICAL
();

240  (
ticks
);

241 
	}
}

256 #i‡
OS_TIME_GET_SET_EN
 > 0

257 
	$OSTimeSë
 (
INT32U
 
ticks
)

259 #i‡
OS_CRITICAL_METHOD
 == 3

260 
OS_CPU_SR
 
˝u_§
 = 0;

265 
	`OS_ENTER_CRITICAL
();

266 
OSTime
 = 
ticks
;

267 
	`OS_EXIT_CRITICAL
();

268 
	}
}

	@uCOS-II/Source/os_tmr.c

26 
	~"..\..\uCOS-II\Sour˚\ucos_ii.h
"

47 
	#OS_TMR_LINK_DLY
 0

	)

48 
	#OS_TMR_LINK_PERIODIC
 1

	)

56 #i‡
OS_TMR_EN
 > 0

57 
OS_TMR
 *
OSTmr_AŒoc
 ();

58 
OSTmr_Fªe
 (
OS_TMR
 *
±mr
);

59 
OSTmr_InôTask
 ();

60 
OSTmr_Lök
 (
OS_TMR
 *
±mr
, 
INT8U
 
ty≥
);

61 
OSTmr_U∆ök
 (
OS_TMR
 *
±mr
);

62 
OSTmr_Lock
 ();

63 
OSTmr_U∆ock
 ();

64 
OSTmr_Task
 (*
p_¨g
);

113 #i‡
OS_TMR_EN
 > 0

114 
OS_TMR
 *
	$OSTmrCª©e
 (
INT32U
 
dly
,

115 
INT32U
 
≥riod
,

116 
INT8U
 
›t
,

117 
OS_TMR_CALLBACK
 
ˇŒback
,

118 *
ˇŒback_¨g
,

119 
INT8U
 *
≤ame
,

120 
INT8U
 *
≥º
)

122 
OS_TMR
 *
±mr
;

123 #i‡
OS_TMR_CFG_NAME_SIZE
 > 0

124 
INT8U
 
Àn
;

128 #i‡
OS_ARG_CHK_EN
 > 0

129 i‡(
≥º
 =(
INT8U
 *)0) {

130  ((
OS_TMR
 *)0);

132 
›t
) {

133 
OS_TMR_OPT_PERIODIC
:

134 i‡(
≥riod
 == 0) {

135 *
≥º
 = 
OS_ERR_TMR_INVALID_PERIOD
;

136  ((
OS_TMR
 *)0);

140 
OS_TMR_OPT_ONE_SHOT
:

141 i‡(
dly
 == 0) {

142 *
≥º
 = 
OS_ERR_TMR_INVALID_DLY
;

143  ((
OS_TMR
 *)0);

148 *
≥º
 = 
OS_ERR_TMR_INVALID_OPT
;

149  ((
OS_TMR
 *)0);

152 i‡(
OSI¡Ne°ög
 > 0) {

153 *
≥º
 = 
OS_ERR_TMR_ISR
;

154  ((
OS_TMR
 *)0);

156 
	`OSTmr_Lock
();

157 
±mr
 = 
	`OSTmr_AŒoc
();

158 i‡(
±mr
 =(
OS_TMR
 *)0) {

159 
	`OSTmr_U∆ock
();

160 *
≥º
 = 
OS_ERR_TMR_NON_AVAIL
;

161  ((
OS_TMR
 *)0);

163 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_STOPPED
;

164 
±mr
->
OSTmrDly
 = 
dly
;

165 
±mr
->
OSTmrPîiod
 = 
≥riod
;

166 
±mr
->
OSTmrO±
 = 
›t
;

167 
±mr
->
OSTmrCÆlback
 = 
ˇŒback
;

168 
±mr
->
OSTmrCÆlbackArg
 = 
ˇŒback_¨g
;

169 #i‡
OS_TMR_CFG_NAME_SIZE
 > 0

170 i‡(
≤ame
 !=(
INT8U
 *)0) {

171 
Àn
 = 
	`OS_SåLí
(
≤ame
);

172 i‡(
Àn
 < 
OS_TMR_CFG_NAME_SIZE
) {

173 ()
	`OS_SåC›y
(
±mr
->
OSTmrName
, 
≤ame
);

175 #i‡
OS_TMR_CFG_NAME_SIZE
 > 1

176 
±mr
->
OSTmrName
[0] = '#';

177 
±mr
->
OSTmrName
[1] = 
OS_ASCII_NUL
;

179 *
≥º
 = 
OS_ERR_TMR_NAME_TOO_LONG
;

180 
	`OSTmr_U∆ock
();

181  (
±mr
);

185 
	`OSTmr_U∆ock
();

186 *
≥º
 = 
OS_ERR_NONE
;

187  (
±mr
);

188 
	}
}

213 #i‡
OS_TMR_EN
 > 0

214 
BOOLEAN
 
	$OSTmrDñ
 (
OS_TMR
 *
±mr
,

215 
INT8U
 *
≥º
)

217 #i‡
OS_ARG_CHK_EN
 > 0

218 i‡(
≥º
 =(
INT8U
 *)0) {

219  (
OS_FALSE
);

221 i‡(
±mr
 =(
OS_TMR
 *)0) {

222 *
≥º
 = 
OS_ERR_TMR_INVALID
;

223  (
OS_FALSE
);

226 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

227 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

228  (
OS_FALSE
);

230 i‡(
OSI¡Ne°ög
 > 0) {

231 *
≥º
 = 
OS_ERR_TMR_ISR
;

232  (
OS_FALSE
);

234 
	`OSTmr_Lock
();

235 
±mr
->
OSTmrSèã
) {

236 
OS_TMR_STATE_RUNNING
:

237 
	`OSTmr_U∆ök
(
±mr
);

238 
	`OSTmr_Fªe
(
±mr
);

239 
	`OSTmr_U∆ock
();

240 *
≥º
 = 
OS_ERR_NONE
;

241  (
OS_TRUE
);

243 
OS_TMR_STATE_STOPPED
:

244 
OS_TMR_STATE_COMPLETED
:

245 
	`OSTmr_Fªe
(
±mr
);

246 
	`OSTmr_U∆ock
();

247 *
≥º
 = 
OS_ERR_NONE
;

248  (
OS_TRUE
);

250 
OS_TMR_STATE_UNUSED
:

251 
	`OSTmr_U∆ock
();

252 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

253  (
OS_FALSE
);

256 
	`OSTmr_U∆ock
();

257 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

258  (
OS_FALSE
);

260 
	}
}

288 #i‡
OS_TMR_EN
 > 0 && 
OS_TMR_CFG_NAME_SIZE
 > 0

289 
INT8U
 
	$OSTmrNameGë
 (
OS_TMR
 *
±mr
,

290 
INT8U
 *
pde°
,

291 
INT8U
 *
≥º
)

293 
INT8U
 
Àn
;

296 #i‡
OS_ARG_CHK_EN
 > 0

297 i‡(
≥º
 =(
INT8U
 *)0) {

300 i‡(
pde°
 =(
INT8U
 *)0) {

301 *
≥º
 = 
OS_ERR_TMR_INVALID_DEST
;

304 i‡(
±mr
 =(
OS_TMR
 *)0) {

305 *
≥º
 = 
OS_ERR_TMR_INVALID
;

309 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

310 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

313 i‡(
OSI¡Ne°ög
 > 0) {

314 *
≥º
 = 
OS_ERR_NAME_GET_ISR
;

317 
	`OSTmr_Lock
();

318 
±mr
->
OSTmrSèã
) {

319 
OS_TMR_STATE_RUNNING
:

320 
OS_TMR_STATE_STOPPED
:

321 
OS_TMR_STATE_COMPLETED
:

322 
Àn
 = 
	`OS_SåC›y
(
pde°
, 
±mr
->
OSTmrName
);

323 
	`OSTmr_U∆ock
();

324 *
≥º
 = 
OS_ERR_NONE
;

325  (
Àn
);

327 
OS_TMR_STATE_UNUSED
:

328 
	`OSTmr_U∆ock
();

329 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

333 
	`OSTmr_U∆ock
();

334 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

337 
	}
}

363 #i‡
OS_TMR_EN
 > 0

364 
INT32U
 
	$OSTmrRemaöGë
 (
OS_TMR
 *
±mr
,

365 
INT8U
 *
≥º
)

367 
INT32U
 
ªmaö
;

370 #i‡
OS_ARG_CHK_EN
 > 0

371 i‡(
≥º
 =(
INT8U
 *)0) {

374 i‡(
±mr
 =(
OS_TMR
 *)0) {

375 *
≥º
 = 
OS_ERR_TMR_INVALID
;

379 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

380 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

383 i‡(
OSI¡Ne°ög
 > 0) {

384 *
≥º
 = 
OS_ERR_TMR_ISR
;

387 
	`OSTmr_Lock
();

388 
±mr
->
OSTmrSèã
) {

389 
OS_TMR_STATE_RUNNING
:

390 
ªmaö
 = 
±mr
->
OSTmrM©ch
 - 
OSTmrTime
;

391 
	`OSTmr_U∆ock
();

392 *
≥º
 = 
OS_ERR_NONE
;

393  (
ªmaö
);

395 
OS_TMR_STATE_STOPPED
:

396 
±mr
->
OSTmrO±
) {

397 
OS_TMR_OPT_PERIODIC
:

398 i‡(
±mr
->
OSTmrDly
 == 0) {

399 
ªmaö
 = 
±mr
->
OSTmrPîiod
;

401 
ªmaö
 = 
±mr
->
OSTmrDly
;

403 
	`OSTmr_U∆ock
();

404 *
≥º
 = 
OS_ERR_NONE
;

407 
OS_TMR_OPT_ONE_SHOT
:

409 
ªmaö
 = 
±mr
->
OSTmrDly
;

410 
	`OSTmr_U∆ock
();

411 *
≥º
 = 
OS_ERR_NONE
;

414  (
ªmaö
);

416 
OS_TMR_STATE_COMPLETED
:

417 
	`OSTmr_U∆ock
();

418 *
≥º
 = 
OS_ERR_NONE
;

421 
OS_TMR_STATE_UNUSED
:

422 
	`OSTmr_U∆ock
();

423 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

427 
	`OSTmr_U∆ock
();

428 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

431 
	}
}

460 #i‡
OS_TMR_EN
 > 0

461 
INT8U
 
	$OSTmrSèãGë
 (
OS_TMR
 *
±mr
,

462 
INT8U
 *
≥º
)

464 
INT8U
 
°©e
;

467 #i‡
OS_ARG_CHK_EN
 > 0

468 i‡(
≥º
 =(
INT8U
 *)0) {

471 i‡(
±mr
 =(
OS_TMR
 *)0) {

472 *
≥º
 = 
OS_ERR_TMR_INVALID
;

476 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

477 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

480 i‡(
OSI¡Ne°ög
 > 0) {

481 *
≥º
 = 
OS_ERR_TMR_ISR
;

484 
	`OSTmr_Lock
();

485 
°©e
 = 
±mr
->
OSTmrSèã
;

486 
°©e
) {

487 
OS_TMR_STATE_UNUSED
:

488 
OS_TMR_STATE_STOPPED
:

489 
OS_TMR_STATE_COMPLETED
:

490 
OS_TMR_STATE_RUNNING
:

491 *
≥º
 = 
OS_ERR_NONE
;

495 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

498 
	`OSTmr_U∆ock
();

499  (
°©e
);

500 
	}
}

525 #i‡
OS_TMR_EN
 > 0

526 
BOOLEAN
 
	$OSTmrSèπ
 (
OS_TMR
 *
±mr
,

527 
INT8U
 *
≥º
)

529 #i‡
OS_ARG_CHK_EN
 > 0

530 i‡(
≥º
 =(
INT8U
 *)0) {

531  (
OS_FALSE
);

533 i‡(
±mr
 =(
OS_TMR
 *)0) {

534 *
≥º
 = 
OS_ERR_TMR_INVALID
;

535  (
OS_FALSE
);

538 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

539 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

540  (
OS_FALSE
);

542 i‡(
OSI¡Ne°ög
 > 0) {

543 *
≥º
 = 
OS_ERR_TMR_ISR
;

544  (
OS_FALSE
);

546 
	`OSTmr_Lock
();

547 
±mr
->
OSTmrSèã
) {

548 
OS_TMR_STATE_RUNNING
:

549 
	`OSTmr_U∆ök
(
±mr
);

550 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_DLY
);

551 
	`OSTmr_U∆ock
();

552 *
≥º
 = 
OS_ERR_NONE
;

553  (
OS_TRUE
);

555 
OS_TMR_STATE_STOPPED
:

556 
OS_TMR_STATE_COMPLETED
:

557 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_DLY
);

558 
	`OSTmr_U∆ock
();

559 *
≥º
 = 
OS_ERR_NONE
;

560  (
OS_TRUE
);

562 
OS_TMR_STATE_UNUSED
:

563 
	`OSTmr_U∆ock
();

564 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

565  (
OS_FALSE
);

568 
	`OSTmr_U∆ock
();

569 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

570  (
OS_FALSE
);

572 
	}
}

612 #i‡
OS_TMR_EN
 > 0

613 
BOOLEAN
 
	$OSTmrSt›
 (
OS_TMR
 *
±mr
,

614 
INT8U
 
›t
,

615 *
ˇŒback_¨g
,

616 
INT8U
 *
≥º
)

618 
OS_TMR_CALLBACK
 
p‚˘
;

621 #i‡
OS_ARG_CHK_EN
 > 0

622 i‡(
≥º
 =(
INT8U
 *)0) {

623  (
OS_FALSE
);

625 i‡(
±mr
 =(
OS_TMR
 *)0) {

626 *
≥º
 = 
OS_ERR_TMR_INVALID
;

627  (
OS_FALSE
);

630 i‡(
±mr
->
OSTmrTy≥
 !
OS_TMR_TYPE
) {

631 *
≥º
 = 
OS_ERR_TMR_INVALID_TYPE
;

632  (
OS_FALSE
);

634 i‡(
OSI¡Ne°ög
 > 0) {

635 *
≥º
 = 
OS_ERR_TMR_ISR
;

636  (
OS_FALSE
);

638 
	`OSTmr_Lock
();

639 
±mr
->
OSTmrSèã
) {

640 
OS_TMR_STATE_RUNNING
:

641 
	`OSTmr_U∆ök
(
±mr
);

642 *
≥º
 = 
OS_ERR_NONE
;

643 
›t
) {

644 
OS_TMR_OPT_CALLBACK
:

645 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

646 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

647 (*
p‚˘
)((*)
±mr
,Ötmr->
OSTmrCÆlbackArg
);

649 *
≥º
 = 
OS_ERR_TMR_NO_CALLBACK
;

653 
OS_TMR_OPT_CALLBACK_ARG
:

654 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

655 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

656 (*
p‚˘
)((*)
±mr
, 
ˇŒback_¨g
);

658 *
≥º
 = 
OS_ERR_TMR_NO_CALLBACK
;

662 
OS_TMR_OPT_NONE
:

666 *
≥º
 = 
OS_ERR_TMR_INVALID_OPT
;

669 
	`OSTmr_U∆ock
();

670  (
OS_TRUE
);

672 
OS_TMR_STATE_COMPLETED
:

673 
OS_TMR_STATE_STOPPED
:

674 
	`OSTmr_U∆ock
();

675 *
≥º
 = 
OS_ERR_TMR_STOPPED
;

676  (
OS_TRUE
);

678 
OS_TMR_STATE_UNUSED
:

679 
	`OSTmr_U∆ock
();

680 *
≥º
 = 
OS_ERR_TMR_INACTIVE
;

681  (
OS_FALSE
);

684 
	`OSTmr_U∆ock
();

685 *
≥º
 = 
OS_ERR_TMR_INVALID_STATE
;

686  (
OS_FALSE
);

688 
	}
}

711 #i‡
OS_TMR_EN
 > 0

712 
INT8U
 
	$OSTmrSig«l
 ()

714 
INT8U
 
îr
;

717 
îr
 = 
	`OSSemPo°
(
OSTmrSemSig«l
);

718  (
îr
);

719 
	}
}

735 #i‡
OS_TMR_EN
 > 0

736 
OS_TMR
 *
	$OSTmr_AŒoc
 ()

738 
OS_TMR
 *
±mr
;

741 i‡(
OSTmrFªeLi°
 =(
OS_TMR
 *)0) {

742  ((
OS_TMR
 *)0);

744 
±mr
 = (
OS_TMR
 *)
OSTmrFªeLi°
;

745 
OSTmrFªeLi°
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

746 
±mr
->
OSTmrNext
 = (
OS_TCB
 *)0;

747 
±mr
->
OSTmrPªv
 = (
OS_TCB
 *)0;

748 
OSTmrU£d
++;

749 
OSTmrFªe
--;

750  (
±mr
);

751 
	}
}

767 #i‡
OS_TMR_EN
 > 0

768 
	$OSTmr_Fªe
 (
OS_TMR
 *
±mr
)

770 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

771 
±mr
->
OSTmrO±
 = 
OS_TMR_OPT_NONE
;

772 
±mr
->
OSTmrPîiod
 = 0;

773 
±mr
->
OSTmrM©ch
 = 0;

774 
±mr
->
OSTmrCÆlback
 = (
OS_TMR_CALLBACK
)0;

775 
±mr
->
OSTmrCÆlbackArg
 = (*)0;

776 #i‡
OS_TMR_CFG_NAME_SIZE
 > 1

777 
±mr
->
OSTmrName
[0] = '?';

778 
±mr
->
OSTmrName
[1] = 
OS_ASCII_NUL
;

781 
±mr
->
OSTmrPªv
 = (
OS_TCB
 *)0;

782 
±mr
->
OSTmrNext
 = 
OSTmrFªeLi°
;

783 
OSTmrFªeLi°
 = 
±mr
;

785 
OSTmrU£d
--;

786 
OSTmrFªe
++;

787 
	}
}

804 #i‡
OS_TMR_EN
 > 0

805 
	$OSTmr_Inô
 ()

807 #i‡
OS_EVENT_NAME_SIZE
 > 10

808 
INT8U
 
îr
;

810 
INT16U
 
i
;

811 
OS_TMR
 *
±mr1
;

812 
OS_TMR
 *
±mr2
;

815 
	`OS_MemCÃ
((
INT8U
 *)&
OSTmrTbl
[0], (OSTmrTbl));

816 
	`OS_MemCÃ
((
INT8U
 *)&
OSTmrWhìlTbl
[0], (OSTmrWheelTbl));

818 
±mr1
 = &
OSTmrTbl
[0];

819 
±mr2
 = &
OSTmrTbl
[1];

820 
i
 = 0; i < (
OS_TMR_CFG_MAX
 - 1); i++) {

821 
±mr1
->
OSTmrTy≥
 = 
OS_TMR_TYPE
;

822 
±mr1
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

823 
±mr1
->
OSTmrNext
 = (*)
±mr2
;

824 #i‡
OS_TMR_CFG_NAME_SIZE
 > 1

825 
±mr1
->
OSTmrName
[0] = '?';

826 
±mr1
->
OSTmrName
[1] = 
OS_ASCII_NUL
;

828 
±mr1
++;

829 
±mr2
++;

831 
±mr1
->
OSTmrTy≥
 = 
OS_TMR_TYPE
;

832 
±mr1
->
OSTmrSèã
 = 
OS_TMR_STATE_UNUSED
;

833 
±mr1
->
OSTmrNext
 = (*)0;

834 #i‡
OS_TMR_CFG_NAME_SIZE
 > 1

835 
±mr1
->
OSTmrName
[0] = '?';

836 
±mr1
->
OSTmrName
[1] = 
OS_ASCII_NUL
;

838 
OSTmrTime
 = 0;

839 
OSTmrU£d
 = 0;

840 
OSTmrFªe
 = 
OS_TMR_CFG_MAX
;

841 
OSTmrFªeLi°
 = &
OSTmrTbl
[0];

842 
OSTmrSem
 = 
	`OSSemCª©e
(1);

843 
OSTmrSemSig«l
 = 
	`OSSemCª©e
(0);

845 #i‡
OS_EVENT_NAME_SIZE
 > 18

846 
	`OSEvítNameSë
(
OSTmrSem
, (
INT8U
 *)"uC/OS-II TmrLock", &
îr
);

848 #i‡
OS_EVENT_NAME_SIZE
 > 10

849 
	`OSEvítNameSë
(
OSTmrSem
, (
INT8U
 *)"OS-TmrLock", &
îr
);

853 #i‡
OS_EVENT_NAME_SIZE
 > 18

854 
	`OSEvítNameSë
(
OSTmrSemSig«l
, (
INT8U
 *)"uC/OS-II TmrSig«l", &
îr
);

856 #i‡
OS_EVENT_NAME_SIZE
 > 10

857 
	`OSEvítNameSë
(
OSTmrSemSig«l
, (
INT8U
 *)"OS-TmrSig", &
îr
);

861 
	`OSTmr_InôTask
();

862 
	}
}

878 #i‡
OS_TMR_EN
 > 0

879 
	$OSTmr_InôTask
 ()

881 #i‡
OS_TASK_NAME_SIZE
 > 6

882 
INT8U
 
îr
;

886 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

887 #i‡
OS_STK_GROWTH
 == 1

888 ()
	`OSTaskCª©eExt
(
OSTmr_Task
,

890 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1],

891 
OS_TASK_TMR_PRIO
,

892 
OS_TASK_TMR_ID
,

893 &
OSTmrTaskStk
[0],

894 
OS_TASK_TMR_STK_SIZE
,

896 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

898 ()
	`OSTaskCª©eExt
(
OSTmr_Task
,

900 &
OSTmrTaskStk
[0],

901 
OS_TASK_TMR_PRIO
,

902 
OS_TASK_TMR_ID
,

903 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1],

904 
OS_TASK_TMR_STK_SIZE
,

906 
OS_TASK_OPT_STK_CHK
 | 
OS_TASK_OPT_STK_CLR
);

909 #i‡
OS_STK_GROWTH
 == 1

910 ()
	`OSTaskCª©e
(
OSTmr_Task
,

912 &
OSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
 - 1],

913 
OS_TASK_TMR_PRIO
);

915 ()
	`OSTaskCª©e
(
OSTmr_Task
,

917 &
OSTmrTaskStk
[0],

918 
OS_TASK_TMR_PRIO
);

922 #i‡
OS_TASK_NAME_SIZE
 > 12

923 
	`OSTaskNameSë
(
OS_TASK_TMR_PRIO
, (
INT8U
 *)"uC/OS-II Tmr", &
îr
);

925 #i‡
OS_TASK_NAME_SIZE
 > 6

926 
	`OSTaskNameSë
(
OS_TASK_TMR_PRIO
, (
INT8U
 *)"OS-Tmr", &
îr
);

929 
	}
}

950 #i‡
OS_TMR_EN
 > 0

951 
	$OSTmr_Lök
 (
OS_TMR
 *
±mr
, 
INT8U
 
ty≥
)

953 
OS_TMR
 *
±mr1
;

954 
OS_TMR_WHEEL
 *
p•oke
;

955 
INT16U
 
•oke
;

958 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_RUNNING
;

959 i‡(
ty≥
 =
OS_TMR_LINK_PERIODIC
) {

960 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrPîiod
 + 
OSTmrTime
;

962 i‡(
±mr
->
OSTmrDly
 == 0) {

963 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrPîiod
 + 
OSTmrTime
;

965 
±mr
->
OSTmrM©ch
 =Ötmr->
OSTmrDly
 + 
OSTmrTime
;

968 
•oke
 = (
INT16U
)(
±mr
->
OSTmrM©ch
 % 
OS_TMR_CFG_WHEEL_SIZE
);

969 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

971 i‡(
p•oke
->
OSTmrFú°
 =(
OS_TMR
 *)0) {

972 
p•oke
->
OSTmrFú°
 = 
±mr
;

973 
±mr
->
OSTmrNext
 = (
OS_TMR
 *)0;

974 
p•oke
->
OSTmrE¡rõs
 = 1;

976 
±mr1
 = 
p•oke
->
OSTmrFú°
;

977 
p•oke
->
OSTmrFú°
 = 
±mr
;

978 
±mr
->
OSTmrNext
 = (*)
±mr1
;

979 
±mr1
->
OSTmrPªv
 = (*)
±mr
;

980 
p•oke
->
OSTmrE¡rõs
++;

982 
±mr
->
OSTmrPªv
 = (*)0;

983 
	}
}

999 #i‡
OS_TMR_EN
 > 0

1000 
	$OSTmr_U∆ök
 (
OS_TMR
 *
±mr
)

1002 
OS_TMR
 *
±mr1
;

1003 
OS_TMR
 *
±mr2
;

1004 
OS_TMR_WHEEL
 *
p•oke
;

1005 
INT16U
 
•oke
;

1008 
•oke
 = (
INT16U
)(
±mr
->
OSTmrM©ch
 % 
OS_TMR_CFG_WHEEL_SIZE
);

1009 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

1011 i‡(
p•oke
->
OSTmrFú°
 =
±mr
) {

1012 
±mr1
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1013 
p•oke
->
OSTmrFú°
 = (*)
±mr1
;

1014 i‡(
±mr1
 !(
OS_TMR
 *)0) {

1015 
±mr1
->
OSTmrPªv
 = (*)0;

1018 
±mr1
 = (
OS_TMR
 *)
±mr
->
OSTmrPªv
;

1019 
±mr2
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1020 
±mr1
->
OSTmrNext
 = 
±mr2
;

1021 i‡(
±mr2
 !(
OS_TMR
 *)0) {

1022 
±mr2
->
OSTmrPªv
 = (*)
±mr1
;

1025 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_STOPPED
;

1026 
±mr
->
OSTmrNext
 = (*)0;

1027 
±mr
->
OSTmrPªv
 = (*)0;

1028 
p•oke
->
OSTmrE¡rõs
--;

1029 
	}
}

1045 #i‡
OS_TMR_EN
 > 0

1046 
	$OSTmr_Lock
 ()

1048 
INT8U
 
îr
;

1051 
	`OSSemPíd
(
OSTmrSem
, 0, &
îr
);

1052 ()
îr
;

1053 
	}
}

1058 #i‡
OS_TMR_EN
 > 0

1059 
	$OSTmr_U∆ock
 ()

1061 ()
	`OSSemPo°
(
OSTmrSem
);

1062 
	}
}

1078 #i‡
OS_TMR_EN
 > 0

1079 
	$OSTmr_Task
 (*
p_¨g
)

1081 
INT8U
 
îr
;

1082 
OS_TMR
 *
±mr
;

1083 
OS_TMR
 *
±mr_√xt
;

1084 
OS_TMR_CALLBACK
 
p‚˘
;

1085 
OS_TMR_WHEEL
 *
p•oke
;

1086 
INT16U
 
•oke
;

1089 ()
p_¨g
;

1091 
	`OSSemPíd
(
OSTmrSemSig«l
, 0, &
îr
);

1092 
	`OSTmr_Lock
();

1093 
OSTmrTime
++;

1094 
•oke
 = (
INT16U
)(
OSTmrTime
 % 
OS_TMR_CFG_WHEEL_SIZE
);

1095 
p•oke
 = &
OSTmrWhìlTbl
[
•oke
];

1096 
±mr
 = 
p•oke
->
OSTmrFú°
;

1097 
±mr
 !(
OS_TMR
 *)0) {

1098 
±mr_√xt
 = (
OS_TMR
 *)
±mr
->
OSTmrNext
;

1100 i‡(
OSTmrTime
 =
±mr
->
OSTmrM©ch
) {

1101 
p‚˘
 = 
±mr
->
OSTmrCÆlback
;

1102 i‡(
p‚˘
 !(
OS_TMR_CALLBACK
)0) {

1103 (*
p‚˘
)((*)
±mr
,Ötmr->
OSTmrCÆlbackArg
);

1105 
	`OSTmr_U∆ök
(
±mr
);

1106 i‡(
±mr
->
OSTmrO±
 =
OS_TMR_OPT_PERIODIC
) {

1107 
	`OSTmr_Lök
(
±mr
, 
OS_TMR_LINK_PERIODIC
);

1109 
±mr
->
OSTmrSèã
 = 
OS_TMR_STATE_COMPLETED
;

1112 
±mr
 = 
±mr_√xt
;

1114 
	`OSTmr_U∆ock
();

1116 
	}
}

	@uCOS-II/Source/ucos_ii.c

23 
	#OS_GLOBALS


	)

24 
	~<ucos_ii.h
>

27 
	#OS_MASTER_FILE


	)

29 
	~<os_c‹e.c
>

30 
	~<os_Êag.c
>

31 
	~<os_mbox.c
>

32 
	~<os_mem.c
>

33 
	~<os_muãx.c
>

34 
	~<os_q.c
>

35 
	~<os_£m.c
>

36 
	~<os_èsk.c
>

37 
	~<os_time.c
>

38 
	~<os_tmr.c
>

	@uCOS-II/Source/ucos_ii.h

23 #i‚de‡ 
OS_uCOS_II_H


24 
	#OS_uCOS_II_H


	)

26 #ifde‡
__˝lu•lus


36 
	#OS_VERSION
 285u

	)

44 
	~"..\..\APP\ö˛udes.h
"

56 #ifde‡ 
OS_GLOBALS


57 
	#OS_EXT


	)

59 
	#OS_EXT
 

	)

62 #i‚de‡ 
OS_FALSE


63 
	#OS_FALSE
 0u

	)

66 #i‚de‡ 
OS_TRUE


67 
	#OS_TRUE
 1u

	)

70 
	#OS_ASCII_NUL
 (
INT8U
)0

	)

72 
	#OS_PRIO_SELF
 0xFFu

	)

74 #i‡
OS_TASK_STAT_EN
 > 0

75 
	#OS_N_SYS_TASKS
 2u

	)

77 
	#OS_N_SYS_TASKS
 1u

	)

80 
	#OS_TASK_STAT_PRIO
 (
OS_LOWEST_PRIO
 - 1Ë

	)

81 
	#OS_TASK_IDLE_PRIO
 (
OS_LOWEST_PRIO
Ë

	)

83 #i‡
OS_LOWEST_PRIO
 <= 63

84 
	#OS_EVENT_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 8 + 1Ë

	)

85 
	#OS_RDY_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 8 + 1Ë

	)

87 
	#OS_EVENT_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 16 + 1Ë

	)

88 
	#OS_RDY_TBL_SIZE
 ((
OS_LOWEST_PRIO
Ë/ 16 + 1Ë

	)

91 
	#OS_TASK_IDLE_ID
 65535u

	)

92 
	#OS_TASK_STAT_ID
 65534u

	)

93 
	#OS_TASK_TMR_ID
 65533u

	)

95 
	#OS_EVENT_EN
 (((
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)Ë|| (
OS_MBOX_EN
 > 0Ë|| (
OS_SEM_EN
 > 0Ë|| (
OS_MUTEX_EN
 > 0))

	)

97 
	#OS_TCB_RESERVED
 ((
OS_TCB
 *)1)

	)

105 
	#OS_STAT_RDY
 0x00u

	)

106 
	#OS_STAT_SEM
 0x01u

	)

107 
	#OS_STAT_MBOX
 0x02u

	)

108 
	#OS_STAT_Q
 0x04u

	)

109 
	#OS_STAT_SUSPEND
 0x08u

	)

110 
	#OS_STAT_MUTEX
 0x10u

	)

111 
	#OS_STAT_FLAG
 0x20u

	)

113 
	#OS_STAT_PEND_ANY
 (
OS_STAT_SEM
 | 
OS_STAT_MBOX
 | 
OS_STAT_Q
 | 
OS_STAT_MUTEX
 | 
OS_STAT_FLAG
)

	)

120 
	#OS_STAT_PEND_OK
 0u

	)

121 
	#OS_STAT_PEND_TO
 1u

	)

122 
	#OS_STAT_PEND_ABORT
 2u

	)

129 
	#OS_EVENT_TYPE_UNUSED
 0u

	)

130 
	#OS_EVENT_TYPE_MBOX
 1u

	)

131 
	#OS_EVENT_TYPE_Q
 2u

	)

132 
	#OS_EVENT_TYPE_SEM
 3u

	)

133 
	#OS_EVENT_TYPE_MUTEX
 4u

	)

134 
	#OS_EVENT_TYPE_FLAG
 5u

	)

136 
	#OS_TMR_TYPE
 100u

	)

144 
	#OS_FLAG_WAIT_CLR_ALL
 0u

	)

145 
	#OS_FLAG_WAIT_CLR_AND
 0u

	)

147 
	#OS_FLAG_WAIT_CLR_ANY
 1u

	)

148 
	#OS_FLAG_WAIT_CLR_OR
 1u

	)

150 
	#OS_FLAG_WAIT_SET_ALL
 2u

	)

151 
	#OS_FLAG_WAIT_SET_AND
 2u

	)

153 
	#OS_FLAG_WAIT_SET_ANY
 3u

	)

154 
	#OS_FLAG_WAIT_SET_OR
 3u

	)

157 
	#OS_FLAG_CONSUME
 0x80u

	)

160 
	#OS_FLAG_CLR
 0u

	)

161 
	#OS_FLAG_SET
 1u

	)

171 #i‡
OS_TICK_STEP_EN
 > 0

172 
	#OS_TICK_STEP_DIS
 0u

	)

173 
	#OS_TICK_STEP_WAIT
 1u

	)

174 
	#OS_TICK_STEP_ONCE
 2u

	)

182 
	#OS_DEL_NO_PEND
 0u

	)

183 
	#OS_DEL_ALWAYS
 1u

	)

192 
	#OS_PEND_OPT_NONE
 0u

	)

193 
	#OS_PEND_OPT_BROADCAST
 1u

	)

202 
	#OS_POST_OPT_NONE
 0x00u

	)

203 
	#OS_POST_OPT_BROADCAST
 0x01u

	)

204 
	#OS_POST_OPT_FRONT
 0x02u

	)

205 
	#OS_POST_OPT_NO_SCHED
 0x04u

	)

212 
	#OS_TASK_OPT_NONE
 0x0000u

	)

213 
	#OS_TASK_OPT_STK_CHK
 0x0001u

	)

214 
	#OS_TASK_OPT_STK_CLR
 0x0002u

	)

215 
	#OS_TASK_OPT_SAVE_FP
 0x0004u

	)

222 
	#OS_TMR_OPT_NONE
 0u

	)

224 
	#OS_TMR_OPT_ONE_SHOT
 1u

	)

225 
	#OS_TMR_OPT_PERIODIC
 2u

	)

227 
	#OS_TMR_OPT_CALLBACK
 3u

	)

228 
	#OS_TMR_OPT_CALLBACK_ARG
 4u

	)

235 
	#OS_TMR_STATE_UNUSED
 0u

	)

236 
	#OS_TMR_STATE_STOPPED
 1u

	)

237 
	#OS_TMR_STATE_COMPLETED
 2u

	)

238 
	#OS_TMR_STATE_RUNNING
 3u

	)

245 
	#OS_ERR_NONE
 0u

	)

247 
	#OS_ERR_EVENT_TYPE
 1u

	)

248 
	#OS_ERR_PEND_ISR
 2u

	)

249 
	#OS_ERR_POST_NULL_PTR
 3u

	)

250 
	#OS_ERR_PEVENT_NULL
 4u

	)

251 
	#OS_ERR_POST_ISR
 5u

	)

252 
	#OS_ERR_QUERY_ISR
 6u

	)

253 
	#OS_ERR_INVALID_OPT
 7u

	)

254 
	#OS_ERR_PDATA_NULL
 9u

	)

256 
	#OS_ERR_TIMEOUT
 10u

	)

257 
	#OS_ERR_EVENT_NAME_TOO_LONG
 11u

	)

258 
	#OS_ERR_PNAME_NULL
 12u

	)

259 
	#OS_ERR_PEND_LOCKED
 13u

	)

260 
	#OS_ERR_PEND_ABORT
 14u

	)

261 
	#OS_ERR_DEL_ISR
 15u

	)

262 
	#OS_ERR_CREATE_ISR
 16u

	)

263 
	#OS_ERR_NAME_GET_ISR
 17u

	)

264 
	#OS_ERR_NAME_SET_ISR
 18u

	)

266 
	#OS_ERR_MBOX_FULL
 20u

	)

268 
	#OS_ERR_Q_FULL
 30u

	)

269 
	#OS_ERR_Q_EMPTY
 31u

	)

271 
	#OS_ERR_PRIO_EXIST
 40u

	)

272 
	#OS_ERR_PRIO
 41u

	)

273 
	#OS_ERR_PRIO_INVALID
 42u

	)

275 
	#OS_ERR_SEM_OVF
 50u

	)

277 
	#OS_ERR_TASK_CREATE_ISR
 60u

	)

278 
	#OS_ERR_TASK_DEL
 61u

	)

279 
	#OS_ERR_TASK_DEL_IDLE
 62u

	)

280 
	#OS_ERR_TASK_DEL_REQ
 63u

	)

281 
	#OS_ERR_TASK_DEL_ISR
 64u

	)

282 
	#OS_ERR_TASK_NAME_TOO_LONG
 65u

	)

283 
	#OS_ERR_TASK_NO_MORE_TCB
 66u

	)

284 
	#OS_ERR_TASK_NOT_EXIST
 67u

	)

285 
	#OS_ERR_TASK_NOT_SUSPENDED
 68u

	)

286 
	#OS_ERR_TASK_OPT
 69u

	)

287 
	#OS_ERR_TASK_RESUME_PRIO
 70u

	)

288 
	#OS_ERR_TASK_SUSPEND_IDLE
 71u

	)

289 
	#OS_ERR_TASK_SUSPEND_PRIO
 72u

	)

290 
	#OS_ERR_TASK_WAITING
 73u

	)

292 
	#OS_ERR_TIME_NOT_DLY
 80u

	)

293 
	#OS_ERR_TIME_INVALID_MINUTES
 81u

	)

294 
	#OS_ERR_TIME_INVALID_SECONDS
 82u

	)

295 
	#OS_ERR_TIME_INVALID_MS
 83u

	)

296 
	#OS_ERR_TIME_ZERO_DLY
 84u

	)

297 
	#OS_ERR_TIME_DLY_ISR
 85u

	)

299 
	#OS_ERR_MEM_INVALID_PART
 90u

	)

300 
	#OS_ERR_MEM_INVALID_BLKS
 91u

	)

301 
	#OS_ERR_MEM_INVALID_SIZE
 92u

	)

302 
	#OS_ERR_MEM_NO_FREE_BLKS
 93u

	)

303 
	#OS_ERR_MEM_FULL
 94u

	)

304 
	#OS_ERR_MEM_INVALID_PBLK
 95u

	)

305 
	#OS_ERR_MEM_INVALID_PMEM
 96u

	)

306 
	#OS_ERR_MEM_INVALID_PDATA
 97u

	)

307 
	#OS_ERR_MEM_INVALID_ADDR
 98u

	)

308 
	#OS_ERR_MEM_NAME_TOO_LONG
 99u

	)

310 
	#OS_ERR_NOT_MUTEX_OWNER
 100u

	)

312 
	#OS_ERR_FLAG_INVALID_PGRP
 110u

	)

313 
	#OS_ERR_FLAG_WAIT_TYPE
 111u

	)

314 
	#OS_ERR_FLAG_NOT_RDY
 112u

	)

315 
	#OS_ERR_FLAG_INVALID_OPT
 113u

	)

316 
	#OS_ERR_FLAG_GRP_DEPLETED
 114u

	)

317 
	#OS_ERR_FLAG_NAME_TOO_LONG
 115u

	)

319 
	#OS_ERR_PIP_LOWER
 120u

	)

321 
	#OS_ERR_TMR_INVALID_DLY
 130u

	)

322 
	#OS_ERR_TMR_INVALID_PERIOD
 131u

	)

323 
	#OS_ERR_TMR_INVALID_OPT
 132u

	)

324 
	#OS_ERR_TMR_INVALID_NAME
 133u

	)

325 
	#OS_ERR_TMR_NON_AVAIL
 134u

	)

326 
	#OS_ERR_TMR_INACTIVE
 135u

	)

327 
	#OS_ERR_TMR_INVALID_DEST
 136u

	)

328 
	#OS_ERR_TMR_INVALID_TYPE
 137u

	)

329 
	#OS_ERR_TMR_INVALID
 138u

	)

330 
	#OS_ERR_TMR_ISR
 139u

	)

331 
	#OS_ERR_TMR_NAME_TOO_LONG
 140u

	)

332 
	#OS_ERR_TMR_INVALID_STATE
 141u

	)

333 
	#OS_ERR_TMR_STOPPED
 142u

	)

334 
	#OS_ERR_TMR_NO_CALLBACK
 143u

	)

341 
	#OS_NO_ERR
 
OS_ERR_NONE


	)

342 
	#OS_TIMEOUT
 
OS_ERR_TIMEOUT


	)

343 
	#OS_TASK_NOT_EXIST
 
OS_ERR_TASK_NOT_EXIST


	)

344 
	#OS_MBOX_FULL
 
OS_ERR_MBOX_FULL


	)

345 
	#OS_Q_FULL
 
OS_ERR_Q_FULL


	)

346 
	#OS_Q_EMPTY
 
OS_ERR_Q_EMPTY


	)

347 
	#OS_PRIO_EXIST
 
OS_ERR_PRIO_EXIST


	)

348 
	#OS_PRIO_ERR
 
OS_ERR_PRIO


	)

349 
	#OS_PRIO_INVALID
 
OS_ERR_PRIO_INVALID


	)

350 
	#OS_SEM_OVF
 
OS_ERR_SEM_OVF


	)

351 
	#OS_TASK_DEL_ERR
 
OS_ERR_TASK_DEL


	)

352 
	#OS_TASK_DEL_IDLE
 
OS_ERR_TASK_DEL_IDLE


	)

353 
	#OS_TASK_DEL_REQ
 
OS_ERR_TASK_DEL_REQ


	)

354 
	#OS_TASK_DEL_ISR
 
OS_ERR_TASK_DEL_ISR


	)

355 
	#OS_NO_MORE_TCB
 
OS_ERR_TASK_NO_MORE_TCB


	)

356 
	#OS_TIME_NOT_DLY
 
OS_ERR_TIME_NOT_DLY


	)

357 
	#OS_TIME_INVALID_MINUTES
 
OS_ERR_TIME_INVALID_MINUTES


	)

358 
	#OS_TIME_INVALID_SECONDS
 
OS_ERR_TIME_INVALID_SECONDS


	)

359 
	#OS_TIME_INVALID_MS
 
OS_ERR_TIME_INVALID_MS


	)

360 
	#OS_TIME_ZERO_DLY
 
OS_ERR_TIME_ZERO_DLY


	)

361 
	#OS_TASK_SUSPEND_PRIO
 
OS_ERR_TASK_SUSPEND_PRIO


	)

362 
	#OS_TASK_SUSPEND_IDLE
 
OS_ERR_TASK_SUSPEND_IDLE


	)

363 
	#OS_TASK_RESUME_PRIO
 
OS_ERR_TASK_RESUME_PRIO


	)

364 
	#OS_TASK_NOT_SUSPENDED
 
OS_ERR_TASK_NOT_SUSPENDED


	)

365 
	#OS_MEM_INVALID_PART
 
OS_ERR_MEM_INVALID_PART


	)

366 
	#OS_MEM_INVALID_BLKS
 
OS_ERR_MEM_INVALID_BLKS


	)

367 
	#OS_MEM_INVALID_SIZE
 
OS_ERR_MEM_INVALID_SIZE


	)

368 
	#OS_MEM_NO_FREE_BLKS
 
OS_ERR_MEM_NO_FREE_BLKS


	)

369 
	#OS_MEM_FULL
 
OS_ERR_MEM_FULL


	)

370 
	#OS_MEM_INVALID_PBLK
 
OS_ERR_MEM_INVALID_PBLK


	)

371 
	#OS_MEM_INVALID_PMEM
 
OS_ERR_MEM_INVALID_PMEM


	)

372 
	#OS_MEM_INVALID_PDATA
 
OS_ERR_MEM_INVALID_PDATA


	)

373 
	#OS_MEM_INVALID_ADDR
 
OS_ERR_MEM_INVALID_ADDR


	)

374 
	#OS_MEM_NAME_TOO_LONG
 
OS_ERR_MEM_NAME_TOO_LONG


	)

375 
	#OS_TASK_OPT_ERR
 
OS_ERR_TASK_OPT


	)

376 
	#OS_FLAG_INVALID_PGRP
 
OS_ERR_FLAG_INVALID_PGRP


	)

377 
	#OS_FLAG_ERR_WAIT_TYPE
 
OS_ERR_FLAG_WAIT_TYPE


	)

378 
	#OS_FLAG_ERR_NOT_RDY
 
OS_ERR_FLAG_NOT_RDY


	)

379 
	#OS_FLAG_INVALID_OPT
 
OS_ERR_FLAG_INVALID_OPT


	)

380 
	#OS_FLAG_GRP_DEPLETED
 
OS_ERR_FLAG_GRP_DEPLETED


	)

389 #i‡
OS_EVENT_EN
 && (
OS_MAX_EVENTS
 > 0)

390 
	sos_evít
 {

391 
INT8U
 
OSEvítTy≥
;

392 *
OSEvítPå
;

393 
INT16U
 
OSEvítC¡
;

394 #i‡
OS_LOWEST_PRIO
 <= 63

395 
INT8U
 
OSEvítGΩ
;

396 
INT8U
 
OSEvítTbl
[
OS_EVENT_TBL_SIZE
];

398 
INT16U
 
OSEvítGΩ
;

399 
INT16U
 
OSEvítTbl
[
OS_EVENT_TBL_SIZE
];

402 #i‡
OS_EVENT_NAME_SIZE
 > 1

403 
INT8U
 
OSEvítName
[
OS_EVENT_NAME_SIZE
];

405 } 
	tOS_EVENT
;

415 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

417 #i‡
OS_FLAGS_NBITS
 == 8

418 
INT8U
 
	tOS_FLAGS
;

421 #i‡
OS_FLAGS_NBITS
 == 16

422 
INT16U
 
	tOS_FLAGS
;

425 #i‡
OS_FLAGS_NBITS
 == 32

426 
INT32U
 
	tOS_FLAGS
;

430 
	sos_Êag_gΩ
 {

431 
INT8U
 
	gOSFœgTy≥
;

432 *
	gOSFœgWaôLi°
;

433 
OS_FLAGS
 
	gOSFœgFœgs
;

434 #i‡
OS_FLAG_NAME_SIZE
 > 1

435 
INT8U
 
	gOSFœgName
[
OS_FLAG_NAME_SIZE
];

437 } 
	tOS_FLAG_GRP
;

441 
	sos_Êag_node
 {

442 *
	gOSFœgNodeNext
;

443 *
	gOSFœgNodePªv
;

444 *
	gOSFœgNodeTCB
;

445 *
	gOSFœgNodeFœgGΩ
;

446 
OS_FLAGS
 
	gOSFœgNodeFœgs
;

447 
INT8U
 
	gOSFœgNodeWaôTy≥
;

452 } 
	tOS_FLAG_NODE
;

462 #i‡
OS_MBOX_EN
 > 0

463 
	sos_mbox_d©a
 {

464 *
	gOSMsg
;

465 #i‡
OS_LOWEST_PRIO
 <= 63

466 
INT8U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

467 
INT8U
 
	gOSEvítGΩ
;

469 
INT16U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

470 
INT16U
 
	gOSEvítGΩ
;

472 } 
	tOS_MBOX_DATA
;

481 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

482 
	sos_mem
 {

483 *
	gOSMemAddr
;

484 *
	gOSMemFªeLi°
;

485 
INT32U
 
	gOSMemBlkSize
;

486 
INT32U
 
	gOSMemNBlks
;

487 
INT32U
 
	gOSMemNFªe
;

488 #i‡
OS_MEM_NAME_SIZE
 > 1

489 
INT8U
 
	gOSMemName
[
OS_MEM_NAME_SIZE
];

491 } 
	tOS_MEM
;

494 
	sos_mem_d©a
 {

495 *
	gOSAddr
;

496 *
	gOSFªeLi°
;

497 
INT32U
 
	gOSBlkSize
;

498 
INT32U
 
	gOSNBlks
;

499 
INT32U
 
	gOSNFªe
;

500 
INT32U
 
	gOSNU£d
;

501 } 
	tOS_MEM_DATA
;

511 #i‡
OS_MUTEX_EN
 > 0

512 
	sos_muãx_d©a
 {

513 #i‡
OS_LOWEST_PRIO
 <= 63

514 
INT8U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

515 
INT8U
 
	gOSEvítGΩ
;

517 
INT16U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

518 
INT16U
 
	gOSEvítGΩ
;

520 
BOOLEAN
 
	gOSVÆue
;

521 
INT8U
 
	gOSOw√rPrio
;

522 
INT8U
 
	gOSMuãxPIP
;

523 } 
	tOS_MUTEX_DATA
;

532 #i‡
OS_Q_EN
 > 0

533 
	sos_q
 {

534 
os_q
 *
	gOSQPå
;

535 **
	gOSQSèπ
;

536 **
	gOSQEnd
;

537 **
	gOSQIn
;

538 **
	gOSQOut
;

539 
INT16U
 
	gOSQSize
;

540 
INT16U
 
	gOSQE¡rõs
;

541 } 
	tOS_Q
;

544 
	sos_q_d©a
 {

545 *
	gOSMsg
;

546 
INT16U
 
	gOSNMsgs
;

547 
INT16U
 
	gOSQSize
;

548 #i‡
OS_LOWEST_PRIO
 <= 63

549 
INT8U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

550 
INT8U
 
	gOSEvítGΩ
;

552 
INT16U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

553 
INT16U
 
	gOSEvítGΩ
;

555 } 
	tOS_Q_DATA
;

564 #i‡
OS_SEM_EN
 > 0

565 
	sos_£m_d©a
 {

566 
INT16U
 
	gOSC¡
;

567 #i‡
OS_LOWEST_PRIO
 <= 63

568 
INT8U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

569 
INT8U
 
	gOSEvítGΩ
;

571 
INT16U
 
	gOSEvítTbl
[
OS_EVENT_TBL_SIZE
];

572 
INT16U
 
	gOSEvítGΩ
;

574 } 
	tOS_SEM_DATA
;

583 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

584 
	sos_°k_d©a
 {

585 
INT32U
 
	gOSFªe
;

586 
INT32U
 
	gOSU£d
;

587 } 
	tOS_STK_DATA
;

597 
	sos_tcb
 {

598 
OS_STK
 *
	gOSTCBStkPå
;

600 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

601 *
	gOSTCBExtPå
;

602 
OS_STK
 *
	gOSTCBStkBŸtom
;

603 
INT32U
 
	gOSTCBStkSize
;

604 
INT16U
 
	gOSTCBO±
;

605 
INT16U
 
	gOSTCBId
;

608 
os_tcb
 *
	gOSTCBNext
;

609 
os_tcb
 *
	gOSTCBPªv
;

611 #i‡
OS_EVENT_EN
 || (
OS_FLAG_EN
 > 0)

612 
OS_EVENT
 *
	gOSTCBEvítPå
;

615 #i‡((
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)Ë|| (
OS_MBOX_EN
 > 0)

616 *
	gOSTCBMsg
;

619 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

620 #i‡
OS_TASK_DEL_EN
 > 0

621 
OS_FLAG_NODE
 *
	gOSTCBFœgNode
;

623 
OS_FLAGS
 
	gOSTCBFœgsRdy
;

626 
INT16U
 
	gOSTCBDly
;

627 
INT8U
 
	gOSTCBSèt
;

628 
INT8U
 
	gOSTCBSètPíd
;

629 
INT8U
 
	gOSTCBPrio
;

631 
INT8U
 
	gOSTCBX
;

632 
INT8U
 
	gOSTCBY
;

633 #i‡
OS_LOWEST_PRIO
 <= 63

634 
INT8U
 
	gOSTCBBôX
;

635 
INT8U
 
	gOSTCBBôY
;

637 
INT16U
 
	gOSTCBBôX
;

638 
INT16U
 
	gOSTCBBôY
;

641 #i‡
OS_TASK_DEL_EN
 > 0

642 
INT8U
 
	gOSTCBDñReq
;

645 #i‡
OS_TASK_PROFILE_EN
 > 0

646 
INT32U
 
	gOSTCBCtxSwCå
;

647 
INT32U
 
	gOSTCBCy˛esTŸ
;

648 
INT32U
 
	gOSTCBCy˛esSèπ
;

649 
OS_STK
 *
	gOSTCBStkBa£
;

650 
INT32U
 
	gOSTCBStkU£d
;

653 #i‡
OS_TASK_NAME_SIZE
 > 1

654 
INT8U
 
	gOSTCBTaskName
[
OS_TASK_NAME_SIZE
];

656 } 
	tOS_TCB
;

665 #i‡
OS_TMR_EN
 > 0

666 (*
	gOS_TMR_CALLBACK
)(*
	t±mr
, *
	t∑rg
);

670 
	sos_tmr
 {

671 
INT8U
 
	gOSTmrTy≥
;

672 
OS_TMR_CALLBACK
 
	gOSTmrCÆlback
;

673 *
	gOSTmrCÆlbackArg
;

674 *
	gOSTmrNext
;

675 *
	gOSTmrPªv
;

676 
INT32U
 
	gOSTmrM©ch
;

677 
INT32U
 
	gOSTmrDly
;

678 
INT32U
 
	gOSTmrPîiod
;

679 #i‡
OS_TMR_CFG_NAME_SIZE
 > 0

680 
INT8U
 
	gOSTmrName
[
OS_TMR_CFG_NAME_SIZE
];

682 
INT8U
 
	gOSTmrO±
;

683 
INT8U
 
	gOSTmrSèã
;

687 } 
	tOS_TMR
;

691 
	sos_tmr_whìl
 {

692 
OS_TMR
 *
	gOSTmrFú°
;

693 
INT16U
 
	gOSTmrE¡rõs
;

694 } 
	tOS_TMR_WHEEL
;

704 
OS_EXT
 
INT32U
 
	gOSCtxSwCå
;

706 #i‡
OS_EVENT_EN
 && (
OS_MAX_EVENTS
 > 0)

707 
OS_EXT
 
OS_EVENT
 *
	gOSEvítFªeLi°
;

708 
OS_EXT
 
OS_EVENT
 
	gOSEvítTbl
[
OS_MAX_EVENTS
];

711 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

712 
OS_EXT
 
OS_FLAG_GRP
 
	gOSFœgTbl
[
OS_MAX_FLAGS
];

713 
OS_EXT
 
OS_FLAG_GRP
 *
	gOSFœgFªeLi°
;

716 #i‡
OS_TASK_STAT_EN
 > 0

717 
OS_EXT
 
INT8S
 
	gOSCPUUßge
;

718 
OS_EXT
 
INT32U
 
	gOSIdÀCåMax
;

719 
OS_EXT
 
INT32U
 
	gOSIdÀCåRun
;

720 
OS_EXT
 
BOOLEAN
 
	gOSSètRdy
;

721 
OS_EXT
 
OS_STK
 
	gOSTaskSètStk
[
OS_TASK_STAT_STK_SIZE
];

724 
OS_EXT
 
INT8U
 
	gOSI¡Ne°ög
;

726 
OS_EXT
 
INT8U
 
	gOSLockNe°ög
;

728 
OS_EXT
 
INT8U
 
	gOSPrioCur
;

729 
OS_EXT
 
INT8U
 
	gOSPrioHighRdy
;

731 #i‡
OS_LOWEST_PRIO
 <= 63

732 
OS_EXT
 
INT8U
 
	gOSRdyGΩ
;

733 
OS_EXT
 
INT8U
 
	gOSRdyTbl
[
OS_RDY_TBL_SIZE
];

735 
OS_EXT
 
INT16U
 
	gOSRdyGΩ
;

736 
OS_EXT
 
INT16U
 
	gOSRdyTbl
[
OS_RDY_TBL_SIZE
];

739 
OS_EXT
 
BOOLEAN
 
	gOSRu¬ög
;

741 
OS_EXT
 
INT8U
 
	gOSTaskCå
;

743 
OS_EXT
 vﬁ©ûê
INT32U
 
	gOSIdÀCå
;

745 
OS_EXT
 
OS_STK
 
	gOSTaskIdÀStk
[
OS_TASK_IDLE_STK_SIZE
];

748 
OS_EXT
 
OS_TCB
 *
	gOSTCBCur
;

749 
OS_EXT
 
OS_TCB
 *
	gOSTCBFªeLi°
;

750 
OS_EXT
 
OS_TCB
 *
	gOSTCBHighRdy
;

751 
OS_EXT
 
OS_TCB
 *
	gOSTCBLi°
;

752 
OS_EXT
 
OS_TCB
 *
	gOSTCBPrioTbl
[
OS_LOWEST_PRIO
 + 1];

753 
OS_EXT
 
OS_TCB
 
	gOSTCBTbl
[
OS_MAX_TASKS
 + 
OS_N_SYS_TASKS
];

755 #i‡
OS_TICK_STEP_EN
 > 0

756 
OS_EXT
 
INT8U
 
	gOSTickSãpSèã
;

759 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

760 
OS_EXT
 
OS_MEM
 *
	gOSMemFªeLi°
;

761 
OS_EXT
 
OS_MEM
 
	gOSMemTbl
[
OS_MAX_MEM_PART
];

764 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

765 
OS_EXT
 
OS_Q
 *
	gOSQFªeLi°
;

766 
OS_EXT
 
OS_Q
 
	gOSQTbl
[
OS_MAX_QS
];

769 #i‡
OS_TIME_GET_SET_EN
 > 0

770 
OS_EXT
 vﬁ©ûê
INT32U
 
	gOSTime
;

773 #i‡
OS_TMR_EN
 > 0

774 
OS_EXT
 
INT16U
 
	gOSTmrFªe
;

775 
OS_EXT
 
INT16U
 
	gOSTmrU£d
;

776 
OS_EXT
 
INT32U
 
	gOSTmrTime
;

778 
OS_EXT
 
OS_EVENT
 *
	gOSTmrSem
;

779 
OS_EXT
 
OS_EVENT
 *
	gOSTmrSemSig«l
;

781 
OS_EXT
 
OS_TMR
 
	gOSTmrTbl
[
OS_TMR_CFG_MAX
];

782 
OS_EXT
 
OS_TMR
 *
	gOSTmrFªeLi°
;

783 
OS_EXT
 
OS_STK
 
	gOSTmrTaskStk
[
OS_TASK_TMR_STK_SIZE
];

785 
OS_EXT
 
OS_TMR_WHEEL
 
	gOSTmrWhìlTbl
[
OS_TMR_CFG_WHEEL_SIZE
];

788 
INT8U
 c⁄° 
OSUnM≠Tbl
[256];

804 #i‡
OS_EVENT_EN
 && (
OS_EVENT_NAME_SIZE
 > 1)

805 
INT8U
 
OSEvítNameGë
 (
OS_EVENT
 *
≥vít
,

806 
INT8U
 *
≤ame
,

807 
INT8U
 *
≥º
);

809 
OSEvítNameSë
 (
OS_EVENT
 *
≥vít
,

810 
INT8U
 *
≤ame
,

811 
INT8U
 *
≥º
);

820 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

822 #i‡
OS_FLAG_ACCEPT_EN
 > 0

823 
OS_FLAGS
 
OSFœgAc˚±
 (
OS_FLAG_GRP
 *
pgΩ
,

824 
OS_FLAGS
 
Êags
,

825 
INT8U
 
waô_ty≥
,

826 
INT8U
 *
≥º
);

829 
OS_FLAG_GRP
 *
OSFœgCª©e
 (
OS_FLAGS
 
Êags
,

830 
INT8U
 *
≥º
);

832 #i‡
OS_FLAG_DEL_EN
 > 0

833 
OS_FLAG_GRP
 *
OSFœgDñ
 (OS_FLAG_GRP *
pgΩ
,

834 
INT8U
 
›t
,

835 
INT8U
 *
≥º
);

838 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_FLAG_NAME_SIZE
 > 1)

839 
INT8U
 
OSFœgNameGë
 (
OS_FLAG_GRP
 *
pgΩ
,

840 
INT8U
 *
≤ame
,

841 
INT8U
 *
≥º
);

843 
OSFœgNameSë
 (
OS_FLAG_GRP
 *
pgΩ
,

844 
INT8U
 *
≤ame
,

845 
INT8U
 *
≥º
);

848 
OS_FLAGS
 
OSFœgPíd
 (
OS_FLAG_GRP
 *
pgΩ
,

849 
OS_FLAGS
 
Êags
,

850 
INT8U
 
waô_ty≥
,

851 
INT16U
 
timeout
,

852 
INT8U
 *
≥º
);

854 
OS_FLAGS
 
OSFœgPídGëFœgsRdy
 ();

855 
OS_FLAGS
 
OSFœgPo°
 (
OS_FLAG_GRP
 *
pgΩ
,

856 
OS_FLAGS
 
Êags
,

857 
INT8U
 
›t
,

858 
INT8U
 *
≥º
);

860 #i‡
OS_FLAG_QUERY_EN
 > 0

861 
OS_FLAGS
 
OSFœgQuîy
 (
OS_FLAG_GRP
 *
pgΩ
,

862 
INT8U
 *
≥º
);

872 #i‡
OS_MBOX_EN
 > 0

874 #i‡
OS_MBOX_ACCEPT_EN
 > 0

875 *
OSMboxAc˚±
 (
OS_EVENT
 *
≥vít
);

878 
OS_EVENT
 *
OSMboxCª©e
 (*
pmsg
);

880 #i‡
OS_MBOX_DEL_EN
 > 0

881 
OS_EVENT
 *
OSMboxDñ
 (OS_EVENT *
≥vít
,

882 
INT8U
 
›t
,

883 
INT8U
 *
≥º
);

886 *
OSMboxPíd
 (
OS_EVENT
 *
≥vít
,

887 
INT16U
 
timeout
,

888 
INT8U
 *
≥º
);

890 #i‡
OS_MBOX_PEND_ABORT_EN
 > 0

891 
INT8U
 
OSMboxPídAb‹t
 (
OS_EVENT
 *
≥vít
,

892 
INT8U
 
›t
,

893 
INT8U
 *
≥º
);

896 #i‡
OS_MBOX_POST_EN
 > 0

897 
INT8U
 
OSMboxPo°
 (
OS_EVENT
 *
≥vít
,

898 *
pmsg
);

901 #i‡
OS_MBOX_POST_OPT_EN
 > 0

902 
INT8U
 
OSMboxPo°O±
 (
OS_EVENT
 *
≥vít
,

903 *
pmsg
,

904 
INT8U
 
›t
);

907 #i‡
OS_MBOX_QUERY_EN
 > 0

908 
INT8U
 
OSMboxQuîy
 (
OS_EVENT
 *
≥vít
,

909 
OS_MBOX_DATA
 *
p_mbox_d©a
);

919 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

921 
OS_MEM
 *
OSMemCª©e
 (*
addr
,

922 
INT32U
 
nblks
,

923 
INT32U
 
blksize
,

924 
INT8U
 *
≥º
);

926 *
OSMemGë
 (
OS_MEM
 *
pmem
,

927 
INT8U
 *
≥º
);

928 #i‡
OS_MEM_NAME_SIZE
 > 1

929 
INT8U
 
OSMemNameGë
 (
OS_MEM
 *
pmem
,

930 
INT8U
 *
≤ame
,

931 
INT8U
 *
≥º
);

933 
OSMemNameSë
 (
OS_MEM
 *
pmem
,

934 
INT8U
 *
≤ame
,

935 
INT8U
 *
≥º
);

937 
INT8U
 
OSMemPut
 (
OS_MEM
 *
pmem
,

938 *
pblk
);

940 #i‡
OS_MEM_QUERY_EN
 > 0

941 
INT8U
 
OSMemQuîy
 (
OS_MEM
 *
pmem
,

942 
OS_MEM_DATA
 *
p_mem_d©a
);

953 #i‡
OS_MUTEX_EN
 > 0

955 #i‡
OS_MUTEX_ACCEPT_EN
 > 0

956 
BOOLEAN
 
OSMuãxAc˚±
 (
OS_EVENT
 *
≥vít
,

957 
INT8U
 *
≥º
);

960 
OS_EVENT
 *
OSMuãxCª©e
 (
INT8U
 
¥io
,

961 
INT8U
 *
≥º
);

963 #i‡
OS_MUTEX_DEL_EN
 > 0

964 
OS_EVENT
 *
OSMuãxDñ
 (OS_EVENT *
≥vít
,

965 
INT8U
 
›t
,

966 
INT8U
 *
≥º
);

969 
OSMuãxPíd
 (
OS_EVENT
 *
≥vít
,

970 
INT16U
 
timeout
,

971 
INT8U
 *
≥º
);

973 
INT8U
 
OSMuãxPo°
 (
OS_EVENT
 *
≥vít
);

975 #i‡
OS_MUTEX_QUERY_EN
 > 0

976 
INT8U
 
OSMuãxQuîy
 (
OS_EVENT
 *
≥vít
,

977 
OS_MUTEX_DATA
 *
p_muãx_d©a
);

989 #i‡(
OS_Q_EN
 > 0Ë&& (
OS_MAX_QS
 > 0)

991 #i‡
OS_Q_ACCEPT_EN
 > 0

992 *
OSQAc˚±
 (
OS_EVENT
 *
≥vít
,

993 
INT8U
 *
≥º
);

996 
OS_EVENT
 *
OSQCª©e
 (**
°¨t
,

997 
INT16U
 
size
);

999 #i‡
OS_Q_DEL_EN
 > 0

1000 
OS_EVENT
 *
OSQDñ
 (OS_EVENT *
≥vít
,

1001 
INT8U
 
›t
,

1002 
INT8U
 *
≥º
);

1005 #i‡
OS_Q_FLUSH_EN
 > 0

1006 
INT8U
 
OSQFlush
 (
OS_EVENT
 *
≥vít
);

1009 *
OSQPíd
 (
OS_EVENT
 *
≥vít
,

1010 
INT16U
 
timeout
,

1011 
INT8U
 *
≥º
);

1013 #i‡
OS_Q_PEND_ABORT_EN
 > 0

1014 
INT8U
 
OSQPídAb‹t
 (
OS_EVENT
 *
≥vít
,

1015 
INT8U
 
›t
,

1016 
INT8U
 *
≥º
);

1019 #i‡
OS_Q_POST_EN
 > 0

1020 
INT8U
 
OSQPo°
 (
OS_EVENT
 *
≥vít
,

1021 *
pmsg
);

1024 #i‡
OS_Q_POST_FRONT_EN
 > 0

1025 
INT8U
 
OSQPo°Fr⁄t
 (
OS_EVENT
 *
≥vít
,

1026 *
pmsg
);

1029 #i‡
OS_Q_POST_OPT_EN
 > 0

1030 
INT8U
 
OSQPo°O±
 (
OS_EVENT
 *
≥vít
,

1031 *
pmsg
,

1032 
INT8U
 
›t
);

1035 #i‡
OS_Q_QUERY_EN
 > 0

1036 
INT8U
 
OSQQuîy
 (
OS_EVENT
 *
≥vít
,

1037 
OS_Q_DATA
 *
p_q_d©a
);

1048 #i‡
OS_SEM_EN
 > 0

1050 #i‡
OS_SEM_ACCEPT_EN
 > 0

1051 
INT16U
 
OSSemAc˚±
 (
OS_EVENT
 *
≥vít
);

1054 
OS_EVENT
 *
OSSemCª©e
 (
INT16U
 
˙t
);

1056 #i‡
OS_SEM_DEL_EN
 > 0

1057 
OS_EVENT
 *
OSSemDñ
 (OS_EVENT *
≥vít
,

1058 
INT8U
 
›t
,

1059 
INT8U
 *
≥º
);

1062 
OSSemPíd
 (
OS_EVENT
 *
≥vít
,

1063 
INT16U
 
timeout
,

1064 
INT8U
 *
≥º
);

1066 #i‡
OS_SEM_PEND_ABORT_EN
 > 0

1067 
INT8U
 
OSSemPídAb‹t
 (
OS_EVENT
 *
≥vít
,

1068 
INT8U
 
›t
,

1069 
INT8U
 *
≥º
);

1072 
INT8U
 
OSSemPo°
 (
OS_EVENT
 *
≥vít
);

1074 #i‡
OS_SEM_QUERY_EN
 > 0

1075 
INT8U
 
OSSemQuîy
 (
OS_EVENT
 *
≥vít
,

1076 
OS_SEM_DATA
 *
p_£m_d©a
);

1079 #i‡
OS_SEM_SET_EN
 > 0

1080 
OSSemSë
 (
OS_EVENT
 *
≥vít
,

1081 
INT16U
 
˙t
,

1082 
INT8U
 *
≥º
);

1093 #i‡
OS_TASK_CHANGE_PRIO_EN
 > 0

1094 
INT8U
 
OSTaskCh™gePrio
 (INT8U 
ﬁd¥io
,

1095 
INT8U
 
√w¥io
);

1098 #i‡
OS_TASK_CREATE_EN
 > 0

1099 
INT8U
 
OSTaskCª©e
 ((*
èsk
)(*
p_¨g
),

1100 *
p_¨g
,

1101 
OS_STK
 *
±os
,

1102 
INT8U
 
¥io
);

1105 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1106 
INT8U
 
OSTaskCª©eExt
 ((*
èsk
)(*
p_¨g
),

1107 *
p_¨g
,

1108 
OS_STK
 *
±os
,

1109 
INT8U
 
¥io
,

1110 
INT16U
 
id
,

1111 
OS_STK
 *
pbos
,

1112 
INT32U
 
°k_size
,

1113 *
≥xt
,

1114 
INT16U
 
›t
);

1117 #i‡
OS_TASK_DEL_EN
 > 0

1118 
INT8U
 
OSTaskDñ
 (INT8U 
¥io
);

1119 
INT8U
 
OSTaskDñReq
 (INT8U 
¥io
);

1122 #i‡
OS_TASK_NAME_SIZE
 > 1

1123 
INT8U
 
OSTaskNameGë
 (INT8U 
¥io
,

1124 
INT8U
 *
≤ame
,

1125 
INT8U
 *
≥º
);

1127 
OSTaskNameSë
 (
INT8U
 
¥io
,

1128 
INT8U
 *
≤ame
,

1129 
INT8U
 *
≥º
);

1132 #i‡
OS_TASK_SUSPEND_EN
 > 0

1133 
INT8U
 
OSTaskResume
 (INT8U 
¥io
);

1134 
INT8U
 
OSTaskSu•íd
 (INT8U 
¥io
);

1137 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1138 
INT8U
 
OSTaskStkChk
 (INT8U 
¥io
,

1139 
OS_STK_DATA
 *
p_°k_d©a
);

1142 #i‡
OS_TASK_QUERY_EN
 > 0

1143 
INT8U
 
OSTaskQuîy
 (INT8U 
¥io
,

1144 
OS_TCB
 *
p_èsk_d©a
);

1154 
OSTimeDly
 (
INT16U
 
ticks
);

1156 #i‡
OS_TIME_DLY_HMSM_EN
 > 0

1157 
INT8U
 
OSTimeDlyHMSM
 (INT8U 
hours
,

1158 
INT8U
 
möuãs
,

1159 
INT8U
 
£c⁄ds
,

1160 
INT16U
 
mûli
);

1163 #i‡
OS_TIME_DLY_RESUME_EN
 > 0

1164 
INT8U
 
OSTimeDlyResume
 (INT8U 
¥io
);

1167 #i‡
OS_TIME_GET_SET_EN
 > 0

1168 
INT32U
 
OSTimeGë
 ();

1169 
OSTimeSë
 (
INT32U
 
ticks
);

1172 
OSTimeTick
 ();

1180 #i‡
OS_TMR_EN
 > 0

1181 
OS_TMR
 *
OSTmrCª©e
 (
INT32U
 
dly
,

1182 
INT32U
 
≥riod
,

1183 
INT8U
 
›t
,

1184 
OS_TMR_CALLBACK
 
ˇŒback
,

1185 *
ˇŒback_¨g
,

1186 
INT8U
 *
≤ame
,

1187 
INT8U
 *
≥º
);

1189 
BOOLEAN
 
OSTmrDñ
 (
OS_TMR
 *
±mr
,

1190 
INT8U
 *
≥º
);

1192 #i‡
OS_TMR_CFG_NAME_SIZE
 > 0

1193 
INT8U
 
OSTmrNameGë
 (
OS_TMR
 *
±mr
,

1194 
INT8U
 *
pde°
,

1195 
INT8U
 *
≥º
);

1197 
INT32U
 
OSTmrRemaöGë
 (
OS_TMR
 *
±mr
,

1198 
INT8U
 *
≥º
);

1200 
INT8U
 
OSTmrSèãGë
 (
OS_TMR
 *
±mr
,

1201 
INT8U
 *
≥º
);

1203 
BOOLEAN
 
OSTmrSèπ
 (
OS_TMR
 *
±mr
,

1204 
INT8U
 *
≥º
);

1206 
BOOLEAN
 
OSTmrSt›
 (
OS_TMR
 *
±mr
,

1207 
INT8U
 
›t
,

1208 *
ˇŒback_¨g
,

1209 
INT8U
 *
≥º
);

1211 
INT8U
 
OSTmrSig«l
 ();

1220 
OSInô
 ();

1222 
OSI¡E¡î
 ();

1223 
OSI¡Exô
 ();

1225 #i‡
OS_SCHED_LOCK_EN
 > 0

1226 
OSSchedLock
 ();

1227 
OSSchedU∆ock
 ();

1230 
OSSèπ
 ();

1232 
OSSètInô
 ();

1234 
INT16U
 
OSVîsi⁄
 ();

1244 #i‡
OS_TASK_DEL_EN
 > 0

1245 
OS_Dummy
 ();

1248 #i‡
OS_EVENT_EN


1249 
INT8U
 
OS_EvítTaskRdy
 (
OS_EVENT
 *
≥vít
,

1250 *
pmsg
,

1251 
INT8U
 
msk
,

1252 
INT8U
 
≥nd_°©
);

1254 
OS_EvítTaskWaô
 (
OS_EVENT
 *
≥vít
);

1256 
OS_EvítTOAb‹t
 (
OS_EVENT
 *
≥vít
);

1258 
OS_EvítWaôLi°Inô
 (
OS_EVENT
 *
≥vít
);

1261 #i‡(
OS_FLAG_EN
 > 0Ë&& (
OS_MAX_FLAGS
 > 0)

1262 
OS_FœgInô
 ();

1263 
OS_FœgU∆ök
 (
OS_FLAG_NODE
 *
≤ode
);

1266 
OS_MemCÃ
 (
INT8U
 *
pde°
,

1267 
INT16U
 
size
);

1269 
OS_MemC›y
 (
INT8U
 *
pde°
,

1270 
INT8U
 *
p§c
,

1271 
INT16U
 
size
);

1273 #i‡(
OS_MEM_EN
 > 0Ë&& (
OS_MAX_MEM_PART
 > 0)

1274 
OS_MemInô
 ();

1277 #i‡
OS_Q_EN
 > 0

1278 
OS_QInô
 ();

1281 
OS_Sched
 ();

1283 #i‡(
OS_EVENT_NAME_SIZE
 > 1Ë|| (
OS_FLAG_NAME_SIZE
 > 1Ë|| (
OS_MEM_NAME_SIZE
 > 1Ë|| (
OS_TASK_NAME_SIZE
 > 1)

1284 
INT8U
 
OS_SåC›y
 (INT8U *
pde°
,

1285 
INT8U
 *
p§c
);

1287 
INT8U
 
OS_SåLí
 (INT8U *
p§c
);

1290 
OS_TaskIdÀ
 (*
p_¨g
);

1292 #i‡
OS_TASK_STAT_EN
 > 0

1293 
OS_TaskSèt
 (*
p_¨g
);

1296 #i‡
OS_TASK_CREATE_EXT_EN
 > 0

1297 
OS_TaskStkCÃ
 (
OS_STK
 *
pbos
,

1298 
INT32U
 
size
,

1299 
INT16U
 
›t
);

1302 #i‡(
OS_TASK_STAT_STK_CHK_EN
 > 0Ë&& (
OS_TASK_CREATE_EXT_EN
 > 0)

1303 
OS_TaskSètStkChk
 ();

1306 
INT8U
 
OS_TCBInô
 (INT8U 
¥io
,

1307 
OS_STK
 *
±os
,

1308 
OS_STK
 *
pbos
,

1309 
INT16U
 
id
,

1310 
INT32U
 
°k_size
,

1311 *
≥xt
,

1312 
INT16U
 
›t
);

1314 #i‡
OS_TMR_EN
 > 0

1315 
OSTmr_Inô
();

1326 #i‡
OS_DEBUG_EN
 > 0

1327 
OSDebugInô
 ();

1330 
OSInôHookBegö
 ();

1331 
OSInôHookEnd
 ();

1333 
OSTaskCª©eHook
 (
OS_TCB
 *
±cb
);

1334 
OSTaskDñHook
 (
OS_TCB
 *
±cb
);

1336 
OSTaskIdÀHook
 ();

1338 
OSTaskSètHook
 ();

1339 
OS_STK
 *
OSTaskStkInô
 ((*
èsk
)(*
p_¨g
),

1340 *
p_¨g
,

1341 
OS_STK
 *
±os
,

1342 
INT16U
 
›t
);

1344 #i‡
OS_TASK_SW_HOOK_EN
 > 0

1345 
OSTaskSwHook
 ();

1348 
OSTCBInôHook
 (
OS_TCB
 *
±cb
);

1350 #i‡
OS_TIME_TICK_HOOK_EN
 > 0

1351 
OSTimeTickHook
 ();

1362 #i‡
OS_APP_HOOKS_EN
 > 0

1363 
Aµ_TaskCª©eHook
 (
OS_TCB
 *
±cb
);

1364 
Aµ_TaskDñHook
 (
OS_TCB
 *
±cb
);

1365 
Aµ_TaskIdÀHook
 ();

1367 
Aµ_TaskSètHook
 ();

1369 #i‡
OS_TASK_SW_HOOK_EN
 > 0

1370 
Aµ_TaskSwHook
 ();

1373 
Aµ_TCBInôHook
 (
OS_TCB
 *
±cb
);

1375 #i‡
OS_TIME_TICK_HOOK_EN
 > 0

1376 
Aµ_TimeTickHook
 ();

1389 
OSSèπHighRdy
 ();

1390 
OSI¡CtxSw
 ();

1391 
OSCtxSw
 ();

1413 #i‚de‡
OS_FLAG_EN


1416 #i‚de‡
OS_MAX_FLAGS


1419 #i‡ 
OS_MAX_FLAGS
 > 65500u

1424 #i‚de‡
OS_FLAGS_NBITS


1428 #i‚de‡
OS_FLAG_WAIT_CLR_EN


1432 #i‚de‡
OS_FLAG_ACCEPT_EN


1436 #i‚de‡
OS_FLAG_DEL_EN


1440 #i‚de‡
OS_FLAG_NAME_SIZE


1444 #i‚de‡
OS_FLAG_QUERY_EN


1455 #i‚de‡
OS_MBOX_EN


1458 #i‚de‡
OS_MBOX_ACCEPT_EN


1462 #i‚de‡
OS_MBOX_DEL_EN


1466 #i‚de‡
OS_MBOX_PEND_ABORT_EN


1470 #i‚de‡
OS_MBOX_POST_EN


1474 #i‚de‡
OS_MBOX_POST_OPT_EN


1478 #i‚de‡
OS_MBOX_QUERY_EN


1489 #i‚de‡
OS_MEM_EN


1492 #i‚de‡
OS_MAX_MEM_PART


1495 #i‡ 
OS_MAX_MEM_PART
 > 65500u

1500 #i‚de‡
OS_MEM_NAME_SIZE


1504 #i‚de‡
OS_MEM_QUERY_EN


1515 #i‚de‡
OS_MUTEX_EN


1518 #i‚de‡
OS_MUTEX_ACCEPT_EN


1522 #i‚de‡
OS_MUTEX_DEL_EN


1526 #i‚de‡
OS_MUTEX_QUERY_EN


1537 #i‚de‡
OS_Q_EN


1540 #i‚de‡
OS_MAX_QS


1543 #i‡ 
OS_MAX_QS
 > 65500u

1548 #i‚de‡
OS_Q_ACCEPT_EN


1552 #i‚de‡
OS_Q_DEL_EN


1556 #i‚de‡
OS_Q_FLUSH_EN


1560 #i‚de‡
OS_Q_PEND_ABORT_EN


1564 #i‚de‡
OS_Q_POST_EN


1568 #i‚de‡
OS_Q_POST_FRONT_EN


1572 #i‚de‡
OS_Q_POST_OPT_EN


1576 #i‚de‡
OS_Q_QUERY_EN


1587 #i‚de‡
OS_SEM_EN


1590 #i‚de‡
OS_SEM_ACCEPT_EN


1594 #i‚de‡
OS_SEM_DEL_EN


1598 #i‚de‡
OS_SEM_PEND_ABORT_EN


1602 #i‚de‡
OS_SEM_QUERY_EN


1606 #i‚de‡
OS_SEM_SET_EN


1617 #i‚de‡
OS_MAX_TASKS


1620 #i‡ 
OS_MAX_TASKS
 < 2

1624 #i‡ 
OS_MAX_TASKS
 > ((
OS_LOWEST_PRIO
 - 
OS_N_SYS_TASKS
) + 1)

1630 #i‡ 
OS_LOWEST_PRIO
 > 254

1634 #i‚de‡
OS_TASK_IDLE_STK_SIZE


1638 #i‚de‡
OS_TASK_STAT_EN


1642 #i‚de‡
OS_TASK_STAT_STK_SIZE


1646 #i‚de‡
OS_TASK_STAT_STK_CHK_EN


1650 #i‚de‡
OS_TASK_CHANGE_PRIO_EN


1654 #i‚de‡
OS_TASK_CREATE_EN


1658 #i‚de‡
OS_TASK_CREATE_EXT_EN


1662 #i‚de‡
OS_TASK_DEL_EN


1666 #i‚de‡
OS_TASK_NAME_SIZE


1670 #i‚de‡
OS_TASK_SUSPEND_EN


1674 #i‚de‡
OS_TASK_QUERY_EN


1684 #i‚de‡
OS_TICKS_PER_SEC


1688 #i‚de‡
OS_TIME_DLY_HMSM_EN


1692 #i‚de‡
OS_TIME_DLY_RESUME_EN


1696 #i‚de‡
OS_TIME_GET_SET_EN


1706 #i‚de‡
OS_TMR_EN


1708 #ñi‡ 
OS_TMR_EN
 > 0

1709 #i‡ 
OS_SEM_EN
 == 0

1714 #i‚de‡
OS_TMR_CFG_MAX


1717 #i‡
OS_TMR_CFG_MAX
 < 2

1721 #i‡
OS_TMR_CFG_MAX
 > 65500

1726 #i‚de‡
OS_TMR_CFG_WHEEL_SIZE


1729 #i‡
OS_TMR_CFG_WHEEL_SIZE
 < 2

1733 #i‡
OS_TMR_CFG_WHEEL_SIZE
 > 1024

1738 #i‚de‡
OS_TMR_CFG_NAME_SIZE


1742 #i‚de‡
OS_TMR_CFG_TICKS_PER_SEC


1746 #i‚de‡
OS_TASK_TMR_STK_SIZE


1758 #i‚de‡
OS_ARG_CHK_EN


1763 #i‚de‡
OS_CPU_HOOKS_EN


1768 #i‚de‡
OS_APP_HOOKS_EN


1773 #i‚de‡
OS_DEBUG_EN


1778 #i‚de‡
OS_LOWEST_PRIO


1783 #i‚de‡
OS_MAX_EVENTS


1786 #i‡ 
OS_MAX_EVENTS
 > 65500u

1792 #i‚de‡
OS_SCHED_LOCK_EN


1797 #i‚de‡
OS_TASK_PROFILE_EN


1802 #i‚de‡
OS_TASK_SW_HOOK_EN


1807 #i‚de‡
OS_TICK_STEP_EN


1812 #i‚de‡
OS_TIME_TICK_HOOK_EN


1822 #ifde‡
SAFETY_CRITICAL_RELEASE


1824 #i‡ 
OS_ARG_CHK_EN
 < 1

1828 #i‡ 
OS_APP_HOOKS_EN
 > 0

1832 #i‡ 
OS_DEBUG_EN
 > 0

1836 #ifde‡
CANTATA


1840 #ifde‡
OS_SCHED_LOCK_EN


1844 #ifde‡
VSC_VALIDATION_MODE


1848 #i‡ 
OS_TASK_STAT_EN
 > 0

1852 #i‡ 
OS_TICK_STEP_EN
 > 0

1856 #i‡ 
OS_FLAG_EN
 > 0

1857 #i‡ 
OS_FLAG_DEL_EN
 > 0

1862 #i‡ 
OS_MBOX_EN
 > 0

1863 #i‡ 
OS_MBOX_DEL_EN
 > 0

1868 #i‡ 
OS_MUTEX_EN
 > 0

1869 #i‡ 
OS_MUTEX_DEL_EN
 > 0

1874 #i‡ 
OS_Q_EN
 > 0

1875 #i‡ 
OS_Q_DEL_EN
 > 0

1880 #i‡ 
OS_SEM_EN
 > 0

1881 #i‡ 
OS_SEM_DEL_EN
 > 0

1886 #i‡ 
OS_TASK_EN
 > 0

1887 #i‡ 
OS_TASK_DEL_EN
 > 0

1892 #i‡ 
OS_CRITICAL_METHOD
 != 3

1898 #ifde‡
__˝lu•lus


	@uCOS-II/uC-CPU/cpu.h

38 #i‚de‡ 
CPU_CFG_MODULE_PRESENT


39 
	#CPU_CFG_MODULE_PRESENT


	)

62 
	~"..\..\APP\ö˛udes.h
"

95 
	tCPU_VOID
;

96 
	tCPU_CHAR
;

97 
	tCPU_BOOLEAN
;

98 
	tCPU_INT08U
;

99 sig√d 
	tCPU_INT08S
;

100 
	tCPU_INT16U
;

101 sig√d 
	tCPU_INT16S
;

102 
	tCPU_INT32U
;

103 sig√d 
	tCPU_INT32S
;

104 
	tCPU_FP32
;

105 
	tCPU_FP64
;

108 (*
	tCPU_FNCT_VOID
)();

109 (*
	tCPU_FNCT_PTR
 )(*);

136 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

138 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

139 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_LITTLE


	)

149 #i‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_32
)

150 
CPU_INT32U
 
	tCPU_ADDR
;

151 #ñi‡ (
CPU_CFG_ADDR_SIZE
 =
CPU_WORD_SIZE_16
)

152 
CPU_INT16U
 
	tCPU_ADDR
;

154 
CPU_INT08U
 
	tCPU_ADDR
;

158 #i‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
)

159 
CPU_INT32U
 
	tCPU_DATA
;

160 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

161 
CPU_INT16U
 
	tCPU_DATA
;

163 
CPU_INT08U
 
	tCPU_DATA
;

167 
CPU_DATA
 
	tCPU_ALIGN
;

168 
CPU_DATA
 
	tCPU_SIZE_T
;

221 
CPU_INT32U
 
	tCPU_SR
;

224 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

226 
	#CPU_CRITICAL_ENTER
(Ë{ 
˝u_§
 = 
	`CPU_SR_Save
(); 
	}

	)
}

227 
	#CPU_CRITICAL_EXIT
(Ë{ 
	`CPU_SR_Re°‹e
(
˝u_§
); }

	)

236 
CPU_I¡Dis
 ();

237 
CPU_I¡En
 ();

239 
CPU_SR
 
CPU_SR_Save
 ();

240 
CPU_SR_Re°‹e
(
CPU_SR
 
˝u_§
);

250 #i‚de‡ 
CPU_CFG_ADDR_SIZE


256 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

257 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

258 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
))

266 #i‚de‡ 
CPU_CFG_DATA_SIZE


272 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

273 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

274 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
))

283 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


288 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

289 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

298 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


304 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

305 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

306 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

	@uCOS-II/uC-CPU/cpu_core.c

42 
	#CPU_CORE_MODULE


	)

43 
	~<˝u_c‹e.h
>

88 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

89 
CPU_NameInô
();

124 
	$CPU_Inô
 ()

126 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

127 
	`CPU_NameInô
();

129 
	}
}

153 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

154 
	$CPU_NameCÃ
 ()

156 #i‡(
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

157 
CPU_SR
 
˝u_§
;

161 
	`CPU_CRITICAL_ENTER
();

162 
	`Mem_CÃ
((*)&
CPU_Name
[0],

163 (
CPU_SIZE_T
Ë
CPU_CFG_NAME_SIZE
);

164 
	`CPU_CRITICAL_EXIT
();

165 
	}
}

200 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

201 
	$CPU_NameGë
 (
CPU_CHAR
 *
≤ame
,

202 
CPU_ERR
 *
≥º
)

204 #i‡(
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

205 
CPU_SR
 
˝u_§
;

209 i‡(
≤ame
 =(
CPU_CHAR
 *)0) {

210 *
≥º
 = 
CPU_ERR_NULL_PTR
;

214 
	`CPU_CRITICAL_ENTER
();

215 
	`Så_C›y
((
CPU_CHAR
 *Ë
≤ame
,

216 (
CPU_CHAR
 *)&
CPU_Name
[0]);

217 
	`CPU_CRITICAL_EXIT
();

219 *
≥º
 = 
CPU_ERR_NONE
;

220 
	}
}

251 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

252 
	$CPU_NameSë
 (
CPU_CHAR
 *
≤ame
,

253 
CPU_ERR
 *
≥º
)

255 #i‡(
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

256 
CPU_SR
 
˝u_§
;

258 
CPU_SIZE_T
 
Àn
;

261 i‡(
≤ame
 =(
CPU_CHAR
 *)0) {

262 *
≥º
 = 
CPU_ERR_NULL_PTR
;

266 
Àn
 = 
	`Så_Lí
(
≤ame
);

267 
Àn
 +((
CPU_CHAR
)0);

268 i‡(
Àn
 <
CPU_CFG_NAME_SIZE
) {

269 
	`CPU_CRITICAL_ENTER
();

270 
	`Så_C›y
((
CPU_CHAR
 *)&
CPU_Name
[0],

271 (
CPU_CHAR
 *Ë
≤ame
);

272 
	`CPU_CRITICAL_EXIT
();

273 *
≥º
 = 
CPU_ERR_NONE
;

276 *
≥º
 = 
CPU_ERR_NAME_SIZE
;

278 
	}
}

307 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

308 
	$CPU_NameInô
 ()

310 
	`CPU_NameCÃ
();

311 
	}
}

	@uCOS-II/uC-CPU/cpu_core.h

43 #i‚de‡ 
CPU_CORE_MODULE_PRESENT


44 
	#CPU_CORE_MODULE_PRESENT


	)

71 
	#CPU_CORE_VERSION
 117u

	)

80 #ifde‡ 
CPU_CORE_MODULE


81 
	#CPU_CORE_EXT


	)

83 
	#CPU_CORE_EXT
 

	)

93 
	~<˝u.h
>

94 
	~<lib_def.h
>

95 
	~<˝u_cfg.h
>

97 
	~<lib_mem.h
>

98 
	~<lib_°r.h
>

114 
	#CPU_ERR_NONE
 0

	)

115 
	#CPU_ERR_NULL_PTR
 10

	)

117 
	#CPU_ERR_NAME_SIZE
 100

	)

133 
CPU_INT16U
 
	tCPU_ERR
;

142 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

143 
CPU_CORE_EXT
 
CPU_CHAR
 
	gCPU_Name
[
CPU_CFG_NAME_SIZE
];

154 
CPU_Inô
 ();

157 #i‡(
CPU_CFG_NAME_EN
 =
DEF_ENABLED
)

158 
CPU_NameCÃ
();

160 
CPU_NameGë
(
CPU_CHAR
 *
≤ame
,

161 
CPU_ERR
 *
≥º
);

163 
CPU_NameSë
(
CPU_CHAR
 *
≤ame
,

164 
CPU_ERR
 *
≥º
);

174 #i‚de‡ 
CPU_CFG_NAME_EN


179 #ñi‡ ((
CPU_CFG_NAME_EN
 !
DEF_ENABLED
 ) && \

180 (
	gCPU_CFG_NAME_EN
 !
DEF_DISABLED
))

187 #i‚de‡ 
CPU_CFG_NAME_SIZE


192 #ñi‡ ((
CPU_CFG_NAME_SIZE
 < 1) || \

193 (
CPU_CFG_NAME_SIZE
 > 
DEF_INT_08U_MAX_VAL
))

	@uCOS-II/uC-CPU/cpu_def.h

63 
	#CPU_WORD_SIZE_08
 1

	)

64 
	#CPU_WORD_SIZE_16
 2

	)

65 
	#CPU_WORD_SIZE_32
 4

	)

66 
	#CPU_WORD_SIZE_64
 8

	)

70 
	#CPU_ENDIAN_TYPE_NONE
 0

	)

71 
	#CPU_ENDIAN_TYPE_BIG
 1

	)

73 
	#CPU_ENDIAN_TYPE_LITTLE
 2

	)

129 
	#CPU_CRITICAL_METHOD_NONE
 0

	)

130 
	#CPU_CRITICAL_METHOD_INT_DIS_EN
 1

	)

131 
	#CPU_CRITICAL_METHOD_STATUS_STK
 2

	)

132 
	#CPU_CRITICAL_METHOD_STATUS_LOCAL
 3

	)

	@uCOS-II/uC-LIB/lib_def.h

57 #i‚de‡ 
LIB_DEF_MODULE_PRESENT


58 
	#LIB_DEF_MODULE_PRESENT


	)

85 
	#LIB_VERSION
 124u

	)

112 
	~<˝u.h
>

123 
	#DEF_DISABLED
 0

	)

124 
	#DEF_ENABLED
 1

	)

126 
	#DEF_FALSE
 0

	)

127 
	#DEF_TRUE
 1

	)

129 
	#DEF_NO
 0

	)

130 
	#DEF_YES
 1

	)

132 
	#DEF_OFF
 0

	)

133 
	#DEF_ON
 1

	)

135 
	#DEF_CLR
 0

	)

136 
	#DEF_SET
 1

	)

138 
	#DEF_ACTIVE
 0

	)

139 
	#DEF_INACTIVE
 1

	)

141 
	#DEF_FAIL
 0

	)

142 
	#DEF_OK
 1

	)

146 
	#DEF_BIT_NONE
 0x00

	)

148 
	#DEF_BIT_00
 0x01

	)

149 
	#DEF_BIT_01
 0x02

	)

150 
	#DEF_BIT_02
 0x04

	)

151 
	#DEF_BIT_03
 0x08

	)

152 
	#DEF_BIT_04
 0x10

	)

153 
	#DEF_BIT_05
 0x20

	)

154 
	#DEF_BIT_06
 0x40

	)

155 
	#DEF_BIT_07
 0x80

	)

157 
	#DEF_BIT_08
 0x0100

	)

158 
	#DEF_BIT_09
 0x0200

	)

159 
	#DEF_BIT_10
 0x0400

	)

160 
	#DEF_BIT_11
 0x0800

	)

161 
	#DEF_BIT_12
 0x1000

	)

162 
	#DEF_BIT_13
 0x2000

	)

163 
	#DEF_BIT_14
 0x4000

	)

164 
	#DEF_BIT_15
 0x8000

	)

166 
	#DEF_BIT_16
 0x00010000

	)

167 
	#DEF_BIT_17
 0x00020000

	)

168 
	#DEF_BIT_18
 0x00040000

	)

169 
	#DEF_BIT_19
 0x00080000

	)

170 
	#DEF_BIT_20
 0x00100000

	)

171 
	#DEF_BIT_21
 0x00200000

	)

172 
	#DEF_BIT_22
 0x00400000

	)

173 
	#DEF_BIT_23
 0x00800000

	)

175 
	#DEF_BIT_24
 0x01000000

	)

176 
	#DEF_BIT_25
 0x02000000

	)

177 
	#DEF_BIT_26
 0x04000000

	)

178 
	#DEF_BIT_27
 0x08000000

	)

179 
	#DEF_BIT_28
 0x10000000

	)

180 
	#DEF_BIT_29
 0x20000000

	)

181 
	#DEF_BIT_30
 0x40000000

	)

182 
	#DEF_BIT_31
 0x80000000

	)

185 
	#DEF_OCTET_NBR_BITS
 8

	)

186 
	#DEF_OCTET_MASK
 0xFF

	)

188 
	#DEF_NIBBLE_NBR_BITS
 4

	)

189 
	#DEF_NIBBLE_MASK
 0x0F

	)

194 
	#DEF_INT_08_NBR_BITS
 8

	)

195 
	#DEF_INT_08_MASK
 0xFF

	)

197 
	#DEF_INT_08U_MIN_VAL
 0u

	)

198 
	#DEF_INT_08U_MAX_VAL
 255u

	)

200 
	#DEF_INT_08S_MIN_VAL
 -128

	)

201 
	#DEF_INT_08S_MAX_VAL
 127

	)

203 
	#DEF_INT_08S_MIN_VAL_ONES_CPL
 -127

	)

204 
	#DEF_INT_08S_MAX_VAL_ONES_CPL
 127

	)

207 
	#DEF_INT_16_NBR_BITS
 16

	)

208 
	#DEF_INT_16_MASK
 0xFFFF

	)

210 
	#DEF_INT_16U_MIN_VAL
 0u

	)

211 
	#DEF_INT_16U_MAX_VAL
 65535u

	)

213 
	#DEF_INT_16S_MIN_VAL
 -32768

	)

214 
	#DEF_INT_16S_MAX_VAL
 32767

	)

216 
	#DEF_INT_16S_MIN_VAL_ONES_CPL
 -32767

	)

217 
	#DEF_INT_16S_MAX_VAL_ONES_CPL
 32767

	)

220 
	#DEF_INT_32_NBR_BITS
 32

	)

221 
	#DEF_INT_32_MASK
 0xFFFFFFFF

	)

223 
	#DEF_INT_32U_MIN_VAL
 0u

	)

224 
	#DEF_INT_32U_MAX_VAL
 4294967295u

	)

226 
	#DEF_INT_32S_MIN_VAL
 -2147483648

	)

227 
	#DEF_INT_32S_MAX_VAL
 2147483647

	)

229 
	#DEF_INT_32S_MIN_VAL_ONES_CPL
 -2147483647

	)

230 
	#DEF_INT_32S_MAX_VAL_ONES_CPL
 2147483647

	)

233 
	#DEF_INT_64_NBR_BITS
 64

	)

234 
	#DEF_INT_64_MASK
 0xFFFFFFFFFFFFFFFF

	)

236 
	#DEF_INT_64U_MIN_VAL
 0u

	)

237 
	#DEF_INT_64U_MAX_VAL
 18446744073709551615u

	)

239 
	#DEF_INT_64S_MIN_VAL
 -9223372036854775808

	)

240 
	#DEF_INT_64S_MAX_VAL
 9223372036854775807

	)

242 
	#DEF_INT_64S_MIN_VAL_ONES_CPL
 -9223372036854775807

	)

243 
	#DEF_INT_64S_MAX_VAL_ONES_CPL
 9223372036854775807

	)

248 
	#DEF_INT_CPU_NBR_BITS
 (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
)

	)

251 #i‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_08_NBR_BITS
)

253 
	#DEF_INT_CPU_MASK
 
DEF_INT_08_MASK


	)

255 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_08U_MIN_VAL


	)

256 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_08U_MAX_VAL


	)

258 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_08S_MIN_VAL


	)

259 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_08S_MAX_VAL


	)

261 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_08S_MIN_VAL_ONES_CPL


	)

262 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

265 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_16_NBR_BITS
)

267 
	#DEF_INT_CPU_MASK
 
DEF_INT_16_MASK


	)

269 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_16U_MIN_VAL


	)

270 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_16U_MAX_VAL


	)

272 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_16S_MIN_VAL


	)

273 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_16S_MAX_VAL


	)

275 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_16S_MIN_VAL_ONES_CPL


	)

276 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

279 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_32_NBR_BITS
)

281 
	#DEF_INT_CPU_MASK
 
DEF_INT_32_MASK


	)

283 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_32U_MIN_VAL


	)

284 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_32U_MAX_VAL


	)

286 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_32S_MIN_VAL


	)

287 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_32S_MAX_VAL


	)

289 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_32S_MIN_VAL_ONES_CPL


	)

290 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

293 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_64_NBR_BITS
)

295 
	#DEF_INT_CPU_MASK
 
DEF_INT_64_MASK


	)

297 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_64U_MIN_VAL


	)

298 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_64U_MAX_VAL


	)

300 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_64S_MIN_VAL


	)

301 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_64S_MAX_VAL


	)

303 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_64S_MIN_VAL_ONES_CPL


	)

304 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

317 
	#DEF_TIME_NBR_HR_PER_DAY
 24uL

	)

319 
	#DEF_TIME_NBR_MIN_PER_HR
 60uL

	)

320 
	#DEF_TIME_NBR_MIN_PER_DAY
 (
DEF_TIME_NBR_MIN_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
)

	)

322 
	#DEF_TIME_NBR_SEC_PER_MIN
 60uL

	)

323 
	#DEF_TIME_NBR_SEC_PER_HR
 (
DEF_TIME_NBR_SEC_PER_MIN
 * 
DEF_TIME_NBR_MIN_PER_HR
)

	)

324 
	#DEF_TIME_NBR_SEC_PER_DAY
 (
DEF_TIME_NBR_SEC_PER_HR
 * 
DEF_TIME_NBR_HR_PER_DAY
)

	)

326 
	#DEF_TIME_NBR_mS_PER_SEC
 1000uL

	)

327 
	#DEF_TIME_NBR_uS_PER_SEC
 1000000uL

	)

328 
	#DEF_TIME_NBR_nS_PER_SEC
 1000000000uL

	)

355 
	#DEF_BIT
(
bô
Ë(1u << (bô))

	)

378 
	#DEF_BIT_MASK
(
bô_mask
, 
bô_shi·
Ë((bô_maskË<< (bô_shi·))

	)

401 
	#DEF_BIT_FIELD
(
bô_fõld
, 
bô_shi·
Ë((((bô_fõldË>
DEF_INT_CPU_NBR_BITS
Ë? (
DEF_INT_CPU_U_MAX_VAL
) \

402 : (
	`DEF_BIT
(
bô_fõld
) - 1)) \

403 << (
bô_shi·
))

	)

425 
	#DEF_BIT_SET
(
vÆ
, 
mask
Ë{ (vÆË|(mask); }

	)

446 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë{ (vÆË&~(mask); }

	)

470 
	#DEF_BIT_IS_SET
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=(mask)Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

493 
	#DEF_BIT_IS_CLR
(
vÆ
, 
mask
Ë(((vÆË& (mask)Ë? (
DEF_NO
 ) : (
DEF_YES
))

	)

517 
	#DEF_BIT_IS_SET_ANY
(
vÆ
, 
mask
Ë(((vÆË& (mask)Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

538 
	#DEF_BIT_IS_CLR_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë!(mask)Ë? (
DEF_YES
Ë: (
DEF_NO
 ))

	)

566 
	#DEF_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

585 
	#DEF_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

605 
	#DEF_ABS
(
a
Ë((◊Ë< 0Ë? (-◊)Ë: (a))

	)

	@uCOS-II/uC-LIB/lib_mem.c

57 
	#LIB_MEM_MODULE


	)

58 
	~<lib_mem.h
>

134 
	$Mem_CÃ
 (*
pmem
,

135 
CPU_SIZE_T
 
size
)

137 
	`Mem_Së
((*)
pmem
,

138 (
CPU_INT08U
)0,

139 (
CPU_SIZE_T
)
size
);

140 
	}
}

176 
	$Mem_Së
 (*
pmem
,

177 
CPU_INT08U
 
d©a_vÆ
,

178 
CPU_SIZE_T
 
size
)

180 
CPU_SIZE_T
 
size_ªm
;

181 
CPU_ALIGN
 
d©a_Æign
;

182 
CPU_ALIGN
 *
pmem_Æign
;

183 
CPU_INT08U
 *
pmem_08
;

184 
CPU_INT08U
 
mem_Æign_modulo
;

185 
CPU_INT08U
 
i
;

188 i‡(
size
 < 1) {

191 i‡(
pmem
 == (*)0) {

196 
d©a_Æign
 = 0;

197 
i
 = 0; i < (
CPU_ALIGN
); i++) {

198 
d©a_Æign
 <<
DEF_OCTET_NBR_BITS
;

199 
d©a_Æign
 |(
CPU_ALIGN
)
d©a_vÆ
;

202 
size_ªm
 = (
CPU_SIZE_T
)
size
;

203 
mem_Æign_modulo
 = (
CPU_INT08U
)((
CPU_ADDR
)
pmem
 % (
CPU_ALIGN
));

205 
pmem_08
 = (
CPU_INT08U
 *)
pmem
;

206 i‡(
mem_Æign_modulo
 != 0) {

207 
i
 = 
mem_Æign_modulo
;

208 (
size_ªm
 > 0) &&

209 (
i
 < (
CPU_ALIGN
 ))) {

210 *
pmem_08
++ = 
d©a_vÆ
;

211 
size_ªm
 -(
CPU_INT08U
);

212 
i
++;

216 
pmem_Æign
 = (
CPU_ALIGN
 *)
pmem_08
;

217 
size_ªm
 >(
CPU_ALIGN
)) {

218 *
pmem_Æign
++ = 
d©a_Æign
;

219 
size_ªm
 -(
CPU_ALIGN
);

222 
pmem_08
 = (
CPU_INT08U
 *)
pmem_Æign
;

223 
size_ªm
 > 0) {

224 *
pmem_08
++ = 
d©a_vÆ
;

225 
size_ªm
 -(
CPU_INT08U
);

227 
	}
}

265 #i‡((!
deföed
(
uC_CFG_OPTIMIZE_ASM_EN
)) || \

266 ((
deföed
(
uC_CFG_OPTIMIZE_ASM_EN
)) && \

267 (
	guC_CFG_OPTIMIZE_ASM_EN
 !
DEF_ENABLED
)))

268 
	$Mem_C›y
 (*
pde°
,

269 *
p§c
,

270 
CPU_SIZE_T
 
size
)

272 
CPU_SIZE_T
 
size_ªm
;

273 
CPU_ALIGN
 *
pmem_Æign_de°
;

274 
CPU_ALIGN
 *
pmem_Æign_§c
;

275 
CPU_INT08U
 *
pmem_08_de°
;

276 
CPU_INT08U
 *
pmem_08_§c
;

277 
CPU_INT08U
 
i
;

278 
CPU_INT08U
 
mem_Æign_modulo_de°
;

279 
CPU_INT08U
 
mem_Æign_modulo_§c
;

280 
CPU_BOOLEAN
 
mem_Æig√d
;

283 i‡(
size
 < 1) {

286 i‡(
pde°
 == (*)0) {

289 i‡(
p§c
 == (*)0) {

294 
size_ªm
 = (
CPU_SIZE_T
 )
size
;

296 
pmem_08_de°
 = (
CPU_INT08U
 *)
pde°
;

297 
pmem_08_§c
 = (
CPU_INT08U
 *)
p§c
;

299 
mem_Æign_modulo_de°
 = (
CPU_INT08U
 )((
CPU_ADDR
)
pmem_08_de°
 % (
CPU_ALIGN
));

300 
mem_Æign_modulo_§c
 = (
CPU_INT08U
 )((
CPU_ADDR
)
pmem_08_§c
 % (
CPU_ALIGN
));

302 
mem_Æig√d
 = (
mem_Æign_modulo_de°
 =
mem_Æign_modulo_§c
Ë? 
DEF_YES
 : 
DEF_NO
;

304 i‡(
mem_Æig√d
 =
DEF_YES
) {

306 i‡(
mem_Æign_modulo_de°
 != 0) {

307 
i
 = 
mem_Æign_modulo_de°
;

308 (
size_ªm
 > 0) &&

309 (
i
 < (
CPU_ALIGN
 ))) {

310 *
pmem_08_de°
++ = *
pmem_08_§c
++;

311 
size_ªm
 -(
CPU_INT08U
);

312 
i
++;

316 
pmem_Æign_de°
 = (
CPU_ALIGN
 *)
pmem_08_de°
;

317 
pmem_Æign_§c
 = (
CPU_ALIGN
 *)
pmem_08_§c
;

318 
size_ªm
 >(
CPU_ALIGN
)) {

319 *
pmem_Æign_de°
++ = *
pmem_Æign_§c
++;

320 
size_ªm
 -(
CPU_ALIGN
);

323 
pmem_08_de°
 = (
CPU_INT08U
 *)
pmem_Æign_de°
;

324 
pmem_08_§c
 = (
CPU_INT08U
 *)
pmem_Æign_§c
;

327 
size_ªm
 > 0) {

328 *
pmem_08_de°
++ = *
pmem_08_§c
++;

329 
size_ªm
 -(
CPU_INT08U
);

331 
	}
}

376 
CPU_BOOLEAN
 
	$Mem_Cmp
 (*
p1_mem
,

377 *
p2_mem
,

378 
CPU_SIZE_T
 
size
)

380 
CPU_SIZE_T
 
size_ªm
;

381 
CPU_ALIGN
 *
p1_mem_Æign
;

382 
CPU_ALIGN
 *
p2_mem_Æign
;

383 
CPU_INT08U
 *
p1_mem_08
;

384 
CPU_INT08U
 *
p2_mem_08
;

385 
CPU_INT08U
 
i
;

386 
CPU_INT08U
 
mem_Æign_modulo_1
;

387 
CPU_INT08U
 
mem_Æign_modulo_2
;

388 
CPU_BOOLEAN
 
mem_Æig√d
;

389 
CPU_BOOLEAN
 
mem_cmp
;

392 i‡(
size
 < 1) {

393  (
DEF_YES
);

395 i‡(
p1_mem
 == (*)0) {

396  (
DEF_NO
);

398 i‡(
p2_mem
 == (*)0) {

399  (
DEF_NO
);

403 
mem_cmp
 = 
DEF_YES
;

404 
size_ªm
 = 
size
;

406 
p1_mem_08
 = (
CPU_INT08U
 *)
p1_mem
 + 
size
;

407 
p2_mem_08
 = (
CPU_INT08U
 *)
p2_mem
 + 
size
;

409 
mem_Æign_modulo_1
 = (
CPU_INT08U
 )((
CPU_ADDR
)
p1_mem_08
 % (
CPU_ALIGN
));

410 
mem_Æign_modulo_2
 = (
CPU_INT08U
 )((
CPU_ADDR
)
p2_mem_08
 % (
CPU_ALIGN
));

412 
mem_Æig√d
 = (
mem_Æign_modulo_1
 =
mem_Æign_modulo_2
Ë? 
DEF_YES
 : 
DEF_NO
;

414 i‡(
mem_Æig√d
 =
DEF_YES
) {

416 i‡(
mem_Æign_modulo_1
 != 0) {

417 
i
 = 
mem_Æign_modulo_1
;

418 (
mem_cmp
 =
DEF_YES
) &&

419 (
size_ªm
 > 0) &&

420 (
i
 > 0)) {

421 
p1_mem_08
--;

422 
p2_mem_08
--;

423 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

424 
mem_cmp
 = 
DEF_NO
;

426 
size_ªm
 -(
CPU_INT08U
);

427 
i
--;

431 i‡(
mem_cmp
 =
DEF_YES
) {

432 
p1_mem_Æign
 = (
CPU_ALIGN
 *)
p1_mem_08
;

433 
p2_mem_Æign
 = (
CPU_ALIGN
 *)
p2_mem_08
;

435 (
mem_cmp
 =
DEF_YES
) &&

436 (
size_ªm
 >(
CPU_ALIGN
))) {

437 
p1_mem_Æign
--;

438 
p2_mem_Æign
--;

439 i‡(*
p1_mem_Æign
 !*
p2_mem_Æign
) {

440 
mem_cmp
 = 
DEF_NO
;

442 
size_ªm
 -(
CPU_ALIGN
);

445 
p1_mem_08
 = (
CPU_INT08U
 *)
p1_mem_Æign
;

446 
p2_mem_08
 = (
CPU_INT08U
 *)
p2_mem_Æign
;

450 (
mem_cmp
 =
DEF_YES
) &&

451 (
size_ªm
 > 0)) {

452 
p1_mem_08
--;

453 
p2_mem_08
--;

454 i‡(*
p1_mem_08
 !*
p2_mem_08
) {

455 
mem_cmp
 = 
DEF_NO
;

457 
size_ªm
 -(
CPU_INT08U
);

460  (
mem_cmp
);

461 
	}
}

	@uCOS-II/uC-LIB/lib_mem.h

57 #i‚de‡ 
LIB_MEM_MODULE_PRESENT


58 
	#LIB_MEM_MODULE_PRESENT


	)

88 
	~<˝u.h
>

89 
	~<lib_def.h
>

90 
	~<≠p_cfg.h
>

99 #ifde‡ 
LIB_MEM_MODULE


100 
	#LIB_MEM_EXT


	)

102 
	#LIB_MEM_EXT
 

	)

208 
	#MEM_VAL_GET_INT08U_BIG
(
addr
Ë(((
CPU_INT08U
)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0 * 
DEF_OCTET_NBR_BITS
))

	)

210 
	#MEM_VAL_GET_INT16U_BIG
(
addr
Ë((((
CPU_INT16U
)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (1 * 
DEF_OCTET_NBR_BITS
)) + \

211 (((
CPU_INT16U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (0 * 
DEF_OCTET_NBR_BITS
)))

	)

213 
	#MEM_VAL_GET_INT32U_BIG
(
addr
Ë((((
CPU_INT32U
)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (3 * 
DEF_OCTET_NBR_BITS
)) + \

214 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (2 * 
DEF_OCTET_NBR_BITS
)) + \

215 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (1 * 
DEF_OCTET_NBR_BITS
)) + \

216 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (0 * 
DEF_OCTET_NBR_BITS
)))

	)

220 
	#MEM_VAL_GET_INT08U_LITTLE
(
addr
Ë(((
CPU_INT08U
)(*(((CPU_INT08U *)◊ddr)Ë+ 0))Ë<< (0 * 
DEF_OCTET_NBR_BITS
))

	)

222 
	#MEM_VAL_GET_INT16U_LITTLE
(
addr
Ë((((
CPU_INT16U
)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0 * 
DEF_OCTET_NBR_BITS
)) + \

223 (((
CPU_INT16U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1 * 
DEF_OCTET_NBR_BITS
)))

	)

225 
	#MEM_VAL_GET_INT32U_LITTLE
(
addr
Ë((((
CPU_INT32U
)(*(((
CPU_INT08U
 *)◊ddr)Ë+ 0))Ë<< (0 * 
DEF_OCTET_NBR_BITS
)) + \

226 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 1))Ë<< (1 * 
DEF_OCTET_NBR_BITS
)) + \

227 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 2))Ë<< (2 * 
DEF_OCTET_NBR_BITS
)) + \

228 (((
CPU_INT32U
)(*(((
CPU_INT08U
 *)(
addr
)Ë+ 3))Ë<< (3 * 
DEF_OCTET_NBR_BITS
)))

	)

232 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

234 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_BIG
◊ddr)

	)

235 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_BIG
◊ddr)

	)

236 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_BIG
◊ddr)

	)

238 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

240 
	#MEM_VAL_GET_INT08U
(
addr
Ë
	`MEM_VAL_GET_INT08U_LITTLE
◊ddr)

	)

241 
	#MEM_VAL_GET_INT16U
(
addr
Ë
	`MEM_VAL_GET_INT16U_LITTLE
◊ddr)

	)

242 
	#MEM_VAL_GET_INT32U
(
addr
Ë
	`MEM_VAL_GET_INT32U_LITTLE
◊ddr)

	)

301 
	#MEM_VAL_SET_INT08U_BIG
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& 0xFFË>> (0 * 
DEF_OCTET_NBR_BITS
))); }

	)

303 
	#MEM_VAL_SET_INT16U_BIG
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& 0xFF00Ë>> (1 * 
DEF_OCTET_NBR_BITS
))); \

304 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& 0x00FFË>> (0 * 
DEF_OCTET_NBR_BITS
))); }

	)

306 
	#MEM_VAL_SET_INT32U_BIG
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& 0xFF000000Ë>> (3 * 
DEF_OCTET_NBR_BITS
))); \

307 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0x00FF0000Ë>> (2 * 
DEF_OCTET_NBR_BITS
))); \

308 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0x0000FF00Ë>> (1 * 
DEF_OCTET_NBR_BITS
))); \

309 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0x000000FFË>> (0 * 
DEF_OCTET_NBR_BITS
))); }

	)

313 
	#MEM_VAL_SET_INT08U_LITTLE
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((CPU_INT08U)(vÆ)Ë& 0xFFË>> (0 * 
DEF_OCTET_NBR_BITS
))); }

	)

315 
	#MEM_VAL_SET_INT16U_LITTLE
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT16U
)(vÆ)Ë& 0x00FFË>> (0 * 
DEF_OCTET_NBR_BITS
))); \

316 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT16U
)(
vÆ
)Ë& 0xFF00Ë>> (1 * 
DEF_OCTET_NBR_BITS
))); }

	)

318 
	#MEM_VAL_SET_INT32U_LITTLE
(
addr
, 
vÆ
Ë{ (*(((
CPU_INT08U
 *)◊ddr)Ë+ 0)Ë((CPU_INT08U)((((
CPU_INT32U
)(vÆ)Ë& 0x000000FFË>> (0 * 
DEF_OCTET_NBR_BITS
))); \

319 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 1)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0x0000FF00Ë>> (1 * 
DEF_OCTET_NBR_BITS
))); \

320 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 2)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0x00FF0000Ë>> (2 * 
DEF_OCTET_NBR_BITS
))); \

321 (*(((
CPU_INT08U
 *)(
addr
)Ë+ 3)Ë((CPU_INT08U)((((
CPU_INT32U
)(
vÆ
)Ë& 0xFF000000Ë>> (3 * 
DEF_OCTET_NBR_BITS
))); }

	)

325 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

327 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_BIG
◊ddr, vÆ)

	)

328 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_BIG
◊ddr, vÆ)

	)

329 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_BIG
◊ddr, vÆ)

	)

331 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

333 
	#MEM_VAL_SET_INT08U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT08U_LITTLE
◊ddr, vÆ)

	)

334 
	#MEM_VAL_SET_INT16U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT16U_LITTLE
◊ddr, vÆ)

	)

335 
	#MEM_VAL_SET_INT32U
(
addr
, 
vÆ
Ë
	`MEM_VAL_SET_INT32U_LITTLE
◊ddr, vÆ)

	)

399 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

402 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); }

	)

404 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

405 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); }

	)

407 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

408 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

409 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

410 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); }

	)

414 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); }

	)

416 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

417 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); }

	)

419 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

420 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

421 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

422 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); }

	)

426 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

427 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

428 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

433 #ñi‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_LITTLE
)

436 
	#MEM_VAL_COPY_GET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); }

	)

438 
	#MEM_VAL_COPY_GET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \

439 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); }

	)

441 
	#MEM_VAL_COPY_GET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \

442 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

443 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

444 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 0)); }

	)

448 
	#MEM_VAL_COPY_GET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); }

	)

450 
	#MEM_VAL_COPY_GET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

451 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); }

	)

453 
	#MEM_VAL_COPY_GET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

454 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

455 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

456 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); }

	)

460 
	#MEM_VAL_COPY_GET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

461 
	#MEM_VAL_COPY_GET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

462 
	#MEM_VAL_COPY_GET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

523 
	#MEM_VAL_COPY_SET_INT08U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_BIG
◊ddr_de°,áddr_§c)

	)

524 
	#MEM_VAL_COPY_SET_INT16U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_BIG
◊ddr_de°,áddr_§c)

	)

525 
	#MEM_VAL_COPY_SET_INT32U_BIG
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_BIG
◊ddr_de°,áddr_§c)

	)

527 
	#MEM_VAL_COPY_SET_INT08U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U_LITTLE
◊ddr_de°,áddr_§c)

	)

528 
	#MEM_VAL_COPY_SET_INT16U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U_LITTLE
◊ddr_de°,áddr_§c)

	)

529 
	#MEM_VAL_COPY_SET_INT32U_LITTLE
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U_LITTLE
◊ddr_de°,áddr_§c)

	)

532 
	#MEM_VAL_COPY_SET_INT08U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT08U
◊ddr_de°,áddr_§c)

	)

533 
	#MEM_VAL_COPY_SET_INT16U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT16U
◊ddr_de°,áddr_§c)

	)

534 
	#MEM_VAL_COPY_SET_INT32U
(
addr_de°
, 
addr_§c
Ë
	`MEM_VAL_COPY_GET_INT32U
◊ddr_de°,áddr_§c)

	)

566 
	#MEM_VAL_COPY_08
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)◊ddr_de°)Ë+ 0)Ë(*(((CPU_INT08U *)◊ddr_§c)Ë+ 0)); }

	)

568 
	#MEM_VAL_COPY_16
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

569 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 1)); }

	)

571 
	#MEM_VAL_COPY_32
(
addr_de°
, 
addr_§c
Ë{ (*(((
CPU_INT08U
 *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \

572 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 1)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 1)); \

573 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 2)Ë(*(((CPU_INT08U *)(
addr_§c
)) + 2)); \

574 (*(((
CPU_INT08U
 *)(
addr_de°
)Ë+ 3)Ë(*(((CPU_INT08U *)(
addr_§c
)Ë+ 3)); }

	)

584 
Mem_CÃ
 (*
pmem
,

585 
CPU_SIZE_T
 
size
);

587 
Mem_Së
 (*
pmem
,

588 
CPU_INT08U
 
d©a_vÆ
,

589 
CPU_SIZE_T
 
size
);

591 
Mem_C›y
(*
pde°
,

592 *
p§c
,

593 
CPU_SIZE_T
 
size
);

595 
CPU_BOOLEAN
 
Mem_Cmp
 (*
p1_mem
,

596 *
p2_mem
,

597 
CPU_SIZE_T
 
size
);

	@uCOS-II/uC-LIB/lib_str.c

58 
	#LIB_STR_MODULE


	)

59 
	~<lib_°r.h
>

140 
CPU_SIZE_T
 
	$Så_Lí
 (
CPU_CHAR
 *
p°r
)

142 
CPU_SIZE_T
 
Àn
;

145 
Àn
 = 0;

146 –
p°r
 !(
CPU_CHAR
 *)0) &&

147 (*
p°r
 !(
CPU_CHAR
 )0)) {

148 
Àn
++;

149 
p°r
++;

152  (
Àn
);

153 
	}
}

194 
CPU_CHAR
 *
	$Så_C›y
 (
CPU_CHAR
 *
pde°
,

195 
CPU_CHAR
 *
p§c
)

197 
CPU_CHAR
 *
p°r
;

198 
CPU_CHAR
 *
p°r_√xt
;

201 i‡(
pde°
 =(
CPU_CHAR
 *)0) {

202  ((
CPU_CHAR
 *)0);

204 i‡(
p§c
 =(
CPU_CHAR
 *)0) {

205  ((
CPU_CHAR
 *)0);

209 
p°r
 = 
pde°
;

210 
p°r_√xt
 = 
p°r
;

211 
p°r_√xt
++;

212 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

213 –
p§c
 !(
CPU_CHAR
 *)0) &&

214 (*
p§c
 !(
CPU_CHAR
 )0)) {

215 *
p°r
 = *
p§c
;

216 
p°r
++;

217 
p°r_√xt
++;

218 
p§c
++;

221 *
p°r
 = (
CPU_CHAR
)0;

224  (
pde°
);

225 
	}
}

273 
CPU_CHAR
 *
	$Så_C›y_N
 (
CPU_CHAR
 *
pde°
,

274 
CPU_CHAR
 *
p§c
,

275 
CPU_SIZE_T
 
Àn_max
)

277 
CPU_CHAR
 *
p°r
;

278 
CPU_CHAR
 *
p°r_√xt
;

279 
CPU_SIZE_T
 
Àn_c›y
;

282 i‡(
pde°
 =(
CPU_CHAR
 *)0) {

283  ((
CPU_CHAR
 *)0);

285 i‡(
p§c
 =(
CPU_CHAR
 *)0) {

286  ((
CPU_CHAR
 *)0);

289 i‡(
Àn_max
 =(
CPU_SIZE_T
)0) {

290  ((
CPU_CHAR
 *)0);

294 
p°r
 = 
pde°
;

295 
p°r_√xt
 = 
p°r
;

296 
p°r_√xt
++;

297 
Àn_c›y
 = 0;

299 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

300 –
p§c
 !(
CPU_CHAR
 *)0) &&

301 (*
p§c
 !(
CPU_CHAR
 )0) &&

302 –
Àn_c›y
 < (
CPU_SIZE_T
)
Àn_max
)) {

303 *
p°r
 = *
p§c
;

304 
p°r
++;

305 
p°r_√xt
++;

306 
p§c
++;

307 
Àn_c›y
++;

310 *
p°r
 = (
CPU_CHAR
)0;

313  (
pde°
);

314 
	}
}

358 
CPU_CHAR
 *
	$Så_C©
 (
CPU_CHAR
 *
pde°
,

359 
CPU_CHAR
 *
p°r_ˇt
)

361 
CPU_CHAR
 *
p°r
;

362 
CPU_CHAR
 *
p°r_√xt
;

365 i‡(
pde°
 =(
CPU_CHAR
 *)0) {

366  ((
CPU_CHAR
 *)0);

368 i‡(
p°r_ˇt
 =(
CPU_CHAR
 *)0) {

369  ((
CPU_CHAR
 *)0);

373 
p°r
 = 
pde°
;

374 –
p°r
 !(
CPU_CHAR
 *)0) &&

375 (*
p°r
 !(
CPU_CHAR
 )0)) {

376 
p°r
++;

378 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

379  ((
CPU_CHAR
 *)0);

382 
p°r_√xt
 = 
p°r
;

383 
p°r_√xt
++;

384 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

385 –
p°r_ˇt
 !(
CPU_CHAR
 *)0) &&

386 (*
p°r_ˇt
 !(
CPU_CHAR
 )0)) {

387 *
p°r
 = *
p°r_ˇt
;

388 
p°r
++;

389 
p°r_√xt
++;

390 
p°r_ˇt
++;

393 *
p°r
 = (
CPU_CHAR
)0;

396  (
pde°
);

397 
	}
}

448 
CPU_CHAR
 *
	$Så_C©_N
 (
CPU_CHAR
 *
pde°
,

449 
CPU_CHAR
 *
p°r_ˇt
,

450 
CPU_SIZE_T
 
Àn_max
)

452 
CPU_CHAR
 *
p°r
;

453 
CPU_CHAR
 *
p°r_√xt
;

454 
CPU_SIZE_T
 
Àn_ˇt
;

457 i‡(
pde°
 =(
CPU_CHAR
 *)0) {

458  ((
CPU_CHAR
 *)0);

460 i‡(
p°r_ˇt
 =(
CPU_CHAR
 *)0) {

461  ((
CPU_CHAR
 *)0);

464 i‡(
Àn_max
 =(
CPU_SIZE_T
)0) {

465  ((
CPU_CHAR
 *)0);

469 
p°r
 = 
pde°
;

470 –
p°r
 !(
CPU_CHAR
 *)0) &&

471 (*
p°r
 !(
CPU_CHAR
 )0)) {

472 
p°r
++;

474 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

475  ((
CPU_CHAR
 *)0);

478 
p°r_√xt
 = 
p°r
;

479 
p°r_√xt
++;

480 
Àn_ˇt
 = 0;

482 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

483 –
p°r_ˇt
 !(
CPU_CHAR
 *)0) &&

484 (*
p°r_ˇt
 !(
CPU_CHAR
 )0) &&

485 –
Àn_ˇt
 < (
CPU_SIZE_T
)
Àn_max
)) {

486 *
p°r
 = *
p°r_ˇt
;

487 
p°r
++;

488 
p°r_√xt
++;

489 
p°r_ˇt
++;

490 
Àn_ˇt
++;

493 *
p°r
 = (
CPU_CHAR
)0;

496  (
pde°
);

497 
	}
}

560 
CPU_INT16S
 
	$Så_Cmp
 (
CPU_CHAR
 *
p1_°r
,

561 
CPU_CHAR
 *
p2_°r
)

563 
CPU_CHAR
 *
p1_°r_√xt
;

564 
CPU_CHAR
 *
p2_°r_√xt
;

565 
CPU_INT16S
 
cmp_vÆ
;

568 i‡(
p1_°r
 =(
CPU_CHAR
 *)0) {

569 i‡(
p2_°r
 =(
CPU_CHAR
 *)0) {

570  ((
CPU_INT16S
)0);

572 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r
);

573  (
cmp_vÆ
);

575 i‡(
p2_°r
 =(
CPU_CHAR
 *)0) {

576 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
);

577  (
cmp_vÆ
);

581 
p1_°r_√xt
 = 
p1_°r
;

582 
p2_°r_√xt
 = 
p2_°r
;

583 
p1_°r_√xt
++;

584 
p2_°r_√xt
++;

585 (*
p1_°r
 =*
p2_°r
) &&

586 (*
p1_°r
 !(
CPU_CHAR
 )0) &&

587 –
p1_°r_√xt
 !(
CPU_CHAR
 *)0) &&

588 –
p2_°r_√xt
 !(
CPU_CHAR
 *)0)) {

589 
p1_°r_√xt
++;

590 
p2_°r_√xt
++;

591 
p1_°r
++;

592 
p2_°r
++;

596 i‡(*
p1_°r
 !*
p2_°r
) {

597 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
Ë- (CPU_INT16S)(*
p2_°r
);

599 } i‡(*
p1_°r
 =(
CPU_CHAR
)0) {

600 
cmp_vÆ
 = 0;

603 i‡(
p1_°r_√xt
 =(
CPU_CHAR
 *)0) {

604 i‡(
p2_°r_√xt
 =(
CPU_CHAR
 *)0) {

605 
cmp_vÆ
 = (
CPU_INT16S
)0;

607 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r_√xt
);

610 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_√xt
);

615  (
cmp_vÆ
);

616 
	}
}

687 
CPU_INT16S
 
	$Så_Cmp_N
 (
CPU_CHAR
 *
p1_°r
,

688 
CPU_CHAR
 *
p2_°r
,

689 
CPU_SIZE_T
 
Àn_max
)

691 
CPU_CHAR
 *
p1_°r_√xt
;

692 
CPU_CHAR
 *
p2_°r_√xt
;

693 
CPU_INT16S
 
cmp_vÆ
;

694 
CPU_SIZE_T
 
cmp_Àn
;

697 i‡(
Àn_max
 == 0) {

698  ((
CPU_INT16S
)0);

701 i‡(
p1_°r
 =(
CPU_CHAR
 *)0) {

702 i‡(
p2_°r
 =(
CPU_CHAR
 *)0) {

703  ((
CPU_INT16S
)0);

705 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r
);

706  (
cmp_vÆ
);

708 i‡(
p2_°r
 =(
CPU_CHAR
 *)0) {

709 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
);

710  (
cmp_vÆ
);

714 
p1_°r_√xt
 = 
p1_°r
;

715 
p2_°r_√xt
 = 
p2_°r
;

716 
p1_°r_√xt
++;

717 
p2_°r_√xt
++;

718 
cmp_Àn
 = 0;

719 (*
p1_°r
 =*
p2_°r
) &&

720 (*
p1_°r
 !(
CPU_CHAR
 )0) &&

721 –
p1_°r_√xt
 !(
CPU_CHAR
 *)0) &&

722 –
p2_°r_√xt
 !(
CPU_CHAR
 *)0) &&

723 –
cmp_Àn
 < (
CPU_SIZE_T
)
Àn_max
)) {

724 
p1_°r_√xt
++;

725 
p2_°r_√xt
++;

726 
p1_°r
++;

727 
p2_°r
++;

728 
cmp_Àn
++;

732 i‡(
cmp_Àn
 =
Àn_max
) {

733  ((
CPU_INT16S
)0);

736 i‡(*
p1_°r
 !*
p2_°r
) {

737 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r
Ë- (CPU_INT16S)(*
p2_°r
);

739 } i‡(*
p1_°r
 =(
CPU_CHAR
)0) {

740 
cmp_vÆ
 = 0;

743 i‡(
p1_°r_√xt
 =(
CPU_CHAR
 *)0) {

744 i‡(
p2_°r_√xt
 =(
CPU_CHAR
 *)0) {

745 
cmp_vÆ
 = (
CPU_INT16S
)0;

747 
cmp_vÆ
 = (
CPU_INT16S
)0 - (CPU_INT16S)(*
p2_°r_√xt
);

750 
cmp_vÆ
 = (
CPU_INT16S
)(*
p1_°r_√xt
);

755  (
cmp_vÆ
);

756 
	}
}

796 
CPU_CHAR
 *
	$Så_Ch¨
 (
CPU_CHAR
 *
p°r
,

797 
CPU_CHAR
 
§ch_ch¨
)

799 
CPU_CHAR
 *
p°r_√xt
;

802 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

803  ((
CPU_CHAR
 *)0);

807 
p°r_√xt
 = 
p°r
;

808 
p°r_√xt
++;

809 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

810 (*
p°r
 !(
CPU_CHAR
 )0) &&

811 (*
p°r
 !(
CPU_CHAR
 )
§ch_ch¨
)) {

812 
p°r
++;

813 
p°r_√xt
++;

817 i‡(*
p°r
 !
§ch_ch¨
) {

818  ((
CPU_CHAR
 *)0);

821  (
p°r
);

822 
	}
}

872 
CPU_CHAR
 *
	$Så_Ch¨_N
 (
CPU_CHAR
 *
p°r
,

873 
CPU_SIZE_T
 
Àn_max
,

874 
CPU_CHAR
 
§ch_ch¨
)

876 
CPU_CHAR
 *
p°r_√xt
;

877 
CPU_SIZE_T
 
Àn_§ch
;

880 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

881  ((
CPU_CHAR
 *)0);

884 i‡(
Àn_max
 =(
CPU_SIZE_T
)0) {

885  ((
CPU_CHAR
 *)0);

889 
p°r_√xt
 = 
p°r
;

890 
p°r_√xt
++;

891 
Àn_§ch
 = 0;

892 –
p°r_√xt
 !(
CPU_CHAR
 *)0) &&

893 (*
p°r
 !(
CPU_CHAR
 )0) &&

894 (*
p°r
 !(
CPU_CHAR
 )
§ch_ch¨
) &&

895 –
Àn_§ch
 < (
CPU_SIZE_T
)
Àn_max
)) {

896 
p°r
++;

897 
p°r_√xt
++;

898 
Àn_§ch
++;

902 i‡(*
p°r
 !
§ch_ch¨
) {

903  ((
CPU_CHAR
 *)0);

906  (
p°r
);

907 
	}
}

948 
CPU_CHAR
 *
	$Så_Ch¨_La°
 (
CPU_CHAR
 *
p°r
,

949 
CPU_CHAR
 
§ch_ch¨
)

951 
CPU_CHAR
 *
p°r_√xt
;

952 
CPU_SIZE_T
 
°r_Àn
;

955 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

956  ((
CPU_CHAR
 *)0);

960 
p°r_√xt
 = 
p°r
;

961 
°r_Àn
 = 
	`Så_Lí
(
p°r
);

962 
p°r_√xt
 +
°r_Àn
;

963 –
p°r_√xt
 !
p°r
) &&

964 (*
p°r_√xt
 !
§ch_ch¨
)) {

965 
p°r_√xt
--;

969 i‡(*
p°r_√xt
 !
§ch_ch¨
) {

970  ((
CPU_CHAR
 *)0);

973  (
p°r_√xt
);

974 
	}
}

1018 
CPU_CHAR
 *
	$Så_Så
 (
CPU_CHAR
 *
p°r
,

1019 
CPU_CHAR
 *
p§ch_°r
)

1021 
CPU_SIZE_T
 
°r_Àn
;

1022 
CPU_SIZE_T
 
§ch_°r_Àn
;

1023 
CPU_SIZE_T
 
§ch_Àn
;

1024 
CPU_SIZE_T
 
§ch_ix
;

1025 
CPU_BOOLEAN
 
§ch_d⁄e
;

1026 
CPU_INT16S
 
§ch_cmp
;

1027 
CPU_CHAR
 *
p°r_§ch_ix
;

1030 i‡(
p°r
 =(
CPU_CHAR
 *)0) {

1031  ((
CPU_CHAR
 *)0);

1033 i‡(
p§ch_°r
 =(
CPU_CHAR
 *)0) {

1034  ((
CPU_CHAR
 *)0);

1038 
°r_Àn
 = 
	`Så_Lí
(
p°r
);

1039 
§ch_°r_Àn
 = 
	`Så_Lí
(
p§ch_°r
);

1040 i‡(
§ch_°r_Àn
 > 
°r_Àn
) {

1041  ((
CPU_CHAR
 *)0);

1043 i‡(
§ch_°r_Àn
 == 0) {

1044 
p°r_§ch_ix
 = (
CPU_CHAR
 *)(
p°r
 + 
°r_Àn
);

1045  (
p°r_§ch_ix
);

1048 
§ch_Àn
 = 
°r_Àn
 - 
§ch_°r_Àn
;

1049 
§ch_ix
 = 0;

1050 
§ch_d⁄e
 = 
DEF_NO
;

1051 (
§ch_d⁄e
 =
DEF_NO
Ë&& (
§ch_ix
 <
§ch_Àn
)) {

1052 
p°r_§ch_ix
 = (
CPU_CHAR
 *)(
p°r
 + 
§ch_ix
);

1053 
§ch_cmp
 = 
	`Så_Cmp_N
(
p°r_§ch_ix
, 
p§ch_°r
, 
§ch_°r_Àn
);

1054 
§ch_d⁄e
 = (
§ch_cmp
 =0Ë? 
DEF_YES
 : 
DEF_NO
;

1055 
§ch_ix
++;

1059 i‡(
§ch_cmp
 != 0) {

1060  ((
CPU_CHAR
 *)0);

1063  (
p°r_§ch_ix
);

1064 
	}
}

1179 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

1180 
CPU_CHAR
 *
	$Så_FmtNbr_32
 (
CPU_FP32
 
nbr
,

1181 
CPU_INT08U
 
nbr_dig
,

1182 
CPU_INT08U
 
nbr_dp
,

1183 
CPU_BOOLEAN
 
Àad_zîos
,

1184 
CPU_BOOLEAN
 
nul
,

1185 
CPU_CHAR
 *
p°r_fmt
)

1187 
CPU_CHAR
 *
p°r
;

1188 
CPU_INT08U
 
i
;

1189 
CPU_INT32U
 
dig_nbr
;

1190 
CPU_INT32U
 
dig_vÆ
;

1191 
CPU_FP32
 
dig_exp
;

1192 
CPU_FP32
 
dp_exp
;

1195 i‡(
p°r_fmt
 =(
CPU_CHAR
 *)0) {

1196  ((
CPU_CHAR
 *)0);

1200 
p°r
 = 
p°r_fmt
;

1202 i‡(
nbr
 < 0.0) {

1203 i‡((
nbr_dig
 > 0) ||

1204 (
nbr_dp
 > 0)) {

1205 
nbr
 = -nbr;

1206 *
p°r
++ = '-';

1210 i‡(
nbr_dig
 > 0) {

1211 
dig_exp
 = 1.0;

1212 
i
 = 1; i < 
nbr_dig
; i++) {

1213 
dig_exp
 *= 10.0;

1215 
i
 = 
nbr_dig
; i > 0; i--) {

1216 
dig_nbr
 = (
CPU_INT32U
)(
nbr
 / 
dig_exp
);

1217 i‡((
dig_nbr
 > 0) ||

1218 (
nbr_dig
 == 1) ||

1219 (
i
 == 1) ||

1220 (
Àad_zîos
 =
DEF_YES
)) {

1222 
dig_vÆ
 = (
CPU_INT32U
)(
dig_nbr
 % 10 );

1223 *
p°r
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

1225 
dig_exp
 /= 10.0;

1229 i‡(
nbr_dp
 > 0) {

1230 *
p°r
++ = '.';

1231 
dp_exp
 = 10.0;

1232 
i
 = 0; i < 
nbr_dp
; i++) {

1233 
dig_nbr
 = (
CPU_INT32U
)(
nbr
 * 
dp_exp
 );

1234 
dig_vÆ
 = (
CPU_INT32U
)(
dig_nbr
 % 10 );

1235 *
p°r
++ = (
CPU_CHAR
 )(
dig_vÆ
 + '0');

1236 
dp_exp
 *= 10.0;

1240 i‡(
nul
 !
DEF_NO
) {

1241 *
p°r
 = (
CPU_CHAR
)0;

1245  (
p°r_fmt
);

1246 
	}
}

	@uCOS-II/uC-LIB/lib_str.h

58 #i‚de‡ 
LIB_STR_MODULE_PRESENT


59 
	#LIB_STR_MODULE_PRESENT


	)

94 
	~<˝u.h
>

95 
	~<lib_def.h
>

96 
	~<≠p_cfg.h
>

99 
	~<°dlib.h
>

100 
	~<˘y≥.h
>

101 
	~<î∫o.h
>

102 
	~<limôs.h
>

103 
	~<°dio.h
>

112 #ifde‡ 
LIB_STR_MODULE


113 
	#LIB_STR_EXT


	)

115 
	#LIB_STR_EXT
 

	)

126 #i‚de‡ 
LIB_STR_CFG_FP_EN


127 
	#LIB_STR_CFG_FP_EN
 
DEF_DISABLED


	)

137 
	#LIB_STR_NULL
 ((
CPU_CHAR
 *)0)

	)

138 
	#LIB_STR_CMP_IDENTICAL
 0

	)

176 
	#Så_IsAÕha
(
a
Ë
	`ißÕha
◊)

	)

177 
	#Så_IsDigô
(
a
Ë
	`isdigô
◊)

	)

178 
	#Så_IsS∑˚
(
a
Ë
	`is•a˚
◊)

	)

179 
	#Så_IsPröt
(
a
Ë
	`i•röt
◊)

	)

180 
	#Så_IsUµî
(
a
Ë
	`isuµî
◊)

	)

181 
	#Så_IsLowî
(
a
Ë
	`i¶owî
◊)

	)

182 
	#Så_ToUµî
(
a
Ë
	`touµî
◊)

	)

183 
	#Så_ToLowî
(
a
Ë
	`tﬁowî
◊)

	)

185 
	#Så_ToL⁄g
(
a
, 
b
, 
c
Ë
	`°πﬁ
((*Ô, (**)b, c)

	)

186 
	#Så_FmtPröt
 
¢¥ötf


	)

187 
	#Så_FmtSˇn
 
ssˇnf


	)

197 
CPU_SIZE_T
 
Så_Lí
 (
CPU_CHAR
 *
p°r
);

201 
CPU_CHAR
 *
Så_C›y
 (CPU_CHAR *
pde°
,

202 
CPU_CHAR
 *
p§c
);

204 
CPU_CHAR
 *
Så_C›y_N
 (CPU_CHAR *
pde°
,

205 
CPU_CHAR
 *
p§c
,

206 
CPU_SIZE_T
 
Àn_max
);

209 
CPU_CHAR
 *
Så_C©
 (CPU_CHAR *
pde°
,

210 
CPU_CHAR
 *
p°r_ˇt
);

212 
CPU_CHAR
 *
Så_C©_N
 (CPU_CHAR *
pde°
,

213 
CPU_CHAR
 *
p°r_ˇt
,

214 
CPU_SIZE_T
 
Àn_max
);

218 
CPU_INT16S
 
Så_Cmp
 (
CPU_CHAR
 *
p1_°r
,

219 
CPU_CHAR
 *
p2_°r
);

221 
CPU_INT16S
 
Så_Cmp_N
 (
CPU_CHAR
 *
p1_°r
,

222 
CPU_CHAR
 *
p2_°r
,

223 
CPU_SIZE_T
 
Àn_max
);

226 
CPU_CHAR
 *
Så_Ch¨
 (CPU_CHAR *
p°r
,

227 
CPU_CHAR
 
§ch_ch¨
);

229 
CPU_CHAR
 *
Så_Ch¨_N
 (CPU_CHAR *
p°r
,

230 
CPU_SIZE_T
 
Àn_max
,

231 
CPU_CHAR
 
§ch_ch¨
);

233 
CPU_CHAR
 *
Så_Ch¨_La°
(CPU_CHAR *
p°r
,

234 
CPU_CHAR
 
§ch_ch¨
);

237 
CPU_CHAR
 *
Så_Så
 (CPU_CHAR *
p°r
,

238 
CPU_CHAR
 *
§ch_°r
);

242 #i‡(
LIB_STR_CFG_FP_EN
 =
DEF_ENABLED
)

243 
CPU_CHAR
 *
Så_FmtNbr_32
(
CPU_FP32
 
nbr
,

244 
CPU_INT08U
 
nbr_dig
,

245 
CPU_INT08U
 
nbr_dp
,

246 
CPU_BOOLEAN
 
Àad_zîos
,

247 
CPU_BOOLEAN
 
nul
,

248 
CPU_CHAR
 *
p°r_fmt
);

259 #i‚de‡ 
LIB_STR_CFG_FP_EN


264 #ñi‡ ((
LIB_STR_CFG_FP_EN
 !
DEF_DISABLED
) && \

265 (
	gLIB_STR_CFG_FP_EN
 !
DEF_ENABLED
 ))

	@
1
.
0
104
2387
APP/BinType.h
APP/app.c
APP/app.h
APP/app_cfg.h
APP/config.h
APP/globals.h
APP/includes.h
APP/os_cfg.h
APP/stm32f10x_it.c
BSP/ads1100/ads1100.c
BSP/ads1100/ads1100.h
BSP/bluetooth/bluetooth.c
BSP/bluetooth/bluetooth.h
BSP/bsp.c
BSP/bsp.h
BSP/delay.c
BSP/delay.h
BSP/ds18b20/ds18b20.c
BSP/ds18b20/ds18b20.h
BSP/fan/fan.c
BSP/fan/fan.h
BSP/lcd1602/lcd1602.c
BSP/lcd1602/lcd1602.h
BSP/m25p16/m25p16.c
BSP/m25p16/m25p16.h
BSP/pid/pid.c
BSP/pid/pid.h
CM3/core_cm3.c
CM3/core_cm3.h
CM3/stm32f10x.h
CM3/system_stm32f10x.c
CM3/system_stm32f10x.h
FWlib/SRC/misc.c
FWlib/SRC/stm32f10x_adc.c
FWlib/SRC/stm32f10x_bkp.c
FWlib/SRC/stm32f10x_can.c
FWlib/SRC/stm32f10x_cec.c
FWlib/SRC/stm32f10x_crc.c
FWlib/SRC/stm32f10x_dac.c
FWlib/SRC/stm32f10x_dbgmcu.c
FWlib/SRC/stm32f10x_dma.c
FWlib/SRC/stm32f10x_exti.c
FWlib/SRC/stm32f10x_flash.c
FWlib/SRC/stm32f10x_fsmc.c
FWlib/SRC/stm32f10x_gpio.c
FWlib/SRC/stm32f10x_i2c.c
FWlib/SRC/stm32f10x_iwdg.c
FWlib/SRC/stm32f10x_pwr.c
FWlib/SRC/stm32f10x_rcc.c
FWlib/SRC/stm32f10x_rtc.c
FWlib/SRC/stm32f10x_sdio.c
FWlib/SRC/stm32f10x_spi.c
FWlib/SRC/stm32f10x_tim.c
FWlib/SRC/stm32f10x_usart.c
FWlib/SRC/stm32f10x_wwdg.c
FWlib/SRC/system_stm32f10x.c
FWlib/inc/misc.h
FWlib/inc/stm32f10x_adc.h
FWlib/inc/stm32f10x_bkp.h
FWlib/inc/stm32f10x_can.h
FWlib/inc/stm32f10x_cec.h
FWlib/inc/stm32f10x_conf.h
FWlib/inc/stm32f10x_crc.h
FWlib/inc/stm32f10x_dac.h
FWlib/inc/stm32f10x_dbgmcu.h
FWlib/inc/stm32f10x_dma.h
FWlib/inc/stm32f10x_exti.h
FWlib/inc/stm32f10x_flash.h
FWlib/inc/stm32f10x_fsmc.h
FWlib/inc/stm32f10x_gpio.h
FWlib/inc/stm32f10x_i2c.h
FWlib/inc/stm32f10x_iwdg.h
FWlib/inc/stm32f10x_pwr.h
FWlib/inc/stm32f10x_rcc.h
FWlib/inc/stm32f10x_rtc.h
FWlib/inc/stm32f10x_sdio.h
FWlib/inc/stm32f10x_spi.h
FWlib/inc/stm32f10x_tim.h
FWlib/inc/stm32f10x_usart.h
FWlib/inc/stm32f10x_wwdg.h
uCOS-II/Ports/os_cpu.h
uCOS-II/Ports/os_cpu_c.c
uCOS-II/Ports/os_dbg.c
uCOS-II/Source/os_core.c
uCOS-II/Source/os_flag.c
uCOS-II/Source/os_mbox.c
uCOS-II/Source/os_mem.c
uCOS-II/Source/os_mutex.c
uCOS-II/Source/os_q.c
uCOS-II/Source/os_sem.c
uCOS-II/Source/os_task.c
uCOS-II/Source/os_time.c
uCOS-II/Source/os_tmr.c
uCOS-II/Source/ucos_ii.c
uCOS-II/Source/ucos_ii.h
uCOS-II/uC-CPU/cpu.h
uCOS-II/uC-CPU/cpu_core.c
uCOS-II/uC-CPU/cpu_core.h
uCOS-II/uC-CPU/cpu_def.h
uCOS-II/uC-LIB/lib_def.h
uCOS-II/uC-LIB/lib_mem.c
uCOS-II/uC-LIB/lib_mem.h
uCOS-II/uC-LIB/lib_str.c
uCOS-II/uC-LIB/lib_str.h
